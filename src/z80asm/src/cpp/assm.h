//-----------------------------------------------------------------------------
// z80asm
// assembler
// Copyright (C) Paulo Custodio, 2011-2022
// License: The Artistic License 2.0, http://www.perlfoundation.org/artistic_license_2_0
//-----------------------------------------------------------------------------

#pragma once

#include "lex.h"
#include <memory>
#include <string>
using namespace std;

class Object;
class Module;
class Group;
class Section;
class Expr;

class Assm {
public:
	bool assemble(const string& filename);

private:
	enum class State { Main };

	Lexer				m_lexer;
	State				m_state{ State::Main };
	shared_ptr<Object>	m_object;
	weak_ptr<Module>	m_cur_module;
	weak_ptr<Group>		m_cur_group;
	weak_ptr<Section>	m_cur_section;
	vector<shared_ptr<Expr>> m_exprs;		// expressions parsed

	bool assemble1(const string& filename);
	bool parse();
	bool parse_line();
	bool parse_line_main();
	bool asm_parse_main();					// generated by dev/cpu/*
	bool asm_parse_main_action(int action);	// generated by dev/cpu/*

	void set_cur_module(const string& name);
	void set_cur_group(const string& name);
	void set_cur_section(const string& name);

	string check_label();
	bool add_label(const string& name);
};
