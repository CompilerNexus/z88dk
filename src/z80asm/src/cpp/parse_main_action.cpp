// generated by make_parser_code.pl
#include "args.h"
#include "asm.h"
#include "icode.h"
#include "parse.h"
#include "xassert.h"

// ACI expr End | ADC A Comma expr End | ADC expr End
void Parser::parse_main_action_1() {
	warn_if_expr_in_parens();
	add_opcode_n(0xCE);
}

// ADC A Comma A End | ADC A End
void Parser::parse_main_action_2() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F8F);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x8F);
	break;
	default:
	error_illegal_ident(); }
}

// ADC A Comma B End | ADC B End
void Parser::parse_main_action_3() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F88);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x88);
	break;
	default:
	error_illegal_ident(); }
}

// ADC A Comma C End | ADC C End
void Parser::parse_main_action_4() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F89);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x89);
	break;
	default:
	error_illegal_ident(); }
}

// ADC A Comma D End | ADC D End
void Parser::parse_main_action_5() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F8A);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x8A);
	break;
	default:
	error_illegal_ident(); }
}

// ADC A Comma E End | ADC E End
void Parser::parse_main_action_6() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F8B);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x8B);
	break;
	default:
	error_illegal_ident(); }
}

// ADC A Comma H End | ADC H End
void Parser::parse_main_action_7() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F8C);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x8C);
	break;
	default:
	error_illegal_ident(); }
}

// ADC A Comma IXH End | ADC IXH End
void Parser::parse_main_action_8() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDD8C);
	break;
	default:
	error_illegal_ident(); }
}

// ADC A Comma IXL End | ADC IXL End
void Parser::parse_main_action_9() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDD8D);
	break;
	default:
	error_illegal_ident(); }
}

// ADC A Comma IYH End | ADC IYH End
void Parser::parse_main_action_10() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFD8C);
	break;
	default:
	error_illegal_ident(); }
}

// ADC A Comma IYL End | ADC IYL End
void Parser::parse_main_action_11() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFD8D);
	break;
	default:
	error_illegal_ident(); }
}

// ADC A Comma L End | ADC L End
void Parser::parse_main_action_12() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F8D);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x8D);
	break;
	default:
	error_illegal_ident(); }
}

// ADC A Comma LParen AHL RParen End | ADC LParen AHL RParen End
void Parser::parse_main_action_13() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0x8E);
	break;
	default:
	error_illegal_ident(); }
}

// ADC A Comma LParen AIX RParen End | ADC LParen AIX RParen End
void Parser::parse_main_action_14() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xDD8E00);
	break;
	default:
	error_illegal_ident(); }
}

// ADC A Comma LParen AIX expr RParen End | ADC LParen AIX expr RParen End
void Parser::parse_main_action_15() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xDD8E);
	break;
	default:
	error_illegal_ident(); }
}

// ADC A Comma LParen AIY RParen End | ADC LParen AIY RParen End
void Parser::parse_main_action_16() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xFD8E00);
	break;
	default:
	error_illegal_ident(); }
}

// ADC A Comma LParen AIY expr RParen End | ADC LParen AIY expr RParen End
void Parser::parse_main_action_17() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xFD8E);
	break;
	default:
	error_illegal_ident(); }
}

// ADC A Comma LParen HL Minus RParen End | ADC LParen HL Minus RParen End
void Parser::parse_main_action_18() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F8E);
	add_opcode(0x2B);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x8E);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// ADC A Comma LParen HL Plus RParen End | ADC LParen HL Plus RParen End
void Parser::parse_main_action_19() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F8E);
	add_opcode(0x23);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x8E);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// ADC A Comma LParen HL RParen End | ADC M End | ADC LParen HL RParen End
void Parser::parse_main_action_20() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F8E);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x8E);
	break;
	default:
	error_illegal_ident(); }
}

// ADC A Comma LParen IX RParen End | ADC LParen IX RParen End
void Parser::parse_main_action_21() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xDD8E00);
	break;
	default:
	error_illegal_ident(); }
}

// ADC A Comma LParen IX expr RParen End | ADC LParen IX expr RParen End
void Parser::parse_main_action_22() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx(0xDD8E);
	break;
	default:
	error_illegal_ident(); }
}

// ADC A Comma LParen IY RParen End | ADC LParen IY RParen End
void Parser::parse_main_action_23() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xFD8E00);
	break;
	default:
	error_illegal_ident(); }
}

// ADC A Comma LParen IY expr RParen End | ADC LParen IY expr RParen End
void Parser::parse_main_action_24() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx(0xFD8E);
	break;
	default:
	error_illegal_ident(); }
}

// ADC A Comma LParen PHL RParen End | ADC LParen PHL RParen End
void Parser::parse_main_action_25() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0x8E);
	break;
	default:
	error_illegal_ident(); }
}

// ADC A Comma LParen PIX RParen End | ADC LParen PIX RParen End
void Parser::parse_main_action_26() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xDD8E00);
	break;
	default:
	error_illegal_ident(); }
}

// ADC A Comma LParen PIX expr RParen End | ADC LParen PIX expr RParen End
void Parser::parse_main_action_27() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xDD8E);
	break;
	default:
	error_illegal_ident(); }
}

// ADC A Comma LParen PIY RParen End | ADC LParen PIY RParen End
void Parser::parse_main_action_28() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xFD8E00);
	break;
	default:
	error_illegal_ident(); }
}

// ADC A Comma LParen PIY expr RParen End | ADC LParen PIY expr RParen End
void Parser::parse_main_action_29() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xFD8E);
	break;
	default:
	error_illegal_ident(); }
}

// ADC A Comma LParen XHL RParen End | ADC LParen XHL RParen End
void Parser::parse_main_action_30() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0x8E);
	break;
	default:
	error_illegal_ident(); }
}

// ADC A Comma LParen XIX RParen End | ADC LParen XIX RParen End
void Parser::parse_main_action_31() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xDD8E00);
	break;
	default:
	error_illegal_ident(); }
}

// ADC A Comma LParen XIX expr RParen End | ADC LParen XIX expr RParen End
void Parser::parse_main_action_32() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xDD8E);
	break;
	default:
	error_illegal_ident(); }
}

// ADC A Comma LParen XIY RParen End | ADC LParen XIY RParen End
void Parser::parse_main_action_33() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xFD8E00);
	break;
	default:
	error_illegal_ident(); }
}

// ADC A Comma LParen XIY expr RParen End | ADC LParen XIY expr RParen End
void Parser::parse_main_action_34() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xFD8E);
	break;
	default:
	error_illegal_ident(); }
}

// ADC A Comma LParen YHL RParen End | ADC LParen YHL RParen End
void Parser::parse_main_action_35() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0x8E);
	break;
	default:
	error_illegal_ident(); }
}

// ADC A Comma LParen YIX RParen End | ADC LParen YIX RParen End
void Parser::parse_main_action_36() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xDD8E00);
	break;
	default:
	error_illegal_ident(); }
}

// ADC A Comma LParen YIX expr RParen End | ADC LParen YIX expr RParen End
void Parser::parse_main_action_37() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xDD8E);
	break;
	default:
	error_illegal_ident(); }
}

// ADC A Comma LParen YIY RParen End | ADC LParen YIY RParen End
void Parser::parse_main_action_38() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xFD8E00);
	break;
	default:
	error_illegal_ident(); }
}

// ADC A Comma LParen YIY expr RParen End | ADC LParen YIY expr RParen End
void Parser::parse_main_action_39() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xFD8E);
	break;
	default:
	error_illegal_ident(); }
}

// ADC A Comma LParen ZHL RParen End | ADC LParen ZHL RParen End
void Parser::parse_main_action_40() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0x8E);
	break;
	default:
	error_illegal_ident(); }
}

// ADC A Comma LParen ZIX RParen End | ADC LParen ZIX RParen End
void Parser::parse_main_action_41() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xDD8E00);
	break;
	default:
	error_illegal_ident(); }
}

// ADC A Comma LParen ZIX expr RParen End | ADC LParen ZIX expr RParen End
void Parser::parse_main_action_42() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xDD8E);
	break;
	default:
	error_illegal_ident(); }
}

// ADC A Comma LParen ZIY RParen End | ADC LParen ZIY RParen End
void Parser::parse_main_action_43() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xFD8E00);
	break;
	default:
	error_illegal_ident(); }
}

// ADC A Comma LParen ZIY expr RParen End | ADC LParen ZIY expr RParen End
void Parser::parse_main_action_44() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xFD8E);
	break;
	default:
	error_illegal_ident(); }
}

// ADC A1 Comma A End | ALTD ADC A Comma A End | ALTD ADC A End
void Parser::parse_main_action_45() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F8F);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x8F);
	break;
	default:
	error_illegal_ident(); }
}

// ADC A1 Comma B End | ALTD ADC A Comma B End | ALTD ADC B End
void Parser::parse_main_action_46() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F88);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x88);
	break;
	default:
	error_illegal_ident(); }
}

// ADC A1 Comma C End | ALTD ADC A Comma C End | ALTD ADC C End
void Parser::parse_main_action_47() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F89);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x89);
	break;
	default:
	error_illegal_ident(); }
}

// ADC A1 Comma D End | ALTD ADC A Comma D End | ALTD ADC D End
void Parser::parse_main_action_48() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F8A);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x8A);
	break;
	default:
	error_illegal_ident(); }
}

// ADC A1 Comma E End | ALTD ADC A Comma E End | ALTD ADC E End
void Parser::parse_main_action_49() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F8B);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x8B);
	break;
	default:
	error_illegal_ident(); }
}

// ADC A1 Comma H End | ALTD ADC A Comma H End | ALTD ADC H End
void Parser::parse_main_action_50() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F8C);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x8C);
	break;
	default:
	error_illegal_ident(); }
}

// ADC A1 Comma L End | ALTD ADC A Comma L End | ALTD ADC L End
void Parser::parse_main_action_51() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F8D);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x8D);
	break;
	default:
	error_illegal_ident(); }
}

// ADC A1 Comma LParen HL Minus RParen End | ALTD ADC A Comma LParen HL Minus RParen End | ALTD ADC LParen HL Minus RParen End
void Parser::parse_main_action_52() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F8E);
	add_opcode(0x2B);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x8E);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// ADC A1 Comma LParen HL Plus RParen End | ALTD ADC A Comma LParen HL Plus RParen End | ALTD ADC LParen HL Plus RParen End
void Parser::parse_main_action_53() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F8E);
	add_opcode(0x23);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x8E);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// ADC A1 Comma LParen HL RParen End | ALTD ADC A Comma LParen HL RParen End | ALTD ADC LParen HL RParen End
void Parser::parse_main_action_54() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F8E);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x8E);
	break;
	default:
	error_illegal_ident(); }
}

// ADC A1 Comma LParen IX RParen End | ALTD ADC A Comma LParen IX RParen End | ALTD ADC LParen IX RParen End
void Parser::parse_main_action_55() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDD8E00);
	break;
	default:
	error_illegal_ident(); }
}

// ADC A1 Comma LParen IX expr RParen End | ALTD ADC A Comma LParen IX expr RParen End | ALTD ADC LParen IX expr RParen End
void Parser::parse_main_action_56() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0xDD8E);
	break;
	default:
	error_illegal_ident(); }
}

// ADC A1 Comma LParen IY RParen End | ALTD ADC A Comma LParen IY RParen End | ALTD ADC LParen IY RParen End
void Parser::parse_main_action_57() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xFD8E00);
	break;
	default:
	error_illegal_ident(); }
}

// ADC A1 Comma LParen IY expr RParen End | ALTD ADC A Comma LParen IY expr RParen End | ALTD ADC LParen IY expr RParen End
void Parser::parse_main_action_58() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0xFD8E);
	break;
	default:
	error_illegal_ident(); }
}

// ADC A1 Comma expr End | ALTD ADC A Comma expr End | ALTD ADC expr End
void Parser::parse_main_action_59() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	add_opcode_n(0xCE);
	break;
	default:
	error_illegal_ident(); }
}

// ADC AHL Comma BC End
void Parser::parse_main_action_60() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xED4A);
	break;
	default:
	error_illegal_ident(); }
}

// ADC AHL Comma DE End
void Parser::parse_main_action_61() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xED5A);
	break;
	default:
	error_illegal_ident(); }
}

// ADC AHL Comma HL End
void Parser::parse_main_action_62() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xED6A);
	break;
	default:
	error_illegal_ident(); }
}

// ADC AHL Comma SP End
void Parser::parse_main_action_63() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xED7A);
	break;
	default:
	error_illegal_ident(); }
}

// ADC HL Comma BC End
void Parser::parse_main_action_64() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_GBZ80: 
	add_call_function("__z80asm__adc_hl_bc");
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xED4A);
	break;
	default:
	error_illegal_ident(); }
}

// ADC HL Comma DE End
void Parser::parse_main_action_65() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_GBZ80: 
	add_call_function("__z80asm__adc_hl_de");
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xED5A);
	break;
	default:
	error_illegal_ident(); }
}

// ADC HL Comma HL End
void Parser::parse_main_action_66() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_GBZ80: 
	add_call_function("__z80asm__adc_hl_hl");
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xED6A);
	break;
	default:
	error_illegal_ident(); }
}

// ADC HL Comma SP End
void Parser::parse_main_action_67() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_GBZ80: 
	add_call_function("__z80asm__adc_hl_sp");
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xED7A);
	break;
	default:
	error_illegal_ident(); }
}

// ADC HL1 Comma BC End | ALTD ADC HL Comma BC End
void Parser::parse_main_action_68() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xED4A);
	break;
	default:
	error_illegal_ident(); }
}

// ADC HL1 Comma DE End | ALTD ADC HL Comma DE End
void Parser::parse_main_action_69() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xED5A);
	break;
	default:
	error_illegal_ident(); }
}

// ADC HL1 Comma HL End | ALTD ADC HL Comma HL End
void Parser::parse_main_action_70() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xED6A);
	break;
	default:
	error_illegal_ident(); }
}

// ADC HL1 Comma SP End | ALTD ADC HL Comma SP End
void Parser::parse_main_action_71() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xED7A);
	break;
	default:
	error_illegal_ident(); }
}

// ADC XHL Comma BC End
void Parser::parse_main_action_72() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xED4A);
	break;
	default:
	error_illegal_ident(); }
}

// ADC XHL Comma DE End
void Parser::parse_main_action_73() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xED5A);
	break;
	default:
	error_illegal_ident(); }
}

// ADC XHL Comma HL End
void Parser::parse_main_action_74() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xED6A);
	break;
	default:
	error_illegal_ident(); }
}

// ADC XHL Comma SP End
void Parser::parse_main_action_75() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xED7A);
	break;
	default:
	error_illegal_ident(); }
}

// ADC YHL Comma BC End
void Parser::parse_main_action_76() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xED4A);
	break;
	default:
	error_illegal_ident(); }
}

// ADC YHL Comma DE End
void Parser::parse_main_action_77() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xED5A);
	break;
	default:
	error_illegal_ident(); }
}

// ADC YHL Comma HL End
void Parser::parse_main_action_78() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xED6A);
	break;
	default:
	error_illegal_ident(); }
}

// ADC YHL Comma SP End
void Parser::parse_main_action_79() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xED7A);
	break;
	default:
	error_illegal_ident(); }
}

// ADC ZHL Comma BC End
void Parser::parse_main_action_80() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xED4A);
	break;
	default:
	error_illegal_ident(); }
}

// ADC ZHL Comma DE End
void Parser::parse_main_action_81() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xED5A);
	break;
	default:
	error_illegal_ident(); }
}

// ADC ZHL Comma HL End
void Parser::parse_main_action_82() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xED6A);
	break;
	default:
	error_illegal_ident(); }
}

// ADC ZHL Comma SP End
void Parser::parse_main_action_83() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xED7A);
	break;
	default:
	error_illegal_ident(); }
}

// ADC Dot L A Comma LParen HL Minus RParen End | ADC Dot L LParen HL Minus RParen End | ADC Dot LIS A Comma LParen HL Minus RParen End | ADC Dot LIS LParen HL Minus RParen End
void Parser::parse_main_action_84() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x8E);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// ADC Dot L A Comma LParen HL Plus RParen End | ADC Dot L LParen HL Plus RParen End | ADC Dot LIS A Comma LParen HL Plus RParen End | ADC Dot LIS LParen HL Plus RParen End
void Parser::parse_main_action_85() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x8E);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// ADC Dot L A Comma LParen HL RParen End | ADC Dot L LParen HL RParen End | ADC Dot LIS A Comma LParen HL RParen End | ADC Dot LIS LParen HL RParen End
void Parser::parse_main_action_86() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x8E);
	break;
	default:
	error_illegal_ident(); }
}

// ADC Dot L A Comma LParen IX RParen End | ADC Dot L LParen IX RParen End | ADC Dot LIS A Comma LParen IX RParen End | ADC Dot LIS LParen IX RParen End
void Parser::parse_main_action_87() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xDD8E00);
	break;
	default:
	error_illegal_ident(); }
}

// ADC Dot L A Comma LParen IX expr RParen End | ADC Dot L LParen IX expr RParen End | ADC Dot LIS A Comma LParen IX expr RParen End | ADC Dot LIS LParen IX expr RParen End
void Parser::parse_main_action_88() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xDD8E);
	break;
	default:
	error_illegal_ident(); }
}

// ADC Dot L A Comma LParen IY RParen End | ADC Dot L LParen IY RParen End | ADC Dot LIS A Comma LParen IY RParen End | ADC Dot LIS LParen IY RParen End
void Parser::parse_main_action_89() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xFD8E00);
	break;
	default:
	error_illegal_ident(); }
}

// ADC Dot L A Comma LParen IY expr RParen End | ADC Dot L LParen IY expr RParen End | ADC Dot LIS A Comma LParen IY expr RParen End | ADC Dot LIS LParen IY expr RParen End
void Parser::parse_main_action_90() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xFD8E);
	break;
	default:
	error_illegal_ident(); }
}

// ADC Dot L HL Comma BC End | ADC Dot LIS HL Comma BC End
void Parser::parse_main_action_91() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xED4A);
	break;
	default:
	error_illegal_ident(); }
}

// ADC Dot L HL Comma DE End | ADC Dot LIS HL Comma DE End
void Parser::parse_main_action_92() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xED5A);
	break;
	default:
	error_illegal_ident(); }
}

// ADC Dot L HL Comma HL End | ADC Dot LIS HL Comma HL End
void Parser::parse_main_action_93() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xED6A);
	break;
	default:
	error_illegal_ident(); }
}

// ADC Dot L HL Comma SP End | ADC Dot LIS HL Comma SP End
void Parser::parse_main_action_94() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xED7A);
	break;
	default:
	error_illegal_ident(); }
}

// ADC Dot S A Comma LParen HL Minus RParen End | ADC Dot S LParen HL Minus RParen End | ADC Dot SIL A Comma LParen HL Minus RParen End | ADC Dot SIL LParen HL Minus RParen End
void Parser::parse_main_action_95() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x8E);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// ADC Dot S A Comma LParen HL Plus RParen End | ADC Dot S LParen HL Plus RParen End | ADC Dot SIL A Comma LParen HL Plus RParen End | ADC Dot SIL LParen HL Plus RParen End
void Parser::parse_main_action_96() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x8E);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// ADC Dot S A Comma LParen HL RParen End | ADC Dot S LParen HL RParen End | ADC Dot SIL A Comma LParen HL RParen End | ADC Dot SIL LParen HL RParen End
void Parser::parse_main_action_97() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x8E);
	break;
	default:
	error_illegal_ident(); }
}

// ADC Dot S A Comma LParen IX RParen End | ADC Dot S LParen IX RParen End | ADC Dot SIL A Comma LParen IX RParen End | ADC Dot SIL LParen IX RParen End
void Parser::parse_main_action_98() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xDD8E00);
	break;
	default:
	error_illegal_ident(); }
}

// ADC Dot S A Comma LParen IX expr RParen End | ADC Dot S LParen IX expr RParen End | ADC Dot SIL A Comma LParen IX expr RParen End | ADC Dot SIL LParen IX expr RParen End
void Parser::parse_main_action_99() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xDD8E);
	break;
	default:
	error_illegal_ident(); }
}

// ADC Dot S A Comma LParen IY RParen End | ADC Dot S LParen IY RParen End | ADC Dot SIL A Comma LParen IY RParen End | ADC Dot SIL LParen IY RParen End
void Parser::parse_main_action_100() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xFD8E00);
	break;
	default:
	error_illegal_ident(); }
}

// ADC Dot S A Comma LParen IY expr RParen End | ADC Dot S LParen IY expr RParen End | ADC Dot SIL A Comma LParen IY expr RParen End | ADC Dot SIL LParen IY expr RParen End
void Parser::parse_main_action_101() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xFD8E);
	break;
	default:
	error_illegal_ident(); }
}

// ADC Dot S HL Comma BC End | ADC Dot SIL HL Comma BC End
void Parser::parse_main_action_102() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xED4A);
	break;
	default:
	error_illegal_ident(); }
}

// ADC Dot S HL Comma DE End | ADC Dot SIL HL Comma DE End
void Parser::parse_main_action_103() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xED5A);
	break;
	default:
	error_illegal_ident(); }
}

// ADC Dot S HL Comma HL End | ADC Dot SIL HL Comma HL End
void Parser::parse_main_action_104() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xED6A);
	break;
	default:
	error_illegal_ident(); }
}

// ADC Dot S HL Comma SP End | ADC Dot SIL HL Comma SP End
void Parser::parse_main_action_105() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xED7A);
	break;
	default:
	error_illegal_ident(); }
}

// ADD A Comma A End | ADD A End
void Parser::parse_main_action_106() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F87);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x87);
	break;
	default:
	error_illegal_ident(); }
}

// ADD A Comma B End | ADD B End
void Parser::parse_main_action_107() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F80);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x80);
	break;
	default:
	error_illegal_ident(); }
}

// ADD A Comma C End | ADD C End
void Parser::parse_main_action_108() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F81);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x81);
	break;
	default:
	error_illegal_ident(); }
}

// ADD A Comma D End | ADD D End
void Parser::parse_main_action_109() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F82);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x82);
	break;
	default:
	error_illegal_ident(); }
}

// ADD A Comma E End | ADD E End
void Parser::parse_main_action_110() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F83);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x83);
	break;
	default:
	error_illegal_ident(); }
}

// ADD A Comma H End | ADD H End
void Parser::parse_main_action_111() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F84);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x84);
	break;
	default:
	error_illegal_ident(); }
}

// ADD A Comma IXH End | ADD IXH End
void Parser::parse_main_action_112() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDD84);
	break;
	default:
	error_illegal_ident(); }
}

// ADD A Comma IXL End | ADD IXL End
void Parser::parse_main_action_113() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDD85);
	break;
	default:
	error_illegal_ident(); }
}

// ADD A Comma IYH End | ADD IYH End
void Parser::parse_main_action_114() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFD84);
	break;
	default:
	error_illegal_ident(); }
}

// ADD A Comma IYL End | ADD IYL End
void Parser::parse_main_action_115() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFD85);
	break;
	default:
	error_illegal_ident(); }
}

// ADD A Comma L End | ADD L End
void Parser::parse_main_action_116() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F85);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x85);
	break;
	default:
	error_illegal_ident(); }
}

// ADD A Comma LParen AHL RParen End | ADD LParen AHL RParen End
void Parser::parse_main_action_117() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0x86);
	break;
	default:
	error_illegal_ident(); }
}

// ADD A Comma LParen AIX RParen End | ADD LParen AIX RParen End
void Parser::parse_main_action_118() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xDD8600);
	break;
	default:
	error_illegal_ident(); }
}

// ADD A Comma LParen AIX expr RParen End | ADD LParen AIX expr RParen End
void Parser::parse_main_action_119() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xDD86);
	break;
	default:
	error_illegal_ident(); }
}

// ADD A Comma LParen AIY RParen End | ADD LParen AIY RParen End
void Parser::parse_main_action_120() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xFD8600);
	break;
	default:
	error_illegal_ident(); }
}

// ADD A Comma LParen AIY expr RParen End | ADD LParen AIY expr RParen End
void Parser::parse_main_action_121() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xFD86);
	break;
	default:
	error_illegal_ident(); }
}

// ADD A Comma LParen HL Minus RParen End | ADD LParen HL Minus RParen End
void Parser::parse_main_action_122() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F86);
	add_opcode(0x2B);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x86);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// ADD A Comma LParen HL Plus RParen End | ADD LParen HL Plus RParen End
void Parser::parse_main_action_123() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F86);
	add_opcode(0x23);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x86);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// ADD A Comma LParen HL RParen End | ADD M End | ADD LParen HL RParen End
void Parser::parse_main_action_124() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F86);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x86);
	break;
	default:
	error_illegal_ident(); }
}

// ADD A Comma LParen IX RParen End | ADD LParen IX RParen End
void Parser::parse_main_action_125() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xDD8600);
	break;
	default:
	error_illegal_ident(); }
}

// ADD A Comma LParen IX expr RParen End | ADD LParen IX expr RParen End
void Parser::parse_main_action_126() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx(0xDD86);
	break;
	default:
	error_illegal_ident(); }
}

// ADD A Comma LParen IY RParen End | ADD LParen IY RParen End
void Parser::parse_main_action_127() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xFD8600);
	break;
	default:
	error_illegal_ident(); }
}

// ADD A Comma LParen IY expr RParen End | ADD LParen IY expr RParen End
void Parser::parse_main_action_128() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx(0xFD86);
	break;
	default:
	error_illegal_ident(); }
}

// ADD A Comma LParen PHL RParen End | ADD LParen PHL RParen End
void Parser::parse_main_action_129() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0x86);
	break;
	default:
	error_illegal_ident(); }
}

// ADD A Comma LParen PIX RParen End | ADD LParen PIX RParen End
void Parser::parse_main_action_130() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xDD8600);
	break;
	default:
	error_illegal_ident(); }
}

// ADD A Comma LParen PIX expr RParen End | ADD LParen PIX expr RParen End
void Parser::parse_main_action_131() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xDD86);
	break;
	default:
	error_illegal_ident(); }
}

// ADD A Comma LParen PIY RParen End | ADD LParen PIY RParen End
void Parser::parse_main_action_132() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xFD8600);
	break;
	default:
	error_illegal_ident(); }
}

// ADD A Comma LParen PIY expr RParen End | ADD LParen PIY expr RParen End
void Parser::parse_main_action_133() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xFD86);
	break;
	default:
	error_illegal_ident(); }
}

// ADD A Comma LParen XHL RParen End | ADD LParen XHL RParen End
void Parser::parse_main_action_134() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0x86);
	break;
	default:
	error_illegal_ident(); }
}

// ADD A Comma LParen XIX RParen End | ADD LParen XIX RParen End
void Parser::parse_main_action_135() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xDD8600);
	break;
	default:
	error_illegal_ident(); }
}

// ADD A Comma LParen XIX expr RParen End | ADD LParen XIX expr RParen End
void Parser::parse_main_action_136() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xDD86);
	break;
	default:
	error_illegal_ident(); }
}

// ADD A Comma LParen XIY RParen End | ADD LParen XIY RParen End
void Parser::parse_main_action_137() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xFD8600);
	break;
	default:
	error_illegal_ident(); }
}

// ADD A Comma LParen XIY expr RParen End | ADD LParen XIY expr RParen End
void Parser::parse_main_action_138() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xFD86);
	break;
	default:
	error_illegal_ident(); }
}

// ADD A Comma LParen YHL RParen End | ADD LParen YHL RParen End
void Parser::parse_main_action_139() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0x86);
	break;
	default:
	error_illegal_ident(); }
}

// ADD A Comma LParen YIX RParen End | ADD LParen YIX RParen End
void Parser::parse_main_action_140() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xDD8600);
	break;
	default:
	error_illegal_ident(); }
}

// ADD A Comma LParen YIX expr RParen End | ADD LParen YIX expr RParen End
void Parser::parse_main_action_141() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xDD86);
	break;
	default:
	error_illegal_ident(); }
}

// ADD A Comma LParen YIY RParen End | ADD LParen YIY RParen End
void Parser::parse_main_action_142() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xFD8600);
	break;
	default:
	error_illegal_ident(); }
}

// ADD A Comma LParen YIY expr RParen End | ADD LParen YIY expr RParen End
void Parser::parse_main_action_143() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xFD86);
	break;
	default:
	error_illegal_ident(); }
}

// ADD A Comma LParen ZHL RParen End | ADD LParen ZHL RParen End
void Parser::parse_main_action_144() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0x86);
	break;
	default:
	error_illegal_ident(); }
}

// ADD A Comma LParen ZIX RParen End | ADD LParen ZIX RParen End
void Parser::parse_main_action_145() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xDD8600);
	break;
	default:
	error_illegal_ident(); }
}

// ADD A Comma LParen ZIX expr RParen End | ADD LParen ZIX expr RParen End
void Parser::parse_main_action_146() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xDD86);
	break;
	default:
	error_illegal_ident(); }
}

// ADD A Comma LParen ZIY RParen End | ADD LParen ZIY RParen End
void Parser::parse_main_action_147() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xFD8600);
	break;
	default:
	error_illegal_ident(); }
}

// ADD A Comma LParen ZIY expr RParen End | ADD LParen ZIY expr RParen End
void Parser::parse_main_action_148() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xFD86);
	break;
	default:
	error_illegal_ident(); }
}

// ADD A Comma expr End | ADD expr End | ADI expr End
void Parser::parse_main_action_149() {
	warn_if_expr_in_parens();
	add_opcode_n(0xC6);
}

// ADD A1 Comma A End | ALTD ADD A Comma A End | ALTD ADD A End
void Parser::parse_main_action_150() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F87);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x87);
	break;
	default:
	error_illegal_ident(); }
}

// ADD A1 Comma B End | ALTD ADD A Comma B End | ALTD ADD B End
void Parser::parse_main_action_151() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F80);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x80);
	break;
	default:
	error_illegal_ident(); }
}

// ADD A1 Comma C End | ALTD ADD A Comma C End | ALTD ADD C End
void Parser::parse_main_action_152() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F81);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x81);
	break;
	default:
	error_illegal_ident(); }
}

// ADD A1 Comma D End | ALTD ADD A Comma D End | ALTD ADD D End
void Parser::parse_main_action_153() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F82);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x82);
	break;
	default:
	error_illegal_ident(); }
}

// ADD A1 Comma E End | ALTD ADD A Comma E End | ALTD ADD E End
void Parser::parse_main_action_154() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F83);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x83);
	break;
	default:
	error_illegal_ident(); }
}

// ADD A1 Comma H End | ALTD ADD A Comma H End | ALTD ADD H End
void Parser::parse_main_action_155() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F84);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x84);
	break;
	default:
	error_illegal_ident(); }
}

// ADD A1 Comma L End | ALTD ADD A Comma L End | ALTD ADD L End
void Parser::parse_main_action_156() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F85);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x85);
	break;
	default:
	error_illegal_ident(); }
}

// ADD A1 Comma LParen HL Minus RParen End | ALTD ADD A Comma LParen HL Minus RParen End | ALTD ADD LParen HL Minus RParen End
void Parser::parse_main_action_157() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F86);
	add_opcode(0x2B);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x86);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// ADD A1 Comma LParen HL Plus RParen End | ALTD ADD A Comma LParen HL Plus RParen End | ALTD ADD LParen HL Plus RParen End
void Parser::parse_main_action_158() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F86);
	add_opcode(0x23);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x86);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// ADD A1 Comma LParen HL RParen End | ALTD ADD A Comma LParen HL RParen End | ALTD ADD LParen HL RParen End
void Parser::parse_main_action_159() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F86);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x86);
	break;
	default:
	error_illegal_ident(); }
}

// ADD A1 Comma LParen IX RParen End | ALTD ADD A Comma LParen IX RParen End | ALTD ADD LParen IX RParen End
void Parser::parse_main_action_160() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDD8600);
	break;
	default:
	error_illegal_ident(); }
}

// ADD A1 Comma LParen IX expr RParen End | ALTD ADD A Comma LParen IX expr RParen End | ALTD ADD LParen IX expr RParen End
void Parser::parse_main_action_161() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0xDD86);
	break;
	default:
	error_illegal_ident(); }
}

// ADD A1 Comma LParen IY RParen End | ALTD ADD A Comma LParen IY RParen End | ALTD ADD LParen IY RParen End
void Parser::parse_main_action_162() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xFD8600);
	break;
	default:
	error_illegal_ident(); }
}

// ADD A1 Comma LParen IY expr RParen End | ALTD ADD A Comma LParen IY expr RParen End | ALTD ADD LParen IY expr RParen End
void Parser::parse_main_action_163() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0xFD86);
	break;
	default:
	error_illegal_ident(); }
}

// ADD A1 Comma expr End | ALTD ADD A Comma expr End | ALTD ADD expr End
void Parser::parse_main_action_164() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	add_opcode_n(0xC6);
	break;
	default:
	error_illegal_ident(); }
}

// ADD AHL Comma BC End
void Parser::parse_main_action_165() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0x09);
	break;
	default:
	error_illegal_ident(); }
}

// ADD AHL Comma DE End
void Parser::parse_main_action_166() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0x19);
	break;
	default:
	error_illegal_ident(); }
}

// ADD AHL Comma HL End
void Parser::parse_main_action_167() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0x29);
	break;
	default:
	error_illegal_ident(); }
}

// ADD AHL Comma SP End
void Parser::parse_main_action_168() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0x39);
	break;
	default:
	error_illegal_ident(); }
}

// ADD AIX Comma BC End
void Parser::parse_main_action_169() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xDD09);
	break;
	default:
	error_illegal_ident(); }
}

// ADD AIX Comma DE End
void Parser::parse_main_action_170() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xDD19);
	break;
	default:
	error_illegal_ident(); }
}

// ADD AIX Comma IX End
void Parser::parse_main_action_171() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xDD29);
	break;
	default:
	error_illegal_ident(); }
}

// ADD AIX Comma SP End
void Parser::parse_main_action_172() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xDD39);
	break;
	default:
	error_illegal_ident(); }
}

// ADD AIY Comma BC End
void Parser::parse_main_action_173() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xFD09);
	break;
	default:
	error_illegal_ident(); }
}

// ADD AIY Comma DE End
void Parser::parse_main_action_174() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xFD19);
	break;
	default:
	error_illegal_ident(); }
}

// ADD AIY Comma IY End
void Parser::parse_main_action_175() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xFD29);
	break;
	default:
	error_illegal_ident(); }
}

// ADD AIY Comma SP End
void Parser::parse_main_action_176() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xFD39);
	break;
	default:
	error_illegal_ident(); }
}

// ADD BC Comma A End
void Parser::parse_main_action_177() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: 
	add_call_function("__z80asm__add_bc_a");
	break;
	case CPU_Z80N: 
	add_opcode(0xED33);
	break;
	default:
	error_illegal_ident(); }
}

// ADD BC Comma expr End
void Parser::parse_main_action_178() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: 
	warn_if_expr_in_parens();
	add_opcode(0xE5);
	add_opcode_nn(0x21, 0);
	add_opcode(0x09);
	add_opcode(0x44);
	add_opcode(0x4D);
	add_opcode(0xE1);
	break;
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0xE5);
	add_opcode_nn(0x21, 0);
	add_opcode(0x09);
	add_opcode(0x7F44);
	add_opcode(0x7F4D);
	add_opcode(0xE1);
	break;
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode(0xE5);
	add_opcode_nnn(0x21, 0);
	add_opcode(0x09);
	add_opcode(0x44);
	add_opcode(0x4D);
	add_opcode(0xE1);
	break;
	case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_opcode_nn(0xED36, 0);
	break;
	default:
	error_illegal_ident(); }
}

// ADD DE Comma A End
void Parser::parse_main_action_179() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: 
	add_call_function("__z80asm__add_de_a");
	break;
	case CPU_Z80N: 
	add_opcode(0xED32);
	break;
	default:
	error_illegal_ident(); }
}

// ADD DE Comma expr End
void Parser::parse_main_action_180() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: 
	warn_if_expr_in_parens();
	add_opcode(0xE5);
	add_opcode_nn(0x21, 0);
	add_opcode(0x19);
	add_opcode(0x54);
	add_opcode(0x5D);
	add_opcode(0xE1);
	break;
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0xE5);
	add_opcode_nn(0x21, 0);
	add_opcode(0x19);
	add_opcode(0x7F54);
	add_opcode(0x7F5D);
	add_opcode(0xE1);
	break;
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode(0xE5);
	add_opcode_nnn(0x21, 0);
	add_opcode(0x19);
	add_opcode(0x54);
	add_opcode(0x5D);
	add_opcode(0xE1);
	break;
	case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_opcode_nn(0xED35, 0);
	break;
	default:
	error_illegal_ident(); }
}

// ADD HL Comma A End
void Parser::parse_main_action_181() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: 
	add_call_function("__z80asm__add_hl_a");
	break;
	case CPU_Z80N: 
	add_opcode(0xED31);
	break;
	default:
	error_illegal_ident(); }
}

// ADD HL Comma BC End | DAD B End | DAD BC End
void Parser::parse_main_action_182() {
	add_opcode(0x09);
}

// ADD HL Comma DE End | DAD D End | DAD DE End
void Parser::parse_main_action_183() {
	add_opcode(0x19);
}

// ADD HL Comma HL End | DAD H End | DAD HL End
void Parser::parse_main_action_184() {
	add_opcode(0x29);
}

// ADD HL Comma JK End
void Parser::parse_main_action_185() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x65);
	break;
	default:
	error_illegal_ident(); }
}

// ADD HL Comma SP End | DAD SP End
void Parser::parse_main_action_186() {
	add_opcode(0x39);
}

// ADD HL Comma expr End
void Parser::parse_main_action_187() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: 
	warn_if_expr_in_parens();
	add_opcode(0xD5);
	add_opcode_nn(0x11, 0);
	add_opcode(0x19);
	add_opcode(0xD1);
	break;
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode(0xD5);
	add_opcode_nnn(0x11, 0);
	add_opcode(0x19);
	add_opcode(0xD1);
	break;
	case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_opcode_nn(0xED34, 0);
	break;
	default:
	error_illegal_ident(); }
}

// ADD HL1 Comma BC End | ALTD ADD HL Comma BC End
void Parser::parse_main_action_188() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x09);
	break;
	default:
	error_illegal_ident(); }
}

// ADD HL1 Comma DE End | ALTD ADD HL Comma DE End
void Parser::parse_main_action_189() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x19);
	break;
	default:
	error_illegal_ident(); }
}

// ADD HL1 Comma HL End | ALTD ADD HL Comma HL End
void Parser::parse_main_action_190() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x29);
	break;
	default:
	error_illegal_ident(); }
}

// ADD HL1 Comma JK End | ALTD ADD HL Comma JK End
void Parser::parse_main_action_191() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x65);
	break;
	default:
	error_illegal_ident(); }
}

// ADD HL1 Comma SP End | ALTD ADD HL Comma SP End
void Parser::parse_main_action_192() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x39);
	break;
	default:
	error_illegal_ident(); }
}

// ADD IX Comma BC End
void Parser::parse_main_action_193() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xDD09);
	break;
	default:
	error_illegal_ident(); }
}

// ADD IX Comma DE End
void Parser::parse_main_action_194() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xDD19);
	break;
	default:
	error_illegal_ident(); }
}

// ADD IX Comma IX End
void Parser::parse_main_action_195() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xDD29);
	break;
	default:
	error_illegal_ident(); }
}

// ADD IX Comma SP End
void Parser::parse_main_action_196() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xDD39);
	break;
	default:
	error_illegal_ident(); }
}

// ADD IY Comma BC End
void Parser::parse_main_action_197() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xFD09);
	break;
	default:
	error_illegal_ident(); }
}

// ADD IY Comma DE End
void Parser::parse_main_action_198() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xFD19);
	break;
	default:
	error_illegal_ident(); }
}

// ADD IY Comma IY End
void Parser::parse_main_action_199() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xFD29);
	break;
	default:
	error_illegal_ident(); }
}

// ADD IY Comma SP End
void Parser::parse_main_action_200() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xFD39);
	break;
	default:
	error_illegal_ident(); }
}

// ADD JKHL Comma BCDE End
void Parser::parse_main_action_201() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xEDC6);
	break;
	default:
	error_illegal_ident(); }
}

// ADD JKHL1 Comma BCDE End | ALTD ADD JKHL Comma BCDE End
void Parser::parse_main_action_202() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xEDC6);
	break;
	default:
	error_illegal_ident(); }
}

// ADD SP Comma expr End
void Parser::parse_main_action_203() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_call_function("__z80asm__add_sp_s");
	add_opcode_defb();
	break;
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode_s(0x27);
	break;
	case CPU_GBZ80: 
	warn_if_expr_in_parens();
	add_opcode_s(0xE8);
	break;
	default:
	error_illegal_ident(); }
}

// ADD XHL Comma BC End
void Parser::parse_main_action_204() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0x09);
	break;
	default:
	error_illegal_ident(); }
}

// ADD XHL Comma DE End
void Parser::parse_main_action_205() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0x19);
	break;
	default:
	error_illegal_ident(); }
}

// ADD XHL Comma HL End
void Parser::parse_main_action_206() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0x29);
	break;
	default:
	error_illegal_ident(); }
}

// ADD XHL Comma SP End
void Parser::parse_main_action_207() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0x39);
	break;
	default:
	error_illegal_ident(); }
}

// ADD XIX Comma BC End
void Parser::parse_main_action_208() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xDD09);
	break;
	default:
	error_illegal_ident(); }
}

// ADD XIX Comma DE End
void Parser::parse_main_action_209() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xDD19);
	break;
	default:
	error_illegal_ident(); }
}

// ADD XIX Comma IX End
void Parser::parse_main_action_210() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xDD29);
	break;
	default:
	error_illegal_ident(); }
}

// ADD XIX Comma SP End
void Parser::parse_main_action_211() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xDD39);
	break;
	default:
	error_illegal_ident(); }
}

// ADD XIY Comma BC End
void Parser::parse_main_action_212() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xFD09);
	break;
	default:
	error_illegal_ident(); }
}

// ADD XIY Comma DE End
void Parser::parse_main_action_213() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xFD19);
	break;
	default:
	error_illegal_ident(); }
}

// ADD XIY Comma IY End
void Parser::parse_main_action_214() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xFD29);
	break;
	default:
	error_illegal_ident(); }
}

// ADD XIY Comma SP End
void Parser::parse_main_action_215() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xFD39);
	break;
	default:
	error_illegal_ident(); }
}

// ADD YHL Comma BC End
void Parser::parse_main_action_216() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0x09);
	break;
	default:
	error_illegal_ident(); }
}

// ADD YHL Comma DE End
void Parser::parse_main_action_217() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0x19);
	break;
	default:
	error_illegal_ident(); }
}

// ADD YHL Comma HL End
void Parser::parse_main_action_218() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0x29);
	break;
	default:
	error_illegal_ident(); }
}

// ADD YHL Comma SP End
void Parser::parse_main_action_219() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0x39);
	break;
	default:
	error_illegal_ident(); }
}

// ADD YIX Comma BC End
void Parser::parse_main_action_220() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xDD09);
	break;
	default:
	error_illegal_ident(); }
}

// ADD YIX Comma DE End
void Parser::parse_main_action_221() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xDD19);
	break;
	default:
	error_illegal_ident(); }
}

// ADD YIX Comma IX End
void Parser::parse_main_action_222() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xDD29);
	break;
	default:
	error_illegal_ident(); }
}

// ADD YIX Comma SP End
void Parser::parse_main_action_223() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xDD39);
	break;
	default:
	error_illegal_ident(); }
}

// ADD YIY Comma BC End
void Parser::parse_main_action_224() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xFD09);
	break;
	default:
	error_illegal_ident(); }
}

// ADD YIY Comma DE End
void Parser::parse_main_action_225() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xFD19);
	break;
	default:
	error_illegal_ident(); }
}

// ADD YIY Comma IY End
void Parser::parse_main_action_226() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xFD29);
	break;
	default:
	error_illegal_ident(); }
}

// ADD YIY Comma SP End
void Parser::parse_main_action_227() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xFD39);
	break;
	default:
	error_illegal_ident(); }
}

// ADD ZHL Comma BC End
void Parser::parse_main_action_228() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0x09);
	break;
	default:
	error_illegal_ident(); }
}

// ADD ZHL Comma DE End
void Parser::parse_main_action_229() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0x19);
	break;
	default:
	error_illegal_ident(); }
}

// ADD ZHL Comma HL End
void Parser::parse_main_action_230() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0x29);
	break;
	default:
	error_illegal_ident(); }
}

// ADD ZHL Comma SP End
void Parser::parse_main_action_231() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0x39);
	break;
	default:
	error_illegal_ident(); }
}

// ADD ZIX Comma BC End
void Parser::parse_main_action_232() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xDD09);
	break;
	default:
	error_illegal_ident(); }
}

// ADD ZIX Comma DE End
void Parser::parse_main_action_233() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xDD19);
	break;
	default:
	error_illegal_ident(); }
}

// ADD ZIX Comma IX End
void Parser::parse_main_action_234() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xDD29);
	break;
	default:
	error_illegal_ident(); }
}

// ADD ZIX Comma SP End
void Parser::parse_main_action_235() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xDD39);
	break;
	default:
	error_illegal_ident(); }
}

// ADD ZIY Comma BC End
void Parser::parse_main_action_236() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xFD09);
	break;
	default:
	error_illegal_ident(); }
}

// ADD ZIY Comma DE End
void Parser::parse_main_action_237() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xFD19);
	break;
	default:
	error_illegal_ident(); }
}

// ADD ZIY Comma IY End
void Parser::parse_main_action_238() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xFD29);
	break;
	default:
	error_illegal_ident(); }
}

// ADD ZIY Comma SP End
void Parser::parse_main_action_239() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xFD39);
	break;
	default:
	error_illegal_ident(); }
}

// ADD Dot L A Comma LParen HL Minus RParen End | ADD Dot L LParen HL Minus RParen End | ADD Dot LIS A Comma LParen HL Minus RParen End | ADD Dot LIS LParen HL Minus RParen End
void Parser::parse_main_action_240() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x86);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// ADD Dot L A Comma LParen HL Plus RParen End | ADD Dot L LParen HL Plus RParen End | ADD Dot LIS A Comma LParen HL Plus RParen End | ADD Dot LIS LParen HL Plus RParen End
void Parser::parse_main_action_241() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x86);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// ADD Dot L A Comma LParen HL RParen End | ADD Dot L LParen HL RParen End | ADD Dot LIS A Comma LParen HL RParen End | ADD Dot LIS LParen HL RParen End
void Parser::parse_main_action_242() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x86);
	break;
	default:
	error_illegal_ident(); }
}

// ADD Dot L A Comma LParen IX RParen End | ADD Dot L LParen IX RParen End | ADD Dot LIS A Comma LParen IX RParen End | ADD Dot LIS LParen IX RParen End
void Parser::parse_main_action_243() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xDD8600);
	break;
	default:
	error_illegal_ident(); }
}

// ADD Dot L A Comma LParen IX expr RParen End | ADD Dot L LParen IX expr RParen End | ADD Dot LIS A Comma LParen IX expr RParen End | ADD Dot LIS LParen IX expr RParen End
void Parser::parse_main_action_244() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xDD86);
	break;
	default:
	error_illegal_ident(); }
}

// ADD Dot L A Comma LParen IY RParen End | ADD Dot L LParen IY RParen End | ADD Dot LIS A Comma LParen IY RParen End | ADD Dot LIS LParen IY RParen End
void Parser::parse_main_action_245() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xFD8600);
	break;
	default:
	error_illegal_ident(); }
}

// ADD Dot L A Comma LParen IY expr RParen End | ADD Dot L LParen IY expr RParen End | ADD Dot LIS A Comma LParen IY expr RParen End | ADD Dot LIS LParen IY expr RParen End
void Parser::parse_main_action_246() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xFD86);
	break;
	default:
	error_illegal_ident(); }
}

// ADD Dot L HL Comma BC End | ADD Dot LIS HL Comma BC End
void Parser::parse_main_action_247() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x09);
	break;
	default:
	error_illegal_ident(); }
}

// ADD Dot L HL Comma DE End | ADD Dot LIS HL Comma DE End
void Parser::parse_main_action_248() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x19);
	break;
	default:
	error_illegal_ident(); }
}

// ADD Dot L HL Comma HL End | ADD Dot LIS HL Comma HL End
void Parser::parse_main_action_249() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x29);
	break;
	default:
	error_illegal_ident(); }
}

// ADD Dot L HL Comma SP End | ADD Dot LIS HL Comma SP End
void Parser::parse_main_action_250() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x39);
	break;
	default:
	error_illegal_ident(); }
}

// ADD Dot L IX Comma BC End | ADD Dot LIS IX Comma BC End
void Parser::parse_main_action_251() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xDD09);
	break;
	default:
	error_illegal_ident(); }
}

// ADD Dot L IX Comma DE End | ADD Dot LIS IX Comma DE End
void Parser::parse_main_action_252() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xDD19);
	break;
	default:
	error_illegal_ident(); }
}

// ADD Dot L IX Comma IX End | ADD Dot LIS IX Comma IX End
void Parser::parse_main_action_253() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xDD29);
	break;
	default:
	error_illegal_ident(); }
}

// ADD Dot L IX Comma SP End | ADD Dot LIS IX Comma SP End
void Parser::parse_main_action_254() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xDD39);
	break;
	default:
	error_illegal_ident(); }
}

// ADD Dot L IY Comma BC End | ADD Dot LIS IY Comma BC End
void Parser::parse_main_action_255() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xFD09);
	break;
	default:
	error_illegal_ident(); }
}

// ADD Dot L IY Comma DE End | ADD Dot LIS IY Comma DE End
void Parser::parse_main_action_256() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xFD19);
	break;
	default:
	error_illegal_ident(); }
}

// ADD Dot L IY Comma IY End | ADD Dot LIS IY Comma IY End
void Parser::parse_main_action_257() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xFD29);
	break;
	default:
	error_illegal_ident(); }
}

// ADD Dot L IY Comma SP End | ADD Dot LIS IY Comma SP End
void Parser::parse_main_action_258() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xFD39);
	break;
	default:
	error_illegal_ident(); }
}

// ADD Dot S A Comma LParen HL Minus RParen End | ADD Dot S LParen HL Minus RParen End | ADD Dot SIL A Comma LParen HL Minus RParen End | ADD Dot SIL LParen HL Minus RParen End
void Parser::parse_main_action_259() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x86);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// ADD Dot S A Comma LParen HL Plus RParen End | ADD Dot S LParen HL Plus RParen End | ADD Dot SIL A Comma LParen HL Plus RParen End | ADD Dot SIL LParen HL Plus RParen End
void Parser::parse_main_action_260() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x86);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// ADD Dot S A Comma LParen HL RParen End | ADD Dot S LParen HL RParen End | ADD Dot SIL A Comma LParen HL RParen End | ADD Dot SIL LParen HL RParen End
void Parser::parse_main_action_261() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x86);
	break;
	default:
	error_illegal_ident(); }
}

// ADD Dot S A Comma LParen IX RParen End | ADD Dot S LParen IX RParen End | ADD Dot SIL A Comma LParen IX RParen End | ADD Dot SIL LParen IX RParen End
void Parser::parse_main_action_262() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xDD8600);
	break;
	default:
	error_illegal_ident(); }
}

// ADD Dot S A Comma LParen IX expr RParen End | ADD Dot S LParen IX expr RParen End | ADD Dot SIL A Comma LParen IX expr RParen End | ADD Dot SIL LParen IX expr RParen End
void Parser::parse_main_action_263() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xDD86);
	break;
	default:
	error_illegal_ident(); }
}

// ADD Dot S A Comma LParen IY RParen End | ADD Dot S LParen IY RParen End | ADD Dot SIL A Comma LParen IY RParen End | ADD Dot SIL LParen IY RParen End
void Parser::parse_main_action_264() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xFD8600);
	break;
	default:
	error_illegal_ident(); }
}

// ADD Dot S A Comma LParen IY expr RParen End | ADD Dot S LParen IY expr RParen End | ADD Dot SIL A Comma LParen IY expr RParen End | ADD Dot SIL LParen IY expr RParen End
void Parser::parse_main_action_265() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xFD86);
	break;
	default:
	error_illegal_ident(); }
}

// ADD Dot S HL Comma BC End | ADD Dot SIL HL Comma BC End
void Parser::parse_main_action_266() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x09);
	break;
	default:
	error_illegal_ident(); }
}

// ADD Dot S HL Comma DE End | ADD Dot SIL HL Comma DE End
void Parser::parse_main_action_267() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x19);
	break;
	default:
	error_illegal_ident(); }
}

// ADD Dot S HL Comma HL End | ADD Dot SIL HL Comma HL End
void Parser::parse_main_action_268() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x29);
	break;
	default:
	error_illegal_ident(); }
}

// ADD Dot S HL Comma SP End | ADD Dot SIL HL Comma SP End
void Parser::parse_main_action_269() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x39);
	break;
	default:
	error_illegal_ident(); }
}

// ADD Dot S IX Comma BC End | ADD Dot SIL IX Comma BC End
void Parser::parse_main_action_270() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xDD09);
	break;
	default:
	error_illegal_ident(); }
}

// ADD Dot S IX Comma DE End | ADD Dot SIL IX Comma DE End
void Parser::parse_main_action_271() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xDD19);
	break;
	default:
	error_illegal_ident(); }
}

// ADD Dot S IX Comma IX End | ADD Dot SIL IX Comma IX End
void Parser::parse_main_action_272() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xDD29);
	break;
	default:
	error_illegal_ident(); }
}

// ADD Dot S IX Comma SP End | ADD Dot SIL IX Comma SP End
void Parser::parse_main_action_273() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xDD39);
	break;
	default:
	error_illegal_ident(); }
}

// ADD Dot S IY Comma BC End | ADD Dot SIL IY Comma BC End
void Parser::parse_main_action_274() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xFD09);
	break;
	default:
	error_illegal_ident(); }
}

// ADD Dot S IY Comma DE End | ADD Dot SIL IY Comma DE End
void Parser::parse_main_action_275() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xFD19);
	break;
	default:
	error_illegal_ident(); }
}

// ADD Dot S IY Comma IY End | ADD Dot SIL IY Comma IY End
void Parser::parse_main_action_276() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xFD29);
	break;
	default:
	error_illegal_ident(); }
}

// ADD Dot S IY Comma SP End | ADD Dot SIL IY Comma SP End
void Parser::parse_main_action_277() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xFD39);
	break;
	default:
	error_illegal_ident(); }
}

// ADI HL Comma expr End | LDHI expr End
void Parser::parse_main_action_278() {
	switch (g_args.cpu()) {
	case CPU_8085: 
	warn_if_expr_in_parens();
	add_opcode_n(0x28);
	break;
	default:
	error_illegal_ident(); }
}

// ADI SP Comma expr End | LDSI expr End
void Parser::parse_main_action_279() {
	switch (g_args.cpu()) {
	case CPU_8085: 
	warn_if_expr_in_parens();
	add_opcode_n(0x38);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD ADD IX Comma BC End
void Parser::parse_main_action_280() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDD09);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD ADD IX Comma DE End
void Parser::parse_main_action_281() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDD19);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD ADD IX Comma SP End
void Parser::parse_main_action_282() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDD39);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD ADD IY Comma BC End
void Parser::parse_main_action_283() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xFD09);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD ADD IY Comma DE End
void Parser::parse_main_action_284() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xFD19);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD ADD IY Comma SP End
void Parser::parse_main_action_285() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xFD39);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD ADD SP Comma expr End
void Parser::parse_main_action_286() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	add_opcode_s(0x27);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD AND A Comma A End | ALTD AND A End | AND A1 Comma A End
void Parser::parse_main_action_287() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7FA7);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xA7);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD AND A Comma B End | ALTD AND B End | AND A1 Comma B End
void Parser::parse_main_action_288() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7FA0);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xA0);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD AND A Comma C End | ALTD AND C End | AND A1 Comma C End
void Parser::parse_main_action_289() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7FA1);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xA1);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD AND A Comma D End | ALTD AND D End | AND A1 Comma D End
void Parser::parse_main_action_290() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7FA2);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xA2);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD AND A Comma E End | ALTD AND E End | AND A1 Comma E End
void Parser::parse_main_action_291() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7FA3);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xA3);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD AND A Comma H End | ALTD AND H End | AND A1 Comma H End
void Parser::parse_main_action_292() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7FA4);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xA4);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD AND A Comma L End | ALTD AND L End | AND A1 Comma L End
void Parser::parse_main_action_293() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7FA5);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xA5);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD AND A Comma LParen HL Minus RParen End | ALTD AND LParen HL Minus RParen End | AND A1 Comma LParen HL Minus RParen End
void Parser::parse_main_action_294() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7FA6);
	add_opcode(0x2B);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xA6);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD AND A Comma LParen HL Plus RParen End | ALTD AND LParen HL Plus RParen End | AND A1 Comma LParen HL Plus RParen End
void Parser::parse_main_action_295() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7FA6);
	add_opcode(0x23);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xA6);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD AND A Comma LParen HL RParen End | ALTD AND LParen HL RParen End | AND A1 Comma LParen HL RParen End
void Parser::parse_main_action_296() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7FA6);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xA6);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD AND A Comma LParen IX RParen End | ALTD AND LParen IX RParen End | AND A1 Comma LParen IX RParen End
void Parser::parse_main_action_297() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDDA600);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD AND A Comma LParen IX expr RParen End | ALTD AND LParen IX expr RParen End | AND A1 Comma LParen IX expr RParen End
void Parser::parse_main_action_298() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0xDDA6);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD AND A Comma LParen IY RParen End | ALTD AND LParen IY RParen End | AND A1 Comma LParen IY RParen End
void Parser::parse_main_action_299() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xFDA600);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD AND A Comma LParen IY expr RParen End | ALTD AND LParen IY expr RParen End | AND A1 Comma LParen IY expr RParen End
void Parser::parse_main_action_300() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0xFDA6);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD AND A Comma expr End | ALTD AND expr End | AND A1 Comma expr End
void Parser::parse_main_action_301() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	add_opcode_n(0xE6);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD AND HL Comma DE End | AND HL1 Comma DE End
void Parser::parse_main_action_302() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDC);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD AND IX Comma DE End
void Parser::parse_main_action_303() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDDDC);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD AND IY Comma DE End
void Parser::parse_main_action_304() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xFDDC);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD AND JKHL Comma BCDE End | AND JKHL1 Comma BCDE End
void Parser::parse_main_action_305() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xEDE6);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD BIT const_expr Comma A End
void Parser::parse_main_action_306() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCB47+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// ALTD BIT const_expr Comma B End
void Parser::parse_main_action_307() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCB40+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// ALTD BIT const_expr Comma C End
void Parser::parse_main_action_308() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCB41+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// ALTD BIT const_expr Comma D End
void Parser::parse_main_action_309() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCB42+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// ALTD BIT const_expr Comma E End
void Parser::parse_main_action_310() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCB43+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// ALTD BIT const_expr Comma H End
void Parser::parse_main_action_311() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCB44+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// ALTD BIT const_expr Comma L End
void Parser::parse_main_action_312() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCB45+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// ALTD BIT const_expr Comma LParen HL RParen End
void Parser::parse_main_action_313() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCB46+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// ALTD BIT const_expr Comma LParen IX RParen End
void Parser::parse_main_action_314() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xDDCB0046+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// ALTD BIT const_expr Comma LParen IX expr RParen End
void Parser::parse_main_action_315() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xDDCB46+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// ALTD BIT const_expr Comma LParen IY RParen End
void Parser::parse_main_action_316() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xFDCB0046+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// ALTD BIT const_expr Comma LParen IY expr RParen End
void Parser::parse_main_action_317() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xFDCB46+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// ALTD BOOL HL End | BOOL HL1 End
void Parser::parse_main_action_318() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xCC);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD CCF End | CCF1 End
void Parser::parse_main_action_319() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x3F);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD CLR A End | CLR A1 End
void Parser::parse_main_action_320() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x3E00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD CLR B End | CLR B1 End
void Parser::parse_main_action_321() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x0600);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD CLR BC End | CLR BC1 End
void Parser::parse_main_action_322() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x010000);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD CLR C End | CLR C1 End
void Parser::parse_main_action_323() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x0E00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD CLR D End | CLR D1 End
void Parser::parse_main_action_324() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x1600);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD CLR DE End | CLR DE1 End
void Parser::parse_main_action_325() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x110000);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD CLR E End | CLR E1 End
void Parser::parse_main_action_326() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x1E00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD CLR H End | CLR H1 End
void Parser::parse_main_action_327() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x2600);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD CLR HL End | CLR HL1 End
void Parser::parse_main_action_328() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x210000);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xBF);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD CLR L End | CLR L1 End
void Parser::parse_main_action_329() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x2E00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD CMP A Comma A End | ALTD CMP A End | ALTD CP A Comma A End | ALTD CP A End
void Parser::parse_main_action_330() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7FBF);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xBF);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD CMP A Comma B End | ALTD CMP B End | ALTD CP A Comma B End | ALTD CP B End
void Parser::parse_main_action_331() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7FB8);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xB8);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD CMP A Comma C End | ALTD CMP C End | ALTD CP A Comma C End | ALTD CP C End
void Parser::parse_main_action_332() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7FB9);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xB9);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD CMP A Comma D End | ALTD CMP D End | ALTD CP A Comma D End | ALTD CP D End
void Parser::parse_main_action_333() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7FBA);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xBA);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD CMP A Comma E End | ALTD CMP E End | ALTD CP A Comma E End | ALTD CP E End
void Parser::parse_main_action_334() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7FBB);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xBB);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD CMP A Comma H End | ALTD CMP H End | ALTD CP A Comma H End | ALTD CP H End
void Parser::parse_main_action_335() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7FBC);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xBC);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD CMP A Comma L End | ALTD CMP L End | ALTD CP A Comma L End | ALTD CP L End
void Parser::parse_main_action_336() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7FBD);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xBD);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD CMP A Comma LParen HL Minus RParen End | ALTD CMP LParen HL Minus RParen End | ALTD CP A Comma LParen HL Minus RParen End | ALTD CP LParen HL Minus RParen End
void Parser::parse_main_action_337() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7FBE);
	add_opcode(0x2B);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xBE);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD CMP A Comma LParen HL Plus RParen End | ALTD CMP LParen HL Plus RParen End | ALTD CP A Comma LParen HL Plus RParen End | ALTD CP LParen HL Plus RParen End
void Parser::parse_main_action_338() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7FBE);
	add_opcode(0x23);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xBE);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD CMP A Comma LParen HL RParen End | ALTD CMP LParen HL RParen End | ALTD CP A Comma LParen HL RParen End | ALTD CP LParen HL RParen End
void Parser::parse_main_action_339() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7FBE);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xBE);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD CMP A Comma LParen IX RParen End | ALTD CMP LParen IX RParen End | ALTD CP A Comma LParen IX RParen End | ALTD CP LParen IX RParen End
void Parser::parse_main_action_340() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDDBE00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD CMP A Comma LParen IX expr RParen End | ALTD CMP LParen IX expr RParen End | ALTD CP A Comma LParen IX expr RParen End | ALTD CP LParen IX expr RParen End
void Parser::parse_main_action_341() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0xDDBE);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD CMP A Comma LParen IY RParen End | ALTD CMP LParen IY RParen End | ALTD CP A Comma LParen IY RParen End | ALTD CP LParen IY RParen End
void Parser::parse_main_action_342() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xFDBE00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD CMP A Comma LParen IY expr RParen End | ALTD CMP LParen IY expr RParen End | ALTD CP A Comma LParen IY expr RParen End | ALTD CP LParen IY expr RParen End
void Parser::parse_main_action_343() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0xFDBE);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD CMP A Comma expr End | ALTD CMP expr End | ALTD CP A Comma expr End | ALTD CP expr End
void Parser::parse_main_action_344() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	add_opcode_n(0xFE);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD CMP HL Comma DE End | ALTD CP HL Comma DE End
void Parser::parse_main_action_345() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xED48);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD CMP HL Comma expr End | ALTD CP HL Comma expr End
void Parser::parse_main_action_346() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	add_opcode_s(0x48);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD CMP JKHL Comma BCDE End | ALTD CP JKHL Comma BCDE End
void Parser::parse_main_action_347() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xED58);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD CPL A End | ALTD CPL End | CPL A1 End
void Parser::parse_main_action_348() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x2F);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD DEC A End | DEC A1 End
void Parser::parse_main_action_349() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x3D);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD DEC B End | DEC B1 End
void Parser::parse_main_action_350() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x05);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD DEC BC End | DEC BC1 End
void Parser::parse_main_action_351() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x0B);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD DEC C End | DEC C1 End
void Parser::parse_main_action_352() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x0D);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD DEC D End | DEC D1 End
void Parser::parse_main_action_353() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x15);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD DEC DE End | DEC DE1 End
void Parser::parse_main_action_354() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x1B);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD DEC E End | DEC E1 End
void Parser::parse_main_action_355() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x1D);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD DEC H End | DEC H1 End
void Parser::parse_main_action_356() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x25);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD DEC HL End | DEC HL1 End
void Parser::parse_main_action_357() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD DEC L End | DEC L1 End
void Parser::parse_main_action_358() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x2D);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD DEC LParen HL Minus RParen End
void Parser::parse_main_action_359() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x35);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD DEC LParen HL Plus RParen End
void Parser::parse_main_action_360() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x35);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD DEC LParen HL RParen End
void Parser::parse_main_action_361() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x35);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD DEC LParen IX RParen End
void Parser::parse_main_action_362() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDD3500);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD DEC LParen IX expr RParen End
void Parser::parse_main_action_363() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0xDD35);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD DEC LParen IY RParen End
void Parser::parse_main_action_364() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xFD3500);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD DEC LParen IY expr RParen End
void Parser::parse_main_action_365() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0xFD35);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD DJNZ B Comma expr End | ALTD DJNZ expr End | DJNZ B1 Comma expr End
void Parser::parse_main_action_366() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_jump_relative(0x7610);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD DWJNZ BC Comma expr End | ALTD DWJNZ expr End | DWJNZ BC1 Comma expr End
void Parser::parse_main_action_367() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_jump_relative(0x76ED10);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD EX BC Comma HL End | EX BC Comma HL1 End | EX HL1 Comma BC End
void Parser::parse_main_action_368() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xB3);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD EX BC1 Comma HL End | EX BC1 Comma HL1 End | EX HL1 Comma BC1 End
void Parser::parse_main_action_369() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xED74);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD EX DE Comma HL End | EX DE Comma HL1 End | EX HL1 Comma DE End
void Parser::parse_main_action_370() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xEB);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD EX DE1 Comma HL End | EX DE1 Comma HL1 End | EX HL1 Comma DE1 End
void Parser::parse_main_action_371() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xE3);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD EX JK Comma HL End | EX HL1 Comma JK End | EX JK Comma HL1 End
void Parser::parse_main_action_372() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xB9);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD EX JK1 Comma HL End | EX HL1 Comma JK1 End | EX JK1 Comma HL1 End
void Parser::parse_main_action_373() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xED7C);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD EX LParen SP RParen Comma HL End | EX LParen SP RParen Comma HL1 End
void Parser::parse_main_action_374() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xED54);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD INC A End | INC A1 End
void Parser::parse_main_action_375() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x3C);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD INC B End | INC B1 End
void Parser::parse_main_action_376() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x04);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD INC BC End | INC BC1 End
void Parser::parse_main_action_377() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x03);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD INC C End | INC C1 End
void Parser::parse_main_action_378() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x0C);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD INC D End | INC D1 End
void Parser::parse_main_action_379() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x14);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD INC DE End | INC DE1 End
void Parser::parse_main_action_380() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x13);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD INC E End | INC E1 End
void Parser::parse_main_action_381() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x1C);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD INC H End | INC H1 End
void Parser::parse_main_action_382() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x24);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD INC HL End | INC HL1 End
void Parser::parse_main_action_383() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD INC L End | INC L1 End
void Parser::parse_main_action_384() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x2C);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD INC LParen HL Minus RParen End
void Parser::parse_main_action_385() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x34);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD INC LParen HL Plus RParen End
void Parser::parse_main_action_386() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x34);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD INC LParen HL RParen End
void Parser::parse_main_action_387() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x34);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD INC LParen IX RParen End
void Parser::parse_main_action_388() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDD3400);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD INC LParen IX expr RParen End
void Parser::parse_main_action_389() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0xDD34);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD INC LParen IY RParen End
void Parser::parse_main_action_390() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xFD3400);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD INC LParen IY expr RParen End
void Parser::parse_main_action_391() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0xFD34);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE ADC A Comma LParen HL Minus RParen End | ALTD IOE ADC LParen HL Minus RParen End
void Parser::parse_main_action_392() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0x7F8E);
	add_opcode(0x2B);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0x8E);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE ADC A Comma LParen HL Plus RParen End | ALTD IOE ADC LParen HL Plus RParen End
void Parser::parse_main_action_393() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0x7F8E);
	add_opcode(0x23);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0x8E);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE ADC A Comma LParen HL RParen End | ALTD IOE ADC LParen HL RParen End
void Parser::parse_main_action_394() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0x7F8E);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0x8E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE ADC A Comma LParen IX RParen End | ALTD IOE ADC LParen IX RParen End
void Parser::parse_main_action_395() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xDD8E00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE ADC A Comma LParen IX expr RParen End | ALTD IOE ADC LParen IX expr RParen End
void Parser::parse_main_action_396() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode_idx(0xDD8E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE ADC A Comma LParen IY RParen End | ALTD IOE ADC LParen IY RParen End
void Parser::parse_main_action_397() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xFD8E00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE ADC A Comma LParen IY expr RParen End | ALTD IOE ADC LParen IY expr RParen End
void Parser::parse_main_action_398() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode_idx(0xFD8E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE ADD A Comma LParen HL Minus RParen End | ALTD IOE ADD LParen HL Minus RParen End
void Parser::parse_main_action_399() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0x7F86);
	add_opcode(0x2B);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0x86);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE ADD A Comma LParen HL Plus RParen End | ALTD IOE ADD LParen HL Plus RParen End
void Parser::parse_main_action_400() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0x7F86);
	add_opcode(0x23);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0x86);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE ADD A Comma LParen HL RParen End | ALTD IOE ADD LParen HL RParen End
void Parser::parse_main_action_401() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0x7F86);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0x86);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE ADD A Comma LParen IX RParen End | ALTD IOE ADD LParen IX RParen End
void Parser::parse_main_action_402() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xDD8600);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE ADD A Comma LParen IX expr RParen End | ALTD IOE ADD LParen IX expr RParen End
void Parser::parse_main_action_403() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode_idx(0xDD86);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE ADD A Comma LParen IY RParen End | ALTD IOE ADD LParen IY RParen End
void Parser::parse_main_action_404() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xFD8600);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE ADD A Comma LParen IY expr RParen End | ALTD IOE ADD LParen IY expr RParen End
void Parser::parse_main_action_405() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode_idx(0xFD86);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE AND A Comma LParen HL Minus RParen End | ALTD IOE AND LParen HL Minus RParen End
void Parser::parse_main_action_406() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0x7FA6);
	add_opcode(0x2B);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xA6);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE AND A Comma LParen HL Plus RParen End | ALTD IOE AND LParen HL Plus RParen End
void Parser::parse_main_action_407() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0x7FA6);
	add_opcode(0x23);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xA6);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE AND A Comma LParen HL RParen End | ALTD IOE AND LParen HL RParen End
void Parser::parse_main_action_408() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0x7FA6);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xA6);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE AND A Comma LParen IX RParen End | ALTD IOE AND LParen IX RParen End
void Parser::parse_main_action_409() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xDDA600);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE AND A Comma LParen IX expr RParen End | ALTD IOE AND LParen IX expr RParen End
void Parser::parse_main_action_410() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode_idx(0xDDA6);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE AND A Comma LParen IY RParen End | ALTD IOE AND LParen IY RParen End
void Parser::parse_main_action_411() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xFDA600);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE AND A Comma LParen IY expr RParen End | ALTD IOE AND LParen IY expr RParen End
void Parser::parse_main_action_412() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode_idx(0xFDA6);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE BIT const_expr Comma LParen HL RParen End
void Parser::parse_main_action_413() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	add_opcode(0xDB);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCB46+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE BIT const_expr Comma LParen IX RParen End
void Parser::parse_main_action_414() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	add_opcode(0xDB);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xDDCB0046+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE BIT const_expr Comma LParen IX expr RParen End
void Parser::parse_main_action_415() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	add_opcode(0xDB);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xDDCB46+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE BIT const_expr Comma LParen IY RParen End
void Parser::parse_main_action_416() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	add_opcode(0xDB);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xFDCB0046+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE BIT const_expr Comma LParen IY expr RParen End
void Parser::parse_main_action_417() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	add_opcode(0xDB);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xFDCB46+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE CMP A Comma LParen HL Minus RParen End | ALTD IOE CMP LParen HL Minus RParen End | ALTD IOE CP A Comma LParen HL Minus RParen End | ALTD IOE CP LParen HL Minus RParen End
void Parser::parse_main_action_418() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0x7FBE);
	add_opcode(0x2B);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xBE);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE CMP A Comma LParen HL Plus RParen End | ALTD IOE CMP LParen HL Plus RParen End | ALTD IOE CP A Comma LParen HL Plus RParen End | ALTD IOE CP LParen HL Plus RParen End
void Parser::parse_main_action_419() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0x7FBE);
	add_opcode(0x23);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xBE);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE CMP A Comma LParen HL RParen End | ALTD IOE CMP LParen HL RParen End | ALTD IOE CP A Comma LParen HL RParen End | ALTD IOE CP LParen HL RParen End
void Parser::parse_main_action_420() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0x7FBE);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xBE);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE CMP A Comma LParen IX RParen End | ALTD IOE CMP LParen IX RParen End | ALTD IOE CP A Comma LParen IX RParen End | ALTD IOE CP LParen IX RParen End
void Parser::parse_main_action_421() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xDDBE00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE CMP A Comma LParen IX expr RParen End | ALTD IOE CMP LParen IX expr RParen End | ALTD IOE CP A Comma LParen IX expr RParen End | ALTD IOE CP LParen IX expr RParen End
void Parser::parse_main_action_422() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode_idx(0xDDBE);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE CMP A Comma LParen IY RParen End | ALTD IOE CMP LParen IY RParen End | ALTD IOE CP A Comma LParen IY RParen End | ALTD IOE CP LParen IY RParen End
void Parser::parse_main_action_423() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xFDBE00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE CMP A Comma LParen IY expr RParen End | ALTD IOE CMP LParen IY expr RParen End | ALTD IOE CP A Comma LParen IY expr RParen End | ALTD IOE CP LParen IY expr RParen End
void Parser::parse_main_action_424() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode_idx(0xFDBE);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE DEC LParen HL Minus RParen End
void Parser::parse_main_action_425() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0x35);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE DEC LParen HL Plus RParen End
void Parser::parse_main_action_426() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0x35);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE DEC LParen HL RParen End
void Parser::parse_main_action_427() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0x35);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE DEC LParen IX RParen End
void Parser::parse_main_action_428() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xDD3500);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE DEC LParen IX expr RParen End
void Parser::parse_main_action_429() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode_idx(0xDD35);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE DEC LParen IY RParen End
void Parser::parse_main_action_430() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xFD3500);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE DEC LParen IY expr RParen End
void Parser::parse_main_action_431() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode_idx(0xFD35);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE INC LParen HL Minus RParen End
void Parser::parse_main_action_432() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0x34);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE INC LParen HL Plus RParen End
void Parser::parse_main_action_433() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0x34);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE INC LParen HL RParen End
void Parser::parse_main_action_434() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0x34);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE INC LParen IX RParen End
void Parser::parse_main_action_435() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xDD3400);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE INC LParen IX expr RParen End
void Parser::parse_main_action_436() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode_idx(0xDD34);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE INC LParen IY RParen End
void Parser::parse_main_action_437() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xFD3400);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE INC LParen IY expr RParen End
void Parser::parse_main_action_438() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode_idx(0xFD34);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD A Comma LParen BC Minus RParen End
void Parser::parse_main_action_439() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0x0A);
	add_opcode(0x0B);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD A Comma LParen BC Plus RParen End
void Parser::parse_main_action_440() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0x0A);
	add_opcode(0x03);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD A Comma LParen BC RParen End
void Parser::parse_main_action_441() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0x0A);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD A Comma LParen DE Minus RParen End
void Parser::parse_main_action_442() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0x1A);
	add_opcode(0x1B);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD A Comma LParen DE Plus RParen End
void Parser::parse_main_action_443() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0x1A);
	add_opcode(0x13);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD A Comma LParen DE RParen End
void Parser::parse_main_action_444() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0x1A);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD A Comma LParen HL Minus RParen End | ALTD IOE LD A Comma LParen HLD RParen End
void Parser::parse_main_action_445() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0x7E);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD A Comma LParen HL Plus RParen End | ALTD IOE LD A Comma LParen HLI RParen End
void Parser::parse_main_action_446() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0x7E);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD A Comma LParen HL RParen End
void Parser::parse_main_action_447() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0x7E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD A Comma LParen IX Plus A RParen End
void Parser::parse_main_action_448() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xDD06);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD A Comma LParen IX RParen End
void Parser::parse_main_action_449() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xDD7E00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD A Comma LParen IX expr RParen End
void Parser::parse_main_action_450() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode_idx(0xDD7E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD A Comma LParen IY Plus A RParen End
void Parser::parse_main_action_451() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xFD06);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD A Comma LParen IY RParen End
void Parser::parse_main_action_452() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xFD7E00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD A Comma LParen IY expr RParen End
void Parser::parse_main_action_453() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode_idx(0xFD7E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD A Comma expr End
void Parser::parse_main_action_454() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode_nn(0x3A, 0);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD B Comma LParen HL Minus RParen End | ALTD IOE LD B Comma LParen HLD RParen End
void Parser::parse_main_action_455() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0x46);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD B Comma LParen HL Plus RParen End | ALTD IOE LD B Comma LParen HLI RParen End
void Parser::parse_main_action_456() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0x46);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD B Comma LParen HL RParen End
void Parser::parse_main_action_457() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0x46);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD B Comma LParen IX RParen End
void Parser::parse_main_action_458() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xDD4600);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD B Comma LParen IX expr RParen End
void Parser::parse_main_action_459() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode_idx(0xDD46);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD B Comma LParen IY RParen End
void Parser::parse_main_action_460() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xFD4600);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD B Comma LParen IY expr RParen End
void Parser::parse_main_action_461() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode_idx(0xFD46);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD BC Comma expr End
void Parser::parse_main_action_462() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode_nn(0xED4B, 0);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD BCDE Comma LParen HL RParen End
void Parser::parse_main_action_463() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xDD1A);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD BCDE Comma LParen IX RParen End
void Parser::parse_main_action_464() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xDDCE00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD BCDE Comma LParen IX expr RParen End
void Parser::parse_main_action_465() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode_idx(0xDDCE);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD BCDE Comma LParen IY RParen End
void Parser::parse_main_action_466() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xDDDE00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD BCDE Comma LParen IY expr RParen End
void Parser::parse_main_action_467() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode_idx(0xDDDE);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD BCDE Comma expr End
void Parser::parse_main_action_468() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode_nn(0x93, 0);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD C Comma LParen HL Minus RParen End | ALTD IOE LD C Comma LParen HLD RParen End
void Parser::parse_main_action_469() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0x4E);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD C Comma LParen HL Plus RParen End | ALTD IOE LD C Comma LParen HLI RParen End
void Parser::parse_main_action_470() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0x4E);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD C Comma LParen HL RParen End
void Parser::parse_main_action_471() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0x4E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD C Comma LParen IX RParen End
void Parser::parse_main_action_472() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xDD4E00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD C Comma LParen IX expr RParen End
void Parser::parse_main_action_473() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode_idx(0xDD4E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD C Comma LParen IY RParen End
void Parser::parse_main_action_474() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xFD4E00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD C Comma LParen IY expr RParen End
void Parser::parse_main_action_475() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode_idx(0xFD4E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD D Comma LParen HL Minus RParen End | ALTD IOE LD D Comma LParen HLD RParen End
void Parser::parse_main_action_476() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0x56);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD D Comma LParen HL Plus RParen End | ALTD IOE LD D Comma LParen HLI RParen End
void Parser::parse_main_action_477() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0x56);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD D Comma LParen HL RParen End
void Parser::parse_main_action_478() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0x56);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD D Comma LParen IX RParen End
void Parser::parse_main_action_479() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xDD5600);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD D Comma LParen IX expr RParen End
void Parser::parse_main_action_480() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode_idx(0xDD56);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD D Comma LParen IY RParen End
void Parser::parse_main_action_481() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xFD5600);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD D Comma LParen IY expr RParen End
void Parser::parse_main_action_482() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode_idx(0xFD56);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD DE Comma expr End
void Parser::parse_main_action_483() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode_nn(0xED5B, 0);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD E Comma LParen HL Minus RParen End | ALTD IOE LD E Comma LParen HLD RParen End
void Parser::parse_main_action_484() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0x5E);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD E Comma LParen HL Plus RParen End | ALTD IOE LD E Comma LParen HLI RParen End
void Parser::parse_main_action_485() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0x5E);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD E Comma LParen HL RParen End
void Parser::parse_main_action_486() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0x5E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD E Comma LParen IX RParen End
void Parser::parse_main_action_487() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xDD5E00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD E Comma LParen IX expr RParen End
void Parser::parse_main_action_488() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode_idx(0xDD5E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD E Comma LParen IY RParen End
void Parser::parse_main_action_489() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xFD5E00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD E Comma LParen IY expr RParen End
void Parser::parse_main_action_490() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode_idx(0xFD5E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD H Comma LParen HL Minus RParen End | ALTD IOE LD H Comma LParen HLD RParen End
void Parser::parse_main_action_491() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0x66);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD H Comma LParen HL Plus RParen End | ALTD IOE LD H Comma LParen HLI RParen End
void Parser::parse_main_action_492() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0x66);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD H Comma LParen HL RParen End
void Parser::parse_main_action_493() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0x66);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD H Comma LParen IX RParen End
void Parser::parse_main_action_494() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xDD6600);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD H Comma LParen IX expr RParen End
void Parser::parse_main_action_495() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode_idx(0xDD66);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD H Comma LParen IY RParen End
void Parser::parse_main_action_496() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xFD6600);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD H Comma LParen IY expr RParen End
void Parser::parse_main_action_497() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode_idx(0xFD66);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD HL Comma LParen HL RParen End
void Parser::parse_main_action_498() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xDDE400);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD HL Comma LParen HL expr RParen End
void Parser::parse_main_action_499() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode_idx(0xDDE4);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD HL Comma LParen IX RParen End
void Parser::parse_main_action_500() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xE400);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD HL Comma LParen IX expr RParen End
void Parser::parse_main_action_501() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode_idx(0xE4);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD HL Comma LParen IY RParen End
void Parser::parse_main_action_502() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xFDE400);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD HL Comma LParen IY expr RParen End
void Parser::parse_main_action_503() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode_idx(0xFDE4);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD HL Comma expr End
void Parser::parse_main_action_504() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode_nn(0x2A, 0);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD JK Comma expr End
void Parser::parse_main_action_505() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode_nn(0x99, 0);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD JKHL Comma LParen HL RParen End
void Parser::parse_main_action_506() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xFD1A);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD JKHL Comma LParen IX RParen End
void Parser::parse_main_action_507() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xFDCE00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD JKHL Comma LParen IX expr RParen End
void Parser::parse_main_action_508() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode_idx(0xFDCE);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD JKHL Comma LParen IY RParen End
void Parser::parse_main_action_509() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xFDDE00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD JKHL Comma LParen IY expr RParen End
void Parser::parse_main_action_510() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode_idx(0xFDDE);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD JKHL Comma expr End
void Parser::parse_main_action_511() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode_nn(0x94, 0);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD L Comma LParen HL Minus RParen End | ALTD IOE LD L Comma LParen HLD RParen End
void Parser::parse_main_action_512() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0x6E);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD L Comma LParen HL Plus RParen End | ALTD IOE LD L Comma LParen HLI RParen End
void Parser::parse_main_action_513() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0x6E);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD L Comma LParen HL RParen End
void Parser::parse_main_action_514() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0x6E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD L Comma LParen IX RParen End
void Parser::parse_main_action_515() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xDD6E00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD L Comma LParen IX expr RParen End
void Parser::parse_main_action_516() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode_idx(0xDD6E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD L Comma LParen IY RParen End
void Parser::parse_main_action_517() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xFD6E00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE LD L Comma LParen IY expr RParen End
void Parser::parse_main_action_518() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode_idx(0xFD6E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE OR A Comma LParen HL Minus RParen End | ALTD IOE OR LParen HL Minus RParen End
void Parser::parse_main_action_519() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0x7FB6);
	add_opcode(0x2B);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xB6);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE OR A Comma LParen HL Plus RParen End | ALTD IOE OR LParen HL Plus RParen End
void Parser::parse_main_action_520() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0x7FB6);
	add_opcode(0x23);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xB6);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE OR A Comma LParen HL RParen End | ALTD IOE OR LParen HL RParen End
void Parser::parse_main_action_521() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0x7FB6);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xB6);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE OR A Comma LParen IX RParen End | ALTD IOE OR LParen IX RParen End
void Parser::parse_main_action_522() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xDDB600);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE OR A Comma LParen IX expr RParen End | ALTD IOE OR LParen IX expr RParen End
void Parser::parse_main_action_523() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode_idx(0xDDB6);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE OR A Comma LParen IY RParen End | ALTD IOE OR LParen IY RParen End
void Parser::parse_main_action_524() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xFDB600);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE OR A Comma LParen IY expr RParen End | ALTD IOE OR LParen IY expr RParen End
void Parser::parse_main_action_525() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode_idx(0xFDB6);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE RL LParen HL RParen End
void Parser::parse_main_action_526() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xCB16);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE RL LParen IX RParen End
void Parser::parse_main_action_527() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xDDCB0016);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE RL LParen IX expr RParen End
void Parser::parse_main_action_528() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode_idx(0xDDCB16);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE RL LParen IY RParen End
void Parser::parse_main_action_529() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xFDCB0016);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE RL LParen IY expr RParen End
void Parser::parse_main_action_530() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode_idx(0xFDCB16);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE RLC LParen HL RParen End
void Parser::parse_main_action_531() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xCB06);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE RLC LParen IX RParen End
void Parser::parse_main_action_532() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xDDCB0006);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE RLC LParen IX expr RParen End
void Parser::parse_main_action_533() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode_idx(0xDDCB06);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE RLC LParen IY RParen End
void Parser::parse_main_action_534() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xFDCB0006);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE RLC LParen IY expr RParen End
void Parser::parse_main_action_535() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode_idx(0xFDCB06);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE RR LParen HL RParen End
void Parser::parse_main_action_536() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xCB1E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE RR LParen IX RParen End
void Parser::parse_main_action_537() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xDDCB001E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE RR LParen IX expr RParen End
void Parser::parse_main_action_538() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode_idx(0xDDCB1E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE RR LParen IY RParen End
void Parser::parse_main_action_539() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xFDCB001E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE RR LParen IY expr RParen End
void Parser::parse_main_action_540() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode_idx(0xFDCB1E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE RRC LParen HL RParen End
void Parser::parse_main_action_541() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xCB0E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE RRC LParen IX RParen End
void Parser::parse_main_action_542() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xDDCB000E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE RRC LParen IX expr RParen End
void Parser::parse_main_action_543() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode_idx(0xDDCB0E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE RRC LParen IY RParen End
void Parser::parse_main_action_544() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xFDCB000E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE RRC LParen IY expr RParen End
void Parser::parse_main_action_545() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode_idx(0xFDCB0E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE SBC A Comma LParen HL Minus RParen End | ALTD IOE SBC LParen HL Minus RParen End
void Parser::parse_main_action_546() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0x7F9E);
	add_opcode(0x2B);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0x9E);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE SBC A Comma LParen HL Plus RParen End | ALTD IOE SBC LParen HL Plus RParen End
void Parser::parse_main_action_547() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0x7F9E);
	add_opcode(0x23);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0x9E);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE SBC A Comma LParen HL RParen End | ALTD IOE SBC LParen HL RParen End
void Parser::parse_main_action_548() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0x7F9E);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0x9E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE SBC A Comma LParen IX RParen End | ALTD IOE SBC LParen IX RParen End
void Parser::parse_main_action_549() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xDD9E00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE SBC A Comma LParen IX expr RParen End | ALTD IOE SBC LParen IX expr RParen End
void Parser::parse_main_action_550() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode_idx(0xDD9E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE SBC A Comma LParen IY RParen End | ALTD IOE SBC LParen IY RParen End
void Parser::parse_main_action_551() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xFD9E00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE SBC A Comma LParen IY expr RParen End | ALTD IOE SBC LParen IY expr RParen End
void Parser::parse_main_action_552() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode_idx(0xFD9E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE SLA LParen HL RParen End
void Parser::parse_main_action_553() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xCB26);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE SLA LParen IX RParen End
void Parser::parse_main_action_554() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xDDCB0026);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE SLA LParen IX expr RParen End
void Parser::parse_main_action_555() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode_idx(0xDDCB26);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE SLA LParen IY RParen End
void Parser::parse_main_action_556() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xFDCB0026);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE SLA LParen IY expr RParen End
void Parser::parse_main_action_557() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode_idx(0xFDCB26);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE SRA LParen HL RParen End
void Parser::parse_main_action_558() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xCB2E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE SRA LParen IX RParen End
void Parser::parse_main_action_559() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xDDCB002E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE SRA LParen IX expr RParen End
void Parser::parse_main_action_560() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode_idx(0xDDCB2E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE SRA LParen IY RParen End
void Parser::parse_main_action_561() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xFDCB002E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE SRA LParen IY expr RParen End
void Parser::parse_main_action_562() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode_idx(0xFDCB2E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE SRL LParen HL RParen End
void Parser::parse_main_action_563() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xCB3E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE SRL LParen IX RParen End
void Parser::parse_main_action_564() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xDDCB003E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE SRL LParen IX expr RParen End
void Parser::parse_main_action_565() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode_idx(0xDDCB3E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE SRL LParen IY RParen End
void Parser::parse_main_action_566() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xFDCB003E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE SRL LParen IY expr RParen End
void Parser::parse_main_action_567() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode_idx(0xFDCB3E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE SUB A Comma LParen HL Minus RParen End | ALTD IOE SUB LParen HL Minus RParen End
void Parser::parse_main_action_568() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0x7F96);
	add_opcode(0x2B);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0x96);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE SUB A Comma LParen HL Plus RParen End | ALTD IOE SUB LParen HL Plus RParen End
void Parser::parse_main_action_569() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0x7F96);
	add_opcode(0x23);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0x96);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE SUB A Comma LParen HL RParen End | ALTD IOE SUB LParen HL RParen End
void Parser::parse_main_action_570() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0x7F96);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0x96);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE SUB A Comma LParen IX RParen End | ALTD IOE SUB LParen IX RParen End
void Parser::parse_main_action_571() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xDD9600);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE SUB A Comma LParen IX expr RParen End | ALTD IOE SUB LParen IX expr RParen End
void Parser::parse_main_action_572() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode_idx(0xDD96);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE SUB A Comma LParen IY RParen End | ALTD IOE SUB LParen IY RParen End
void Parser::parse_main_action_573() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xFD9600);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE SUB A Comma LParen IY expr RParen End | ALTD IOE SUB LParen IY expr RParen End
void Parser::parse_main_action_574() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode_idx(0xFD96);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE XOR A Comma LParen HL Minus RParen End | ALTD IOE XOR LParen HL Minus RParen End
void Parser::parse_main_action_575() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0x7FAE);
	add_opcode(0x2B);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xAE);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE XOR A Comma LParen HL Plus RParen End | ALTD IOE XOR LParen HL Plus RParen End
void Parser::parse_main_action_576() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0x7FAE);
	add_opcode(0x23);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xAE);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE XOR A Comma LParen HL RParen End | ALTD IOE XOR LParen HL RParen End
void Parser::parse_main_action_577() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0x7FAE);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xAE);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE XOR A Comma LParen IX RParen End | ALTD IOE XOR LParen IX RParen End
void Parser::parse_main_action_578() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xDDAE00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE XOR A Comma LParen IX expr RParen End | ALTD IOE XOR LParen IX expr RParen End
void Parser::parse_main_action_579() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode_idx(0xDDAE);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE XOR A Comma LParen IY RParen End | ALTD IOE XOR LParen IY RParen End
void Parser::parse_main_action_580() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode(0xFDAE00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOE XOR A Comma LParen IY expr RParen End | ALTD IOE XOR LParen IY expr RParen End
void Parser::parse_main_action_581() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDB);
	add_opcode_idx(0xFDAE);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI ADC A Comma LParen HL Minus RParen End | ALTD IOI ADC LParen HL Minus RParen End
void Parser::parse_main_action_582() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0x7F8E);
	add_opcode(0x2B);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0x8E);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI ADC A Comma LParen HL Plus RParen End | ALTD IOI ADC LParen HL Plus RParen End
void Parser::parse_main_action_583() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0x7F8E);
	add_opcode(0x23);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0x8E);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI ADC A Comma LParen HL RParen End | ALTD IOI ADC LParen HL RParen End
void Parser::parse_main_action_584() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0x7F8E);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0x8E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI ADC A Comma LParen IX RParen End | ALTD IOI ADC LParen IX RParen End
void Parser::parse_main_action_585() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xDD8E00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI ADC A Comma LParen IX expr RParen End | ALTD IOI ADC LParen IX expr RParen End
void Parser::parse_main_action_586() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode_idx(0xDD8E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI ADC A Comma LParen IY RParen End | ALTD IOI ADC LParen IY RParen End
void Parser::parse_main_action_587() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xFD8E00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI ADC A Comma LParen IY expr RParen End | ALTD IOI ADC LParen IY expr RParen End
void Parser::parse_main_action_588() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode_idx(0xFD8E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI ADD A Comma LParen HL Minus RParen End | ALTD IOI ADD LParen HL Minus RParen End
void Parser::parse_main_action_589() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0x7F86);
	add_opcode(0x2B);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0x86);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI ADD A Comma LParen HL Plus RParen End | ALTD IOI ADD LParen HL Plus RParen End
void Parser::parse_main_action_590() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0x7F86);
	add_opcode(0x23);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0x86);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI ADD A Comma LParen HL RParen End | ALTD IOI ADD LParen HL RParen End
void Parser::parse_main_action_591() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0x7F86);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0x86);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI ADD A Comma LParen IX RParen End | ALTD IOI ADD LParen IX RParen End
void Parser::parse_main_action_592() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xDD8600);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI ADD A Comma LParen IX expr RParen End | ALTD IOI ADD LParen IX expr RParen End
void Parser::parse_main_action_593() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode_idx(0xDD86);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI ADD A Comma LParen IY RParen End | ALTD IOI ADD LParen IY RParen End
void Parser::parse_main_action_594() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xFD8600);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI ADD A Comma LParen IY expr RParen End | ALTD IOI ADD LParen IY expr RParen End
void Parser::parse_main_action_595() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode_idx(0xFD86);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI AND A Comma LParen HL Minus RParen End | ALTD IOI AND LParen HL Minus RParen End
void Parser::parse_main_action_596() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0x7FA6);
	add_opcode(0x2B);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xA6);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI AND A Comma LParen HL Plus RParen End | ALTD IOI AND LParen HL Plus RParen End
void Parser::parse_main_action_597() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0x7FA6);
	add_opcode(0x23);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xA6);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI AND A Comma LParen HL RParen End | ALTD IOI AND LParen HL RParen End
void Parser::parse_main_action_598() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0x7FA6);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xA6);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI AND A Comma LParen IX RParen End | ALTD IOI AND LParen IX RParen End
void Parser::parse_main_action_599() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xDDA600);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI AND A Comma LParen IX expr RParen End | ALTD IOI AND LParen IX expr RParen End
void Parser::parse_main_action_600() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode_idx(0xDDA6);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI AND A Comma LParen IY RParen End | ALTD IOI AND LParen IY RParen End
void Parser::parse_main_action_601() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xFDA600);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI AND A Comma LParen IY expr RParen End | ALTD IOI AND LParen IY expr RParen End
void Parser::parse_main_action_602() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode_idx(0xFDA6);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI BIT const_expr Comma LParen HL RParen End
void Parser::parse_main_action_603() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	add_opcode(0xD3);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCB46+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI BIT const_expr Comma LParen IX RParen End
void Parser::parse_main_action_604() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	add_opcode(0xD3);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xDDCB0046+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI BIT const_expr Comma LParen IX expr RParen End
void Parser::parse_main_action_605() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	add_opcode(0xD3);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xDDCB46+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI BIT const_expr Comma LParen IY RParen End
void Parser::parse_main_action_606() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	add_opcode(0xD3);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xFDCB0046+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI BIT const_expr Comma LParen IY expr RParen End
void Parser::parse_main_action_607() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	add_opcode(0xD3);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xFDCB46+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI CMP A Comma LParen HL Minus RParen End | ALTD IOI CMP LParen HL Minus RParen End | ALTD IOI CP A Comma LParen HL Minus RParen End | ALTD IOI CP LParen HL Minus RParen End
void Parser::parse_main_action_608() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0x7FBE);
	add_opcode(0x2B);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xBE);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI CMP A Comma LParen HL Plus RParen End | ALTD IOI CMP LParen HL Plus RParen End | ALTD IOI CP A Comma LParen HL Plus RParen End | ALTD IOI CP LParen HL Plus RParen End
void Parser::parse_main_action_609() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0x7FBE);
	add_opcode(0x23);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xBE);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI CMP A Comma LParen HL RParen End | ALTD IOI CMP LParen HL RParen End | ALTD IOI CP A Comma LParen HL RParen End | ALTD IOI CP LParen HL RParen End
void Parser::parse_main_action_610() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0x7FBE);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xBE);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI CMP A Comma LParen IX RParen End | ALTD IOI CMP LParen IX RParen End | ALTD IOI CP A Comma LParen IX RParen End | ALTD IOI CP LParen IX RParen End
void Parser::parse_main_action_611() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xDDBE00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI CMP A Comma LParen IX expr RParen End | ALTD IOI CMP LParen IX expr RParen End | ALTD IOI CP A Comma LParen IX expr RParen End | ALTD IOI CP LParen IX expr RParen End
void Parser::parse_main_action_612() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode_idx(0xDDBE);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI CMP A Comma LParen IY RParen End | ALTD IOI CMP LParen IY RParen End | ALTD IOI CP A Comma LParen IY RParen End | ALTD IOI CP LParen IY RParen End
void Parser::parse_main_action_613() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xFDBE00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI CMP A Comma LParen IY expr RParen End | ALTD IOI CMP LParen IY expr RParen End | ALTD IOI CP A Comma LParen IY expr RParen End | ALTD IOI CP LParen IY expr RParen End
void Parser::parse_main_action_614() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode_idx(0xFDBE);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI DEC LParen HL Minus RParen End
void Parser::parse_main_action_615() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0x35);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI DEC LParen HL Plus RParen End
void Parser::parse_main_action_616() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0x35);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI DEC LParen HL RParen End
void Parser::parse_main_action_617() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0x35);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI DEC LParen IX RParen End
void Parser::parse_main_action_618() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xDD3500);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI DEC LParen IX expr RParen End
void Parser::parse_main_action_619() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode_idx(0xDD35);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI DEC LParen IY RParen End
void Parser::parse_main_action_620() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xFD3500);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI DEC LParen IY expr RParen End
void Parser::parse_main_action_621() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode_idx(0xFD35);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI INC LParen HL Minus RParen End
void Parser::parse_main_action_622() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0x34);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI INC LParen HL Plus RParen End
void Parser::parse_main_action_623() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0x34);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI INC LParen HL RParen End
void Parser::parse_main_action_624() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0x34);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI INC LParen IX RParen End
void Parser::parse_main_action_625() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xDD3400);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI INC LParen IX expr RParen End
void Parser::parse_main_action_626() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode_idx(0xDD34);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI INC LParen IY RParen End
void Parser::parse_main_action_627() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xFD3400);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI INC LParen IY expr RParen End
void Parser::parse_main_action_628() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode_idx(0xFD34);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD A Comma LParen BC Minus RParen End
void Parser::parse_main_action_629() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0x0A);
	add_opcode(0x0B);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD A Comma LParen BC Plus RParen End
void Parser::parse_main_action_630() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0x0A);
	add_opcode(0x03);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD A Comma LParen BC RParen End
void Parser::parse_main_action_631() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0x0A);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD A Comma LParen DE Minus RParen End
void Parser::parse_main_action_632() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0x1A);
	add_opcode(0x1B);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD A Comma LParen DE Plus RParen End
void Parser::parse_main_action_633() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0x1A);
	add_opcode(0x13);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD A Comma LParen DE RParen End
void Parser::parse_main_action_634() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0x1A);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD A Comma LParen HL Minus RParen End | ALTD IOI LD A Comma LParen HLD RParen End
void Parser::parse_main_action_635() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0x7E);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD A Comma LParen HL Plus RParen End | ALTD IOI LD A Comma LParen HLI RParen End
void Parser::parse_main_action_636() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0x7E);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD A Comma LParen HL RParen End
void Parser::parse_main_action_637() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0x7E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD A Comma LParen IX Plus A RParen End
void Parser::parse_main_action_638() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xDD06);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD A Comma LParen IX RParen End
void Parser::parse_main_action_639() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xDD7E00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD A Comma LParen IX expr RParen End
void Parser::parse_main_action_640() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode_idx(0xDD7E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD A Comma LParen IY Plus A RParen End
void Parser::parse_main_action_641() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xFD06);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD A Comma LParen IY RParen End
void Parser::parse_main_action_642() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xFD7E00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD A Comma LParen IY expr RParen End
void Parser::parse_main_action_643() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode_idx(0xFD7E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD A Comma expr End
void Parser::parse_main_action_644() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode_nn(0x3A, 0);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD B Comma LParen HL Minus RParen End | ALTD IOI LD B Comma LParen HLD RParen End
void Parser::parse_main_action_645() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0x46);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD B Comma LParen HL Plus RParen End | ALTD IOI LD B Comma LParen HLI RParen End
void Parser::parse_main_action_646() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0x46);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD B Comma LParen HL RParen End
void Parser::parse_main_action_647() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0x46);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD B Comma LParen IX RParen End
void Parser::parse_main_action_648() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xDD4600);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD B Comma LParen IX expr RParen End
void Parser::parse_main_action_649() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode_idx(0xDD46);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD B Comma LParen IY RParen End
void Parser::parse_main_action_650() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xFD4600);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD B Comma LParen IY expr RParen End
void Parser::parse_main_action_651() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode_idx(0xFD46);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD BC Comma expr End
void Parser::parse_main_action_652() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode_nn(0xED4B, 0);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD BCDE Comma LParen HL RParen End
void Parser::parse_main_action_653() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xDD1A);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD BCDE Comma LParen IX RParen End
void Parser::parse_main_action_654() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xDDCE00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD BCDE Comma LParen IX expr RParen End
void Parser::parse_main_action_655() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode_idx(0xDDCE);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD BCDE Comma LParen IY RParen End
void Parser::parse_main_action_656() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xDDDE00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD BCDE Comma LParen IY expr RParen End
void Parser::parse_main_action_657() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode_idx(0xDDDE);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD BCDE Comma expr End
void Parser::parse_main_action_658() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode_nn(0x93, 0);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD C Comma LParen HL Minus RParen End | ALTD IOI LD C Comma LParen HLD RParen End
void Parser::parse_main_action_659() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0x4E);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD C Comma LParen HL Plus RParen End | ALTD IOI LD C Comma LParen HLI RParen End
void Parser::parse_main_action_660() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0x4E);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD C Comma LParen HL RParen End
void Parser::parse_main_action_661() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0x4E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD C Comma LParen IX RParen End
void Parser::parse_main_action_662() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xDD4E00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD C Comma LParen IX expr RParen End
void Parser::parse_main_action_663() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode_idx(0xDD4E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD C Comma LParen IY RParen End
void Parser::parse_main_action_664() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xFD4E00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD C Comma LParen IY expr RParen End
void Parser::parse_main_action_665() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode_idx(0xFD4E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD D Comma LParen HL Minus RParen End | ALTD IOI LD D Comma LParen HLD RParen End
void Parser::parse_main_action_666() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0x56);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD D Comma LParen HL Plus RParen End | ALTD IOI LD D Comma LParen HLI RParen End
void Parser::parse_main_action_667() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0x56);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD D Comma LParen HL RParen End
void Parser::parse_main_action_668() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0x56);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD D Comma LParen IX RParen End
void Parser::parse_main_action_669() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xDD5600);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD D Comma LParen IX expr RParen End
void Parser::parse_main_action_670() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode_idx(0xDD56);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD D Comma LParen IY RParen End
void Parser::parse_main_action_671() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xFD5600);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD D Comma LParen IY expr RParen End
void Parser::parse_main_action_672() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode_idx(0xFD56);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD DE Comma expr End
void Parser::parse_main_action_673() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode_nn(0xED5B, 0);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD E Comma LParen HL Minus RParen End | ALTD IOI LD E Comma LParen HLD RParen End
void Parser::parse_main_action_674() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0x5E);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD E Comma LParen HL Plus RParen End | ALTD IOI LD E Comma LParen HLI RParen End
void Parser::parse_main_action_675() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0x5E);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD E Comma LParen HL RParen End
void Parser::parse_main_action_676() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0x5E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD E Comma LParen IX RParen End
void Parser::parse_main_action_677() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xDD5E00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD E Comma LParen IX expr RParen End
void Parser::parse_main_action_678() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode_idx(0xDD5E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD E Comma LParen IY RParen End
void Parser::parse_main_action_679() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xFD5E00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD E Comma LParen IY expr RParen End
void Parser::parse_main_action_680() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode_idx(0xFD5E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD H Comma LParen HL Minus RParen End | ALTD IOI LD H Comma LParen HLD RParen End
void Parser::parse_main_action_681() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0x66);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD H Comma LParen HL Plus RParen End | ALTD IOI LD H Comma LParen HLI RParen End
void Parser::parse_main_action_682() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0x66);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD H Comma LParen HL RParen End
void Parser::parse_main_action_683() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0x66);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD H Comma LParen IX RParen End
void Parser::parse_main_action_684() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xDD6600);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD H Comma LParen IX expr RParen End
void Parser::parse_main_action_685() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode_idx(0xDD66);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD H Comma LParen IY RParen End
void Parser::parse_main_action_686() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xFD6600);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD H Comma LParen IY expr RParen End
void Parser::parse_main_action_687() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode_idx(0xFD66);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD HL Comma LParen HL RParen End
void Parser::parse_main_action_688() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xDDE400);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD HL Comma LParen HL expr RParen End
void Parser::parse_main_action_689() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode_idx(0xDDE4);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD HL Comma LParen IX RParen End
void Parser::parse_main_action_690() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xE400);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD HL Comma LParen IX expr RParen End
void Parser::parse_main_action_691() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode_idx(0xE4);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD HL Comma LParen IY RParen End
void Parser::parse_main_action_692() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xFDE400);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD HL Comma LParen IY expr RParen End
void Parser::parse_main_action_693() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode_idx(0xFDE4);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD HL Comma expr End
void Parser::parse_main_action_694() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode_nn(0x2A, 0);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD JK Comma expr End
void Parser::parse_main_action_695() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode_nn(0x99, 0);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD JKHL Comma LParen HL RParen End
void Parser::parse_main_action_696() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xFD1A);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD JKHL Comma LParen IX RParen End
void Parser::parse_main_action_697() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xFDCE00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD JKHL Comma LParen IX expr RParen End
void Parser::parse_main_action_698() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode_idx(0xFDCE);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD JKHL Comma LParen IY RParen End
void Parser::parse_main_action_699() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xFDDE00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD JKHL Comma LParen IY expr RParen End
void Parser::parse_main_action_700() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode_idx(0xFDDE);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD JKHL Comma expr End
void Parser::parse_main_action_701() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode_nn(0x94, 0);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD L Comma LParen HL Minus RParen End | ALTD IOI LD L Comma LParen HLD RParen End
void Parser::parse_main_action_702() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0x6E);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD L Comma LParen HL Plus RParen End | ALTD IOI LD L Comma LParen HLI RParen End
void Parser::parse_main_action_703() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0x6E);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD L Comma LParen HL RParen End
void Parser::parse_main_action_704() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0x6E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD L Comma LParen IX RParen End
void Parser::parse_main_action_705() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xDD6E00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD L Comma LParen IX expr RParen End
void Parser::parse_main_action_706() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode_idx(0xDD6E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD L Comma LParen IY RParen End
void Parser::parse_main_action_707() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xFD6E00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI LD L Comma LParen IY expr RParen End
void Parser::parse_main_action_708() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode_idx(0xFD6E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI OR A Comma LParen HL Minus RParen End | ALTD IOI OR LParen HL Minus RParen End
void Parser::parse_main_action_709() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0x7FB6);
	add_opcode(0x2B);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xB6);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI OR A Comma LParen HL Plus RParen End | ALTD IOI OR LParen HL Plus RParen End
void Parser::parse_main_action_710() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0x7FB6);
	add_opcode(0x23);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xB6);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI OR A Comma LParen HL RParen End | ALTD IOI OR LParen HL RParen End
void Parser::parse_main_action_711() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0x7FB6);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xB6);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI OR A Comma LParen IX RParen End | ALTD IOI OR LParen IX RParen End
void Parser::parse_main_action_712() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xDDB600);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI OR A Comma LParen IX expr RParen End | ALTD IOI OR LParen IX expr RParen End
void Parser::parse_main_action_713() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode_idx(0xDDB6);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI OR A Comma LParen IY RParen End | ALTD IOI OR LParen IY RParen End
void Parser::parse_main_action_714() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xFDB600);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI OR A Comma LParen IY expr RParen End | ALTD IOI OR LParen IY expr RParen End
void Parser::parse_main_action_715() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode_idx(0xFDB6);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI RL LParen HL RParen End
void Parser::parse_main_action_716() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xCB16);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI RL LParen IX RParen End
void Parser::parse_main_action_717() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xDDCB0016);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI RL LParen IX expr RParen End
void Parser::parse_main_action_718() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode_idx(0xDDCB16);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI RL LParen IY RParen End
void Parser::parse_main_action_719() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xFDCB0016);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI RL LParen IY expr RParen End
void Parser::parse_main_action_720() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode_idx(0xFDCB16);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI RLC LParen HL RParen End
void Parser::parse_main_action_721() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xCB06);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI RLC LParen IX RParen End
void Parser::parse_main_action_722() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xDDCB0006);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI RLC LParen IX expr RParen End
void Parser::parse_main_action_723() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode_idx(0xDDCB06);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI RLC LParen IY RParen End
void Parser::parse_main_action_724() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xFDCB0006);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI RLC LParen IY expr RParen End
void Parser::parse_main_action_725() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode_idx(0xFDCB06);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI RR LParen HL RParen End
void Parser::parse_main_action_726() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xCB1E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI RR LParen IX RParen End
void Parser::parse_main_action_727() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xDDCB001E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI RR LParen IX expr RParen End
void Parser::parse_main_action_728() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode_idx(0xDDCB1E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI RR LParen IY RParen End
void Parser::parse_main_action_729() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xFDCB001E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI RR LParen IY expr RParen End
void Parser::parse_main_action_730() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode_idx(0xFDCB1E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI RRC LParen HL RParen End
void Parser::parse_main_action_731() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xCB0E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI RRC LParen IX RParen End
void Parser::parse_main_action_732() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xDDCB000E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI RRC LParen IX expr RParen End
void Parser::parse_main_action_733() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode_idx(0xDDCB0E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI RRC LParen IY RParen End
void Parser::parse_main_action_734() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xFDCB000E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI RRC LParen IY expr RParen End
void Parser::parse_main_action_735() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode_idx(0xFDCB0E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI SBC A Comma LParen HL Minus RParen End | ALTD IOI SBC LParen HL Minus RParen End
void Parser::parse_main_action_736() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0x7F9E);
	add_opcode(0x2B);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0x9E);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI SBC A Comma LParen HL Plus RParen End | ALTD IOI SBC LParen HL Plus RParen End
void Parser::parse_main_action_737() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0x7F9E);
	add_opcode(0x23);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0x9E);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI SBC A Comma LParen HL RParen End | ALTD IOI SBC LParen HL RParen End
void Parser::parse_main_action_738() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0x7F9E);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0x9E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI SBC A Comma LParen IX RParen End | ALTD IOI SBC LParen IX RParen End
void Parser::parse_main_action_739() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xDD9E00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI SBC A Comma LParen IX expr RParen End | ALTD IOI SBC LParen IX expr RParen End
void Parser::parse_main_action_740() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode_idx(0xDD9E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI SBC A Comma LParen IY RParen End | ALTD IOI SBC LParen IY RParen End
void Parser::parse_main_action_741() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xFD9E00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI SBC A Comma LParen IY expr RParen End | ALTD IOI SBC LParen IY expr RParen End
void Parser::parse_main_action_742() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode_idx(0xFD9E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI SLA LParen HL RParen End
void Parser::parse_main_action_743() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xCB26);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI SLA LParen IX RParen End
void Parser::parse_main_action_744() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xDDCB0026);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI SLA LParen IX expr RParen End
void Parser::parse_main_action_745() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode_idx(0xDDCB26);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI SLA LParen IY RParen End
void Parser::parse_main_action_746() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xFDCB0026);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI SLA LParen IY expr RParen End
void Parser::parse_main_action_747() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode_idx(0xFDCB26);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI SRA LParen HL RParen End
void Parser::parse_main_action_748() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xCB2E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI SRA LParen IX RParen End
void Parser::parse_main_action_749() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xDDCB002E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI SRA LParen IX expr RParen End
void Parser::parse_main_action_750() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode_idx(0xDDCB2E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI SRA LParen IY RParen End
void Parser::parse_main_action_751() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xFDCB002E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI SRA LParen IY expr RParen End
void Parser::parse_main_action_752() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode_idx(0xFDCB2E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI SRL LParen HL RParen End
void Parser::parse_main_action_753() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xCB3E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI SRL LParen IX RParen End
void Parser::parse_main_action_754() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xDDCB003E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI SRL LParen IX expr RParen End
void Parser::parse_main_action_755() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode_idx(0xDDCB3E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI SRL LParen IY RParen End
void Parser::parse_main_action_756() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xFDCB003E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI SRL LParen IY expr RParen End
void Parser::parse_main_action_757() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode_idx(0xFDCB3E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI SUB A Comma LParen HL Minus RParen End | ALTD IOI SUB LParen HL Minus RParen End
void Parser::parse_main_action_758() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0x7F96);
	add_opcode(0x2B);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0x96);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI SUB A Comma LParen HL Plus RParen End | ALTD IOI SUB LParen HL Plus RParen End
void Parser::parse_main_action_759() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0x7F96);
	add_opcode(0x23);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0x96);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI SUB A Comma LParen HL RParen End | ALTD IOI SUB LParen HL RParen End
void Parser::parse_main_action_760() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0x7F96);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0x96);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI SUB A Comma LParen IX RParen End | ALTD IOI SUB LParen IX RParen End
void Parser::parse_main_action_761() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xDD9600);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI SUB A Comma LParen IX expr RParen End | ALTD IOI SUB LParen IX expr RParen End
void Parser::parse_main_action_762() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode_idx(0xDD96);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI SUB A Comma LParen IY RParen End | ALTD IOI SUB LParen IY RParen End
void Parser::parse_main_action_763() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xFD9600);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI SUB A Comma LParen IY expr RParen End | ALTD IOI SUB LParen IY expr RParen End
void Parser::parse_main_action_764() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode_idx(0xFD96);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI XOR A Comma LParen HL Minus RParen End | ALTD IOI XOR LParen HL Minus RParen End
void Parser::parse_main_action_765() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0x7FAE);
	add_opcode(0x2B);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xAE);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI XOR A Comma LParen HL Plus RParen End | ALTD IOI XOR LParen HL Plus RParen End
void Parser::parse_main_action_766() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0x7FAE);
	add_opcode(0x23);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xAE);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI XOR A Comma LParen HL RParen End | ALTD IOI XOR LParen HL RParen End
void Parser::parse_main_action_767() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0x7FAE);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xAE);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI XOR A Comma LParen IX RParen End | ALTD IOI XOR LParen IX RParen End
void Parser::parse_main_action_768() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xDDAE00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI XOR A Comma LParen IX expr RParen End | ALTD IOI XOR LParen IX expr RParen End
void Parser::parse_main_action_769() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode_idx(0xDDAE);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI XOR A Comma LParen IY RParen End | ALTD IOI XOR LParen IY RParen End
void Parser::parse_main_action_770() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode(0xFDAE00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD IOI XOR A Comma LParen IY expr RParen End | ALTD IOI XOR LParen IY expr RParen End
void Parser::parse_main_action_771() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD3);
	add_opcode_idx(0xFDAE);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD A Comma A End | LD A1 Comma A End
void Parser::parse_main_action_772() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x7F);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F7F);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD A Comma B End | LD A1 Comma B End
void Parser::parse_main_action_773() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x78);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F78);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD A Comma C End | LD A1 Comma C End
void Parser::parse_main_action_774() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x79);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F79);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD A Comma D End | LD A1 Comma D End
void Parser::parse_main_action_775() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x7A);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F7A);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD A Comma E End | LD A1 Comma E End
void Parser::parse_main_action_776() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x7B);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F7B);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD A Comma EIR End | LD A1 Comma EIR End
void Parser::parse_main_action_777() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xED57);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD A Comma H End | LD A1 Comma H End
void Parser::parse_main_action_778() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x7C);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F7C);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD A Comma HTR End | LD A1 Comma HTR End
void Parser::parse_main_action_779() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xED50);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD A Comma IIR End | LD A1 Comma IIR End
void Parser::parse_main_action_780() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xED5F);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD A Comma L End | LD A1 Comma L End
void Parser::parse_main_action_781() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x7D);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F7D);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD A Comma XPC End | LD A1 Comma XPC End
void Parser::parse_main_action_782() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xED77);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD A Comma LParen BC Minus RParen End | LD A1 Comma LParen BC Minus RParen End
void Parser::parse_main_action_783() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x0A);
	add_opcode(0x0B);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD A Comma LParen BC Plus RParen End | LD A1 Comma LParen BC Plus RParen End
void Parser::parse_main_action_784() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x0A);
	add_opcode(0x03);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD A Comma LParen BC RParen End | LD A1 Comma LParen BC RParen End
void Parser::parse_main_action_785() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x0A);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD A Comma LParen DE Minus RParen End | LD A1 Comma LParen DE Minus RParen End
void Parser::parse_main_action_786() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x1A);
	add_opcode(0x1B);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD A Comma LParen DE Plus RParen End | LD A1 Comma LParen DE Plus RParen End
void Parser::parse_main_action_787() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x1A);
	add_opcode(0x13);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD A Comma LParen DE RParen End | LD A1 Comma LParen DE RParen End
void Parser::parse_main_action_788() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x1A);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD A Comma LParen HL Minus RParen End | ALTD LD A Comma LParen HLD RParen End | LD A1 Comma LParen HL Minus RParen End | LD A1 Comma LParen HLD RParen End
void Parser::parse_main_action_789() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7E);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD A Comma LParen HL Plus RParen End | ALTD LD A Comma LParen HLI RParen End | LD A1 Comma LParen HL Plus RParen End | LD A1 Comma LParen HLI RParen End
void Parser::parse_main_action_790() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7E);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD A Comma LParen HL RParen End | LD A1 Comma LParen HL RParen End
void Parser::parse_main_action_791() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD A Comma LParen IX Plus A RParen End | LD A1 Comma LParen IX Plus A RParen End
void Parser::parse_main_action_792() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDD06);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD A Comma LParen IX RParen End | LD A1 Comma LParen IX RParen End
void Parser::parse_main_action_793() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDD7E00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD A Comma LParen IX expr RParen End | LD A1 Comma LParen IX expr RParen End
void Parser::parse_main_action_794() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0xDD7E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD A Comma LParen IY Plus A RParen End | LD A1 Comma LParen IY Plus A RParen End
void Parser::parse_main_action_795() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xFD06);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD A Comma LParen IY RParen End | LD A1 Comma LParen IY RParen End
void Parser::parse_main_action_796() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xFD7E00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD A Comma LParen IY expr RParen End | LD A1 Comma LParen IY expr RParen End
void Parser::parse_main_action_797() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0xFD7E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD A Comma LParen PW Plus HL RParen End | LD A1 Comma LParen PW Plus HL RParen End
void Parser::parse_main_action_798() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x8B);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD A Comma LParen PW RParen End | LD A1 Comma LParen PW RParen End
void Parser::parse_main_action_799() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x8D00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD A Comma LParen PW expr RParen End | LD A1 Comma LParen PW expr RParen End
void Parser::parse_main_action_800() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0x8D);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD A Comma LParen PX Plus HL RParen End | LD A1 Comma LParen PX Plus HL RParen End
void Parser::parse_main_action_801() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x9B);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD A Comma LParen PX RParen End | LD A1 Comma LParen PX RParen End
void Parser::parse_main_action_802() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x9D00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD A Comma LParen PX expr RParen End | LD A1 Comma LParen PX expr RParen End
void Parser::parse_main_action_803() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0x9D);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD A Comma LParen PY Plus HL RParen End | LD A1 Comma LParen PY Plus HL RParen End
void Parser::parse_main_action_804() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xAB);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD A Comma LParen PY RParen End | LD A1 Comma LParen PY RParen End
void Parser::parse_main_action_805() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xAD00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD A Comma LParen PY expr RParen End | LD A1 Comma LParen PY expr RParen End
void Parser::parse_main_action_806() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0xAD);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD A Comma LParen PZ Plus HL RParen End | LD A1 Comma LParen PZ Plus HL RParen End
void Parser::parse_main_action_807() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xBB);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD A Comma LParen PZ RParen End | LD A1 Comma LParen PZ RParen End
void Parser::parse_main_action_808() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xBD00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD A Comma LParen PZ expr RParen End | LD A1 Comma LParen PZ expr RParen End
void Parser::parse_main_action_809() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0xBD);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD A Comma expr End | LD A1 Comma expr End
void Parser::parse_main_action_810() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	if (expr_in_parens()) { add_opcode(0x76);
	add_opcode_nn(0x3A, 0); } else { add_opcode(0x76);
	add_opcode_n(0x3E); }
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD B Comma A End | LD B1 Comma A End
void Parser::parse_main_action_811() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x47);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F47);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD B Comma B End | LD B1 Comma B End
void Parser::parse_main_action_812() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x40);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F40);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD B Comma C End | LD B1 Comma C End
void Parser::parse_main_action_813() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x41);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F41);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD B Comma D End | LD B1 Comma D End
void Parser::parse_main_action_814() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x42);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F42);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD B Comma E End | LD B1 Comma E End
void Parser::parse_main_action_815() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x43);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F43);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD B Comma H End | LD B1 Comma H End
void Parser::parse_main_action_816() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x44);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F44);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD B Comma L End | LD B1 Comma L End
void Parser::parse_main_action_817() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x45);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F45);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD B Comma LParen HL Minus RParen End | ALTD LD B Comma LParen HLD RParen End | LD B1 Comma LParen HL Minus RParen End | LD B1 Comma LParen HLD RParen End
void Parser::parse_main_action_818() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x46);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD B Comma LParen HL Plus RParen End | ALTD LD B Comma LParen HLI RParen End | LD B1 Comma LParen HL Plus RParen End | LD B1 Comma LParen HLI RParen End
void Parser::parse_main_action_819() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x46);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD B Comma LParen HL RParen End | LD B1 Comma LParen HL RParen End
void Parser::parse_main_action_820() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x46);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD B Comma LParen IX RParen End | LD B1 Comma LParen IX RParen End
void Parser::parse_main_action_821() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDD4600);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD B Comma LParen IX expr RParen End | LD B1 Comma LParen IX expr RParen End
void Parser::parse_main_action_822() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0xDD46);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD B Comma LParen IY RParen End | LD B1 Comma LParen IY RParen End
void Parser::parse_main_action_823() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xFD4600);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD B Comma LParen IY expr RParen End | LD B1 Comma LParen IY expr RParen End
void Parser::parse_main_action_824() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0xFD46);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD B Comma expr End | LD B1 Comma expr End
void Parser::parse_main_action_825() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	add_opcode_n(0x06);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD BC Comma BC End | LD BC1 Comma BC End
void Parser::parse_main_action_826() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xED49);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD BC Comma DE End | LD BC1 Comma DE End
void Parser::parse_main_action_827() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xED41);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD BC Comma HL End | LD BC1 Comma HL End
void Parser::parse_main_action_828() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x44);
	add_opcode(0x76);
	add_opcode(0x4D);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x91);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD BC Comma LParen PW Plus HL RParen End | LD BC1 Comma LParen PW Plus HL RParen End
void Parser::parse_main_action_829() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D02);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD BC Comma LParen PW RParen End | LD BC1 Comma LParen PW RParen End
void Parser::parse_main_action_830() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D0000);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD BC Comma LParen PW expr RParen End | LD BC1 Comma LParen PW expr RParen End
void Parser::parse_main_action_831() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0x6D00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD BC Comma LParen PX Plus HL RParen End | LD BC1 Comma LParen PX Plus HL RParen End
void Parser::parse_main_action_832() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D12);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD BC Comma LParen PX RParen End | LD BC1 Comma LParen PX RParen End
void Parser::parse_main_action_833() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D1000);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD BC Comma LParen PX expr RParen End | LD BC1 Comma LParen PX expr RParen End
void Parser::parse_main_action_834() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0x6D10);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD BC Comma LParen PY Plus HL RParen End | LD BC1 Comma LParen PY Plus HL RParen End
void Parser::parse_main_action_835() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D22);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD BC Comma LParen PY RParen End | LD BC1 Comma LParen PY RParen End
void Parser::parse_main_action_836() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D2000);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD BC Comma LParen PY expr RParen End | LD BC1 Comma LParen PY expr RParen End
void Parser::parse_main_action_837() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0x6D20);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD BC Comma LParen PZ Plus HL RParen End | LD BC1 Comma LParen PZ Plus HL RParen End
void Parser::parse_main_action_838() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D32);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD BC Comma LParen PZ RParen End | LD BC1 Comma LParen PZ RParen End
void Parser::parse_main_action_839() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D3000);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD BC Comma LParen PZ expr RParen End | LD BC1 Comma LParen PZ expr RParen End
void Parser::parse_main_action_840() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0x6D30);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD BC Comma expr End | LD BC1 Comma expr End
void Parser::parse_main_action_841() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	if (expr_in_parens()) { add_opcode(0x76);
	add_opcode_nn(0xED4B, 0); } else { add_opcode(0x76);
	add_opcode_nn(0x01, 0); }
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD BCDE Comma PW End | LD BCDE1 Comma PW End
void Parser::parse_main_action_842() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDDCD);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD BCDE Comma PX End | LD BCDE1 Comma PX End
void Parser::parse_main_action_843() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDDDD);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD BCDE Comma PY End | LD BCDE1 Comma PY End
void Parser::parse_main_action_844() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDDED);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD BCDE Comma PZ End | LD BCDE1 Comma PZ End
void Parser::parse_main_action_845() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDDFD);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD BCDE Comma LParen HL RParen End | LD BCDE1 Comma LParen HL RParen End
void Parser::parse_main_action_846() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDD1A);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD BCDE Comma LParen IX RParen End | LD BCDE1 Comma LParen IX RParen End
void Parser::parse_main_action_847() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDDCE00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD BCDE Comma LParen IX expr RParen End | LD BCDE1 Comma LParen IX expr RParen End
void Parser::parse_main_action_848() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0xDDCE);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD BCDE Comma LParen IY RParen End | LD BCDE1 Comma LParen IY RParen End
void Parser::parse_main_action_849() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDDDE00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD BCDE Comma LParen IY expr RParen End | LD BCDE1 Comma LParen IY expr RParen End
void Parser::parse_main_action_850() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0xDDDE);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD BCDE Comma LParen PW Plus HL RParen End | LD BCDE1 Comma LParen PW Plus HL RParen End
void Parser::parse_main_action_851() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDD0C);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD BCDE Comma LParen PW RParen End | LD BCDE1 Comma LParen PW RParen End
void Parser::parse_main_action_852() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDD0E00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD BCDE Comma LParen PW expr RParen End | LD BCDE1 Comma LParen PW expr RParen End
void Parser::parse_main_action_853() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0xDD0E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD BCDE Comma LParen PX Plus HL RParen End | LD BCDE1 Comma LParen PX Plus HL RParen End
void Parser::parse_main_action_854() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDD1C);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD BCDE Comma LParen PX RParen End | LD BCDE1 Comma LParen PX RParen End
void Parser::parse_main_action_855() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDD1E00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD BCDE Comma LParen PX expr RParen End | LD BCDE1 Comma LParen PX expr RParen End
void Parser::parse_main_action_856() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0xDD1E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD BCDE Comma LParen PY Plus HL RParen End | LD BCDE1 Comma LParen PY Plus HL RParen End
void Parser::parse_main_action_857() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDD2C);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD BCDE Comma LParen PY RParen End | LD BCDE1 Comma LParen PY RParen End
void Parser::parse_main_action_858() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDD2E00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD BCDE Comma LParen PY expr RParen End | LD BCDE1 Comma LParen PY expr RParen End
void Parser::parse_main_action_859() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0xDD2E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD BCDE Comma LParen PZ Plus HL RParen End | LD BCDE1 Comma LParen PZ Plus HL RParen End
void Parser::parse_main_action_860() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDD3C);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD BCDE Comma LParen PZ RParen End | LD BCDE1 Comma LParen PZ RParen End
void Parser::parse_main_action_861() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDD3E00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD BCDE Comma LParen PZ expr RParen End | LD BCDE1 Comma LParen PZ expr RParen End
void Parser::parse_main_action_862() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0xDD3E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD BCDE Comma LParen SP Plus HL RParen End | LD BCDE1 Comma LParen SP Plus HL RParen End
void Parser::parse_main_action_863() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDDFE);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD BCDE Comma LParen SP RParen End | LD BCDE1 Comma LParen SP RParen End
void Parser::parse_main_action_864() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDDEE00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD BCDE Comma LParen SP expr RParen End | LD BCDE1 Comma LParen SP expr RParen End
void Parser::parse_main_action_865() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_n(0xDDEE);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD BCDE Comma expr End | LD BCDE1 Comma expr End
void Parser::parse_main_action_866() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	if (expr_in_parens()) { add_opcode(0x76);
	add_opcode_nn(0x93, 0); } else { add_opcode(0x76);
	add_opcode_s(0xA3); }
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD C Comma A End | LD C1 Comma A End
void Parser::parse_main_action_867() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x4F);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F4F);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD C Comma B End | LD C1 Comma B End
void Parser::parse_main_action_868() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x48);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F48);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD C Comma C End | LD C1 Comma C End
void Parser::parse_main_action_869() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x49);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F49);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD C Comma D End | LD C1 Comma D End
void Parser::parse_main_action_870() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x4A);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F4A);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD C Comma E End | LD C1 Comma E End
void Parser::parse_main_action_871() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x4B);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F4B);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD C Comma H End | LD C1 Comma H End
void Parser::parse_main_action_872() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x4C);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F4C);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD C Comma L End | LD C1 Comma L End
void Parser::parse_main_action_873() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x4D);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F4D);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD C Comma LParen HL Minus RParen End | ALTD LD C Comma LParen HLD RParen End | LD C1 Comma LParen HL Minus RParen End | LD C1 Comma LParen HLD RParen End
void Parser::parse_main_action_874() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x4E);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD C Comma LParen HL Plus RParen End | ALTD LD C Comma LParen HLI RParen End | LD C1 Comma LParen HL Plus RParen End | LD C1 Comma LParen HLI RParen End
void Parser::parse_main_action_875() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x4E);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD C Comma LParen HL RParen End | LD C1 Comma LParen HL RParen End
void Parser::parse_main_action_876() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x4E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD C Comma LParen IX RParen End | LD C1 Comma LParen IX RParen End
void Parser::parse_main_action_877() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDD4E00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD C Comma LParen IX expr RParen End | LD C1 Comma LParen IX expr RParen End
void Parser::parse_main_action_878() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0xDD4E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD C Comma LParen IY RParen End | LD C1 Comma LParen IY RParen End
void Parser::parse_main_action_879() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xFD4E00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD C Comma LParen IY expr RParen End | LD C1 Comma LParen IY expr RParen End
void Parser::parse_main_action_880() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0xFD4E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD C Comma expr End | LD C1 Comma expr End
void Parser::parse_main_action_881() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	add_opcode_n(0x0E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD D Comma A End | LD D1 Comma A End
void Parser::parse_main_action_882() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x57);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F57);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD D Comma B End | LD D1 Comma B End
void Parser::parse_main_action_883() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x50);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F50);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD D Comma C End | LD D1 Comma C End
void Parser::parse_main_action_884() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x51);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F51);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD D Comma D End | LD D1 Comma D End
void Parser::parse_main_action_885() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x52);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F52);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD D Comma E End | LD D1 Comma E End
void Parser::parse_main_action_886() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x53);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F53);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD D Comma H End | LD D1 Comma H End
void Parser::parse_main_action_887() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x54);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F54);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD D Comma L End | LD D1 Comma L End
void Parser::parse_main_action_888() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x55);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F55);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD D Comma LParen HL Minus RParen End | ALTD LD D Comma LParen HLD RParen End | LD D1 Comma LParen HL Minus RParen End | LD D1 Comma LParen HLD RParen End
void Parser::parse_main_action_889() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x56);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD D Comma LParen HL Plus RParen End | ALTD LD D Comma LParen HLI RParen End | LD D1 Comma LParen HL Plus RParen End | LD D1 Comma LParen HLI RParen End
void Parser::parse_main_action_890() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x56);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD D Comma LParen HL RParen End | LD D1 Comma LParen HL RParen End
void Parser::parse_main_action_891() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x56);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD D Comma LParen IX RParen End | LD D1 Comma LParen IX RParen End
void Parser::parse_main_action_892() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDD5600);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD D Comma LParen IX expr RParen End | LD D1 Comma LParen IX expr RParen End
void Parser::parse_main_action_893() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0xDD56);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD D Comma LParen IY RParen End | LD D1 Comma LParen IY RParen End
void Parser::parse_main_action_894() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xFD5600);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD D Comma LParen IY expr RParen End | LD D1 Comma LParen IY expr RParen End
void Parser::parse_main_action_895() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0xFD56);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD D Comma expr End | LD D1 Comma expr End
void Parser::parse_main_action_896() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	add_opcode_n(0x16);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD DE Comma BC End | LD DE1 Comma BC End
void Parser::parse_main_action_897() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xED59);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD DE Comma DE End | LD DE1 Comma DE End
void Parser::parse_main_action_898() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xED51);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD DE Comma HL End | LD DE1 Comma HL End
void Parser::parse_main_action_899() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x54);
	add_opcode(0x76);
	add_opcode(0x5D);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xB1);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD DE Comma LParen PW Plus HL RParen End | LD DE1 Comma LParen PW Plus HL RParen End
void Parser::parse_main_action_900() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D42);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD DE Comma LParen PW RParen End | LD DE1 Comma LParen PW RParen End
void Parser::parse_main_action_901() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D4000);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD DE Comma LParen PW expr RParen End | LD DE1 Comma LParen PW expr RParen End
void Parser::parse_main_action_902() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0x6D40);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD DE Comma LParen PX Plus HL RParen End | LD DE1 Comma LParen PX Plus HL RParen End
void Parser::parse_main_action_903() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D52);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD DE Comma LParen PX RParen End | LD DE1 Comma LParen PX RParen End
void Parser::parse_main_action_904() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D5000);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD DE Comma LParen PX expr RParen End | LD DE1 Comma LParen PX expr RParen End
void Parser::parse_main_action_905() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0x6D50);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD DE Comma LParen PY Plus HL RParen End | LD DE1 Comma LParen PY Plus HL RParen End
void Parser::parse_main_action_906() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D62);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD DE Comma LParen PY RParen End | LD DE1 Comma LParen PY RParen End
void Parser::parse_main_action_907() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D6000);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD DE Comma LParen PY expr RParen End | LD DE1 Comma LParen PY expr RParen End
void Parser::parse_main_action_908() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0x6D60);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD DE Comma LParen PZ Plus HL RParen End | LD DE1 Comma LParen PZ Plus HL RParen End
void Parser::parse_main_action_909() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D72);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD DE Comma LParen PZ RParen End | LD DE1 Comma LParen PZ RParen End
void Parser::parse_main_action_910() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D7000);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD DE Comma LParen PZ expr RParen End | LD DE1 Comma LParen PZ expr RParen End
void Parser::parse_main_action_911() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0x6D70);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD DE Comma expr End | LD DE1 Comma expr End
void Parser::parse_main_action_912() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	if (expr_in_parens()) { add_opcode(0x76);
	add_opcode_nn(0xED5B, 0); } else { add_opcode(0x76);
	add_opcode_nn(0x11, 0); }
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD E Comma A End | LD E1 Comma A End
void Parser::parse_main_action_913() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x5F);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F5F);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD E Comma B End | LD E1 Comma B End
void Parser::parse_main_action_914() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x58);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F58);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD E Comma C End | LD E1 Comma C End
void Parser::parse_main_action_915() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x59);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F59);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD E Comma D End | LD E1 Comma D End
void Parser::parse_main_action_916() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x5A);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F5A);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD E Comma E End | LD E1 Comma E End
void Parser::parse_main_action_917() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x5B);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F5B);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD E Comma H End | LD E1 Comma H End
void Parser::parse_main_action_918() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x5C);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F5C);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD E Comma L End | LD E1 Comma L End
void Parser::parse_main_action_919() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x5D);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F5D);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD E Comma LParen HL Minus RParen End | ALTD LD E Comma LParen HLD RParen End | LD E1 Comma LParen HL Minus RParen End | LD E1 Comma LParen HLD RParen End
void Parser::parse_main_action_920() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x5E);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD E Comma LParen HL Plus RParen End | ALTD LD E Comma LParen HLI RParen End | LD E1 Comma LParen HL Plus RParen End | LD E1 Comma LParen HLI RParen End
void Parser::parse_main_action_921() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x5E);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD E Comma LParen HL RParen End | LD E1 Comma LParen HL RParen End
void Parser::parse_main_action_922() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x5E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD E Comma LParen IX RParen End | LD E1 Comma LParen IX RParen End
void Parser::parse_main_action_923() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDD5E00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD E Comma LParen IX expr RParen End | LD E1 Comma LParen IX expr RParen End
void Parser::parse_main_action_924() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0xDD5E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD E Comma LParen IY RParen End | LD E1 Comma LParen IY RParen End
void Parser::parse_main_action_925() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xFD5E00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD E Comma LParen IY expr RParen End | LD E1 Comma LParen IY expr RParen End
void Parser::parse_main_action_926() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0xFD5E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD E Comma expr End | LD E1 Comma expr End
void Parser::parse_main_action_927() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	add_opcode_n(0x1E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD H Comma A End | LD H1 Comma A End
void Parser::parse_main_action_928() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x67);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F67);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD H Comma B End | LD H1 Comma B End
void Parser::parse_main_action_929() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x60);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F60);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD H Comma C End | LD H1 Comma C End
void Parser::parse_main_action_930() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x61);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F61);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD H Comma D End | LD H1 Comma D End
void Parser::parse_main_action_931() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x62);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F62);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD H Comma E End | LD H1 Comma E End
void Parser::parse_main_action_932() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x63);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F63);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD H Comma H End | LD H1 Comma H End
void Parser::parse_main_action_933() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x64);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F64);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD H Comma L End | LD H1 Comma L End
void Parser::parse_main_action_934() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x65);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F65);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD H Comma LParen HL Minus RParen End | ALTD LD H Comma LParen HLD RParen End | LD H1 Comma LParen HL Minus RParen End | LD H1 Comma LParen HLD RParen End
void Parser::parse_main_action_935() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x66);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD H Comma LParen HL Plus RParen End | ALTD LD H Comma LParen HLI RParen End | LD H1 Comma LParen HL Plus RParen End | LD H1 Comma LParen HLI RParen End
void Parser::parse_main_action_936() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x66);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD H Comma LParen HL RParen End | LD H1 Comma LParen HL RParen End
void Parser::parse_main_action_937() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x66);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD H Comma LParen IX RParen End | LD H1 Comma LParen IX RParen End
void Parser::parse_main_action_938() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDD6600);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD H Comma LParen IX expr RParen End | LD H1 Comma LParen IX expr RParen End
void Parser::parse_main_action_939() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0xDD66);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD H Comma LParen IY RParen End | LD H1 Comma LParen IY RParen End
void Parser::parse_main_action_940() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xFD6600);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD H Comma LParen IY expr RParen End | LD H1 Comma LParen IY expr RParen End
void Parser::parse_main_action_941() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0xFD66);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD H Comma expr End | LD H1 Comma expr End
void Parser::parse_main_action_942() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	add_opcode_n(0x26);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD HL Comma BC End | LD HL1 Comma BC End
void Parser::parse_main_action_943() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x81);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xED69);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD HL Comma DE End | LD HL1 Comma DE End
void Parser::parse_main_action_944() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xA1);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xED61);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD HL Comma IX End | LD HL1 Comma IX End
void Parser::parse_main_action_945() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDD7C);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD HL Comma IY End | LD HL1 Comma IY End
void Parser::parse_main_action_946() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xFD7C);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD HL Comma LXPC End | LD HL1 Comma LXPC End
void Parser::parse_main_action_947() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x9F);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD HL Comma LParen HL RParen End | LD HL1 Comma LParen HL RParen End
void Parser::parse_main_action_948() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDDE400);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD HL Comma LParen HL expr RParen End | LD HL1 Comma LParen HL expr RParen End
void Parser::parse_main_action_949() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0xDDE4);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD HL Comma LParen IX RParen End | LD HL1 Comma LParen IX RParen End
void Parser::parse_main_action_950() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xE400);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD HL Comma LParen IX expr RParen End | LD HL1 Comma LParen IX expr RParen End
void Parser::parse_main_action_951() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0xE4);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD HL Comma LParen IY RParen End | LD HL1 Comma LParen IY RParen End
void Parser::parse_main_action_952() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xFDE400);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD HL Comma LParen IY expr RParen End | LD HL1 Comma LParen IY expr RParen End
void Parser::parse_main_action_953() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0xFDE4);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD HL Comma LParen PW Plus BC RParen End | LD HL1 Comma LParen PW Plus BC RParen End
void Parser::parse_main_action_954() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xED06);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD HL Comma LParen PW RParen End | LD HL1 Comma LParen PW RParen End
void Parser::parse_main_action_955() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x8500);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD HL Comma LParen PW expr RParen End | LD HL1 Comma LParen PW expr RParen End
void Parser::parse_main_action_956() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0x85);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD HL Comma LParen PX Plus BC RParen End | LD HL1 Comma LParen PX Plus BC RParen End
void Parser::parse_main_action_957() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xED16);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD HL Comma LParen PX RParen End | LD HL1 Comma LParen PX RParen End
void Parser::parse_main_action_958() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x9500);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD HL Comma LParen PX expr RParen End | LD HL1 Comma LParen PX expr RParen End
void Parser::parse_main_action_959() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0x95);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD HL Comma LParen PY Plus BC RParen End | LD HL1 Comma LParen PY Plus BC RParen End
void Parser::parse_main_action_960() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xED26);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD HL Comma LParen PY RParen End | LD HL1 Comma LParen PY RParen End
void Parser::parse_main_action_961() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xA500);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD HL Comma LParen PY expr RParen End | LD HL1 Comma LParen PY expr RParen End
void Parser::parse_main_action_962() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0xA5);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD HL Comma LParen PZ Plus BC RParen End | LD HL1 Comma LParen PZ Plus BC RParen End
void Parser::parse_main_action_963() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xED36);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD HL Comma LParen PZ RParen End | LD HL1 Comma LParen PZ RParen End
void Parser::parse_main_action_964() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xB500);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD HL Comma LParen PZ expr RParen End | LD HL1 Comma LParen PZ expr RParen End
void Parser::parse_main_action_965() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0xB5);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD HL Comma LParen SP Plus HL RParen End | LD HL1 Comma LParen SP Plus HL RParen End
void Parser::parse_main_action_966() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xEDFE);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD HL Comma LParen SP RParen End | LD HL1 Comma LParen SP RParen End
void Parser::parse_main_action_967() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xC400);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD HL Comma LParen SP expr RParen End | LD HL1 Comma LParen SP expr RParen End
void Parser::parse_main_action_968() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_n(0xC4);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD HL Comma expr End | LD HL1 Comma expr End
void Parser::parse_main_action_969() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	if (expr_in_parens()) { add_opcode(0x76);
	add_opcode_nn(0x2A, 0); } else { add_opcode(0x76);
	add_opcode_nn(0x21, 0); }
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD JK Comma expr End | LD JK1 Comma expr End
void Parser::parse_main_action_970() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	if (expr_in_parens()) { add_opcode(0x76);
	add_opcode_nn(0x99, 0); } else { add_opcode(0x76);
	add_opcode_nn(0xA9, 0); }
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD JKHL Comma PW End | LD JKHL1 Comma PW End
void Parser::parse_main_action_971() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xFDCD);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD JKHL Comma PX End | LD JKHL1 Comma PX End
void Parser::parse_main_action_972() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xFDDD);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD JKHL Comma PY End | LD JKHL1 Comma PY End
void Parser::parse_main_action_973() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xFDED);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD JKHL Comma PZ End | LD JKHL1 Comma PZ End
void Parser::parse_main_action_974() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xFDFD);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD JKHL Comma LParen HL RParen End | LD JKHL1 Comma LParen HL RParen End
void Parser::parse_main_action_975() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xFD1A);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD JKHL Comma LParen IX RParen End | LD JKHL1 Comma LParen IX RParen End
void Parser::parse_main_action_976() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xFDCE00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD JKHL Comma LParen IX expr RParen End | LD JKHL1 Comma LParen IX expr RParen End
void Parser::parse_main_action_977() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0xFDCE);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD JKHL Comma LParen IY RParen End | LD JKHL1 Comma LParen IY RParen End
void Parser::parse_main_action_978() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xFDDE00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD JKHL Comma LParen IY expr RParen End | LD JKHL1 Comma LParen IY expr RParen End
void Parser::parse_main_action_979() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0xFDDE);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD JKHL Comma LParen PW Plus HL RParen End | LD JKHL1 Comma LParen PW Plus HL RParen End
void Parser::parse_main_action_980() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xFD0C);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD JKHL Comma LParen PW RParen End | LD JKHL1 Comma LParen PW RParen End
void Parser::parse_main_action_981() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xFD0E00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD JKHL Comma LParen PW expr RParen End | LD JKHL1 Comma LParen PW expr RParen End
void Parser::parse_main_action_982() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0xFD0E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD JKHL Comma LParen PX Plus HL RParen End | LD JKHL1 Comma LParen PX Plus HL RParen End
void Parser::parse_main_action_983() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xFD1C);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD JKHL Comma LParen PX RParen End | LD JKHL1 Comma LParen PX RParen End
void Parser::parse_main_action_984() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xFD1E00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD JKHL Comma LParen PX expr RParen End | LD JKHL1 Comma LParen PX expr RParen End
void Parser::parse_main_action_985() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0xFD1E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD JKHL Comma LParen PY Plus HL RParen End | LD JKHL1 Comma LParen PY Plus HL RParen End
void Parser::parse_main_action_986() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xFD2C);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD JKHL Comma LParen PY RParen End | LD JKHL1 Comma LParen PY RParen End
void Parser::parse_main_action_987() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xFD2E00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD JKHL Comma LParen PY expr RParen End | LD JKHL1 Comma LParen PY expr RParen End
void Parser::parse_main_action_988() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0xFD2E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD JKHL Comma LParen PZ Plus HL RParen End | LD JKHL1 Comma LParen PZ Plus HL RParen End
void Parser::parse_main_action_989() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xFD3C);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD JKHL Comma LParen PZ RParen End | LD JKHL1 Comma LParen PZ RParen End
void Parser::parse_main_action_990() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xFD3E00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD JKHL Comma LParen PZ expr RParen End | LD JKHL1 Comma LParen PZ expr RParen End
void Parser::parse_main_action_991() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0xFD3E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD JKHL Comma LParen SP Plus HL RParen End | LD JKHL1 Comma LParen SP Plus HL RParen End
void Parser::parse_main_action_992() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xFDFE);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD JKHL Comma LParen SP RParen End | LD JKHL1 Comma LParen SP RParen End
void Parser::parse_main_action_993() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xFDEE00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD JKHL Comma LParen SP expr RParen End | LD JKHL1 Comma LParen SP expr RParen End
void Parser::parse_main_action_994() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_n(0xFDEE);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD JKHL Comma expr End | LD JKHL1 Comma expr End
void Parser::parse_main_action_995() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	if (expr_in_parens()) { add_opcode(0x76);
	add_opcode_nn(0x94, 0); } else { add_opcode(0x76);
	add_opcode_s(0xA4); }
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD L Comma A End | LD L1 Comma A End
void Parser::parse_main_action_996() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x6F);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F6F);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD L Comma B End | LD L1 Comma B End
void Parser::parse_main_action_997() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x68);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F68);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD L Comma C End | LD L1 Comma C End
void Parser::parse_main_action_998() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x69);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F69);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD L Comma D End | LD L1 Comma D End
void Parser::parse_main_action_999() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x6A);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F6A);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD L Comma E End | LD L1 Comma E End
void Parser::parse_main_action_1000() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x6B);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F6B);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD L Comma H End | LD L1 Comma H End
void Parser::parse_main_action_1001() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x6C);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F6C);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD L Comma L End | LD L1 Comma L End
void Parser::parse_main_action_1002() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x6D);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F6D);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD L Comma LParen HL Minus RParen End | ALTD LD L Comma LParen HLD RParen End | LD L1 Comma LParen HL Minus RParen End | LD L1 Comma LParen HLD RParen End
void Parser::parse_main_action_1003() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6E);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD L Comma LParen HL Plus RParen End | ALTD LD L Comma LParen HLI RParen End | LD L1 Comma LParen HL Plus RParen End | LD L1 Comma LParen HLI RParen End
void Parser::parse_main_action_1004() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6E);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD L Comma LParen HL RParen End | LD L1 Comma LParen HL RParen End
void Parser::parse_main_action_1005() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD L Comma LParen IX RParen End | LD L1 Comma LParen IX RParen End
void Parser::parse_main_action_1006() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDD6E00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD L Comma LParen IX expr RParen End | LD L1 Comma LParen IX expr RParen End
void Parser::parse_main_action_1007() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0xDD6E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD L Comma LParen IY RParen End | LD L1 Comma LParen IY RParen End
void Parser::parse_main_action_1008() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xFD6E00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD L Comma LParen IY expr RParen End | LD L1 Comma LParen IY expr RParen End
void Parser::parse_main_action_1009() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0xFD6E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD L Comma expr End | LD L1 Comma expr End
void Parser::parse_main_action_1010() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	add_opcode_n(0x2E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PW Comma PW End | LD PW1 Comma PW End
void Parser::parse_main_action_1011() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D07);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PW Comma PW Plus DE End | LD PW1 Comma PW Plus DE End
void Parser::parse_main_action_1012() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D06);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PW Comma PW Plus HL End | LD PW1 Comma PW Plus HL End
void Parser::parse_main_action_1013() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D0E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PW Comma PW Plus IX End | LD PW1 Comma PW Plus IX End
void Parser::parse_main_action_1014() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D04);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PW Comma PW Plus IY End | LD PW1 Comma PW Plus IY End
void Parser::parse_main_action_1015() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D05);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PW Comma PX End | LD PW1 Comma PX End
void Parser::parse_main_action_1016() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D17);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PW Comma PX Plus DE End | LD PW1 Comma PX Plus DE End
void Parser::parse_main_action_1017() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D16);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PW Comma PX Plus HL End | LD PW1 Comma PX Plus HL End
void Parser::parse_main_action_1018() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D1E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PW Comma PX Plus IX End | LD PW1 Comma PX Plus IX End
void Parser::parse_main_action_1019() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D14);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PW Comma PX Plus IY End | LD PW1 Comma PX Plus IY End
void Parser::parse_main_action_1020() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D15);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PW Comma PY End | LD PW1 Comma PY End
void Parser::parse_main_action_1021() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D27);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PW Comma PY Plus DE End | LD PW1 Comma PY Plus DE End
void Parser::parse_main_action_1022() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D26);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PW Comma PY Plus HL End | LD PW1 Comma PY Plus HL End
void Parser::parse_main_action_1023() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D2E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PW Comma PY Plus IX End | LD PW1 Comma PY Plus IX End
void Parser::parse_main_action_1024() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D24);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PW Comma PY Plus IY End | LD PW1 Comma PY Plus IY End
void Parser::parse_main_action_1025() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D25);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PW Comma PZ End | LD PW1 Comma PZ End
void Parser::parse_main_action_1026() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D37);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PW Comma PZ Plus DE End | LD PW1 Comma PZ Plus DE End
void Parser::parse_main_action_1027() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D36);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PW Comma PZ Plus HL End | LD PW1 Comma PZ Plus HL End
void Parser::parse_main_action_1028() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D3E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PW Comma PZ Plus IX End | LD PW1 Comma PZ Plus IX End
void Parser::parse_main_action_1029() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D34);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PW Comma PZ Plus IY End | LD PW1 Comma PZ Plus IY End
void Parser::parse_main_action_1030() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D35);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PW Comma LParen PW Plus HL RParen End | LD PW1 Comma LParen PW Plus HL RParen End
void Parser::parse_main_action_1031() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D0A);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PW Comma LParen PW RParen End | LD PW1 Comma LParen PW RParen End
void Parser::parse_main_action_1032() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D0800);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PW Comma LParen PW expr RParen End | LD PW1 Comma LParen PW expr RParen End
void Parser::parse_main_action_1033() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0x6D08);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PW Comma LParen PX Plus HL RParen End | LD PW1 Comma LParen PX Plus HL RParen End
void Parser::parse_main_action_1034() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D1A);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PW Comma LParen PX RParen End | LD PW1 Comma LParen PX RParen End
void Parser::parse_main_action_1035() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D1800);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PW Comma LParen PX expr RParen End | LD PW1 Comma LParen PX expr RParen End
void Parser::parse_main_action_1036() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0x6D18);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PW Comma LParen PY Plus HL RParen End | LD PW1 Comma LParen PY Plus HL RParen End
void Parser::parse_main_action_1037() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D2A);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PW Comma LParen PY RParen End | LD PW1 Comma LParen PY RParen End
void Parser::parse_main_action_1038() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D2800);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PW Comma LParen PY expr RParen End | LD PW1 Comma LParen PY expr RParen End
void Parser::parse_main_action_1039() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0x6D28);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PW Comma LParen PZ Plus HL RParen End | LD PW1 Comma LParen PZ Plus HL RParen End
void Parser::parse_main_action_1040() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D3A);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PW Comma LParen PZ RParen End | LD PW1 Comma LParen PZ RParen End
void Parser::parse_main_action_1041() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D3800);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PW Comma LParen PZ expr RParen End | LD PW1 Comma LParen PZ expr RParen End
void Parser::parse_main_action_1042() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0x6D38);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PX Comma PW End | LD PX1 Comma PW End
void Parser::parse_main_action_1043() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D47);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PX Comma PW Plus DE End | LD PX1 Comma PW Plus DE End
void Parser::parse_main_action_1044() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D46);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PX Comma PW Plus HL End | LD PX1 Comma PW Plus HL End
void Parser::parse_main_action_1045() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D4E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PX Comma PW Plus IX End | LD PX1 Comma PW Plus IX End
void Parser::parse_main_action_1046() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D44);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PX Comma PW Plus IY End | LD PX1 Comma PW Plus IY End
void Parser::parse_main_action_1047() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D45);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PX Comma PX End | LD PX1 Comma PX End
void Parser::parse_main_action_1048() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D57);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PX Comma PX Plus DE End | LD PX1 Comma PX Plus DE End
void Parser::parse_main_action_1049() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D56);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PX Comma PX Plus HL End | LD PX1 Comma PX Plus HL End
void Parser::parse_main_action_1050() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D5E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PX Comma PX Plus IX End | LD PX1 Comma PX Plus IX End
void Parser::parse_main_action_1051() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D54);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PX Comma PX Plus IY End | LD PX1 Comma PX Plus IY End
void Parser::parse_main_action_1052() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D55);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PX Comma PY End | LD PX1 Comma PY End
void Parser::parse_main_action_1053() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D67);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PX Comma PY Plus DE End | LD PX1 Comma PY Plus DE End
void Parser::parse_main_action_1054() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D66);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PX Comma PY Plus HL End | LD PX1 Comma PY Plus HL End
void Parser::parse_main_action_1055() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D6E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PX Comma PY Plus IX End | LD PX1 Comma PY Plus IX End
void Parser::parse_main_action_1056() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D64);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PX Comma PY Plus IY End | LD PX1 Comma PY Plus IY End
void Parser::parse_main_action_1057() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D65);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PX Comma PZ End | LD PX1 Comma PZ End
void Parser::parse_main_action_1058() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D77);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PX Comma PZ Plus DE End | LD PX1 Comma PZ Plus DE End
void Parser::parse_main_action_1059() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D76);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PX Comma PZ Plus HL End | LD PX1 Comma PZ Plus HL End
void Parser::parse_main_action_1060() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D7E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PX Comma PZ Plus IX End | LD PX1 Comma PZ Plus IX End
void Parser::parse_main_action_1061() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D74);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PX Comma PZ Plus IY End | LD PX1 Comma PZ Plus IY End
void Parser::parse_main_action_1062() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D75);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PX Comma LParen PW Plus HL RParen End | LD PX1 Comma LParen PW Plus HL RParen End
void Parser::parse_main_action_1063() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D4A);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PX Comma LParen PW RParen End | LD PX1 Comma LParen PW RParen End
void Parser::parse_main_action_1064() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D4800);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PX Comma LParen PW expr RParen End | LD PX1 Comma LParen PW expr RParen End
void Parser::parse_main_action_1065() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0x6D48);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PX Comma LParen PX Plus HL RParen End | LD PX1 Comma LParen PX Plus HL RParen End
void Parser::parse_main_action_1066() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D5A);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PX Comma LParen PX RParen End | LD PX1 Comma LParen PX RParen End
void Parser::parse_main_action_1067() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D5800);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PX Comma LParen PX expr RParen End | LD PX1 Comma LParen PX expr RParen End
void Parser::parse_main_action_1068() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0x6D58);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PX Comma LParen PY Plus HL RParen End | LD PX1 Comma LParen PY Plus HL RParen End
void Parser::parse_main_action_1069() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D6A);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PX Comma LParen PY RParen End | LD PX1 Comma LParen PY RParen End
void Parser::parse_main_action_1070() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D6800);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PX Comma LParen PY expr RParen End | LD PX1 Comma LParen PY expr RParen End
void Parser::parse_main_action_1071() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0x6D68);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PX Comma LParen PZ Plus HL RParen End | LD PX1 Comma LParen PZ Plus HL RParen End
void Parser::parse_main_action_1072() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D7A);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PX Comma LParen PZ RParen End | LD PX1 Comma LParen PZ RParen End
void Parser::parse_main_action_1073() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D7800);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PX Comma LParen PZ expr RParen End | LD PX1 Comma LParen PZ expr RParen End
void Parser::parse_main_action_1074() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0x6D78);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PY Comma PW End | LD PY1 Comma PW End
void Parser::parse_main_action_1075() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D87);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PY Comma PW Plus DE End | LD PY1 Comma PW Plus DE End
void Parser::parse_main_action_1076() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D86);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PY Comma PW Plus HL End | LD PY1 Comma PW Plus HL End
void Parser::parse_main_action_1077() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D8E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PY Comma PW Plus IX End | LD PY1 Comma PW Plus IX End
void Parser::parse_main_action_1078() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D84);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PY Comma PW Plus IY End | LD PY1 Comma PW Plus IY End
void Parser::parse_main_action_1079() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D85);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PY Comma PX End | LD PY1 Comma PX End
void Parser::parse_main_action_1080() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D97);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PY Comma PX Plus DE End | LD PY1 Comma PX Plus DE End
void Parser::parse_main_action_1081() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D96);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PY Comma PX Plus HL End | LD PY1 Comma PX Plus HL End
void Parser::parse_main_action_1082() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D9E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PY Comma PX Plus IX End | LD PY1 Comma PX Plus IX End
void Parser::parse_main_action_1083() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D94);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PY Comma PX Plus IY End | LD PY1 Comma PX Plus IY End
void Parser::parse_main_action_1084() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D95);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PY Comma PY End | LD PY1 Comma PY End
void Parser::parse_main_action_1085() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6DA7);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PY Comma PY Plus DE End | LD PY1 Comma PY Plus DE End
void Parser::parse_main_action_1086() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6DA6);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PY Comma PY Plus HL End | LD PY1 Comma PY Plus HL End
void Parser::parse_main_action_1087() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6DAE);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PY Comma PY Plus IX End | LD PY1 Comma PY Plus IX End
void Parser::parse_main_action_1088() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6DA4);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PY Comma PY Plus IY End | LD PY1 Comma PY Plus IY End
void Parser::parse_main_action_1089() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6DA5);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PY Comma PZ End | LD PY1 Comma PZ End
void Parser::parse_main_action_1090() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6DB7);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PY Comma PZ Plus DE End | LD PY1 Comma PZ Plus DE End
void Parser::parse_main_action_1091() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6DB6);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PY Comma PZ Plus HL End | LD PY1 Comma PZ Plus HL End
void Parser::parse_main_action_1092() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6DBE);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PY Comma PZ Plus IX End | LD PY1 Comma PZ Plus IX End
void Parser::parse_main_action_1093() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6DB4);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PY Comma PZ Plus IY End | LD PY1 Comma PZ Plus IY End
void Parser::parse_main_action_1094() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6DB5);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PY Comma LParen PW Plus HL RParen End | LD PY1 Comma LParen PW Plus HL RParen End
void Parser::parse_main_action_1095() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D8A);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PY Comma LParen PW RParen End | LD PY1 Comma LParen PW RParen End
void Parser::parse_main_action_1096() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D8800);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PY Comma LParen PW expr RParen End | LD PY1 Comma LParen PW expr RParen End
void Parser::parse_main_action_1097() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0x6D88);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PY Comma LParen PX Plus HL RParen End | LD PY1 Comma LParen PX Plus HL RParen End
void Parser::parse_main_action_1098() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D9A);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PY Comma LParen PX RParen End | LD PY1 Comma LParen PX RParen End
void Parser::parse_main_action_1099() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6D9800);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PY Comma LParen PX expr RParen End | LD PY1 Comma LParen PX expr RParen End
void Parser::parse_main_action_1100() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0x6D98);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PY Comma LParen PY Plus HL RParen End | LD PY1 Comma LParen PY Plus HL RParen End
void Parser::parse_main_action_1101() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6DAA);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PY Comma LParen PY RParen End | LD PY1 Comma LParen PY RParen End
void Parser::parse_main_action_1102() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6DA800);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PY Comma LParen PY expr RParen End | LD PY1 Comma LParen PY expr RParen End
void Parser::parse_main_action_1103() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0x6DA8);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PY Comma LParen PZ Plus HL RParen End | LD PY1 Comma LParen PZ Plus HL RParen End
void Parser::parse_main_action_1104() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6DBA);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PY Comma LParen PZ RParen End | LD PY1 Comma LParen PZ RParen End
void Parser::parse_main_action_1105() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6DB800);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PY Comma LParen PZ expr RParen End | LD PY1 Comma LParen PZ expr RParen End
void Parser::parse_main_action_1106() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0x6DB8);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PZ Comma PW End | LD PZ1 Comma PW End
void Parser::parse_main_action_1107() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6DC7);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PZ Comma PW Plus DE End | LD PZ1 Comma PW Plus DE End
void Parser::parse_main_action_1108() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6DC6);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PZ Comma PW Plus HL End | LD PZ1 Comma PW Plus HL End
void Parser::parse_main_action_1109() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6DCE);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PZ Comma PW Plus IX End | LD PZ1 Comma PW Plus IX End
void Parser::parse_main_action_1110() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6DC4);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PZ Comma PW Plus IY End | LD PZ1 Comma PW Plus IY End
void Parser::parse_main_action_1111() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6DC5);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PZ Comma PX End | LD PZ1 Comma PX End
void Parser::parse_main_action_1112() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6DD7);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PZ Comma PX Plus DE End | LD PZ1 Comma PX Plus DE End
void Parser::parse_main_action_1113() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6DD6);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PZ Comma PX Plus HL End | LD PZ1 Comma PX Plus HL End
void Parser::parse_main_action_1114() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6DDE);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PZ Comma PX Plus IX End | LD PZ1 Comma PX Plus IX End
void Parser::parse_main_action_1115() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6DD4);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PZ Comma PX Plus IY End | LD PZ1 Comma PX Plus IY End
void Parser::parse_main_action_1116() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6DD5);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PZ Comma PY End | LD PZ1 Comma PY End
void Parser::parse_main_action_1117() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6DE7);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PZ Comma PY Plus DE End | LD PZ1 Comma PY Plus DE End
void Parser::parse_main_action_1118() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6DE6);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PZ Comma PY Plus HL End | LD PZ1 Comma PY Plus HL End
void Parser::parse_main_action_1119() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6DEE);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PZ Comma PY Plus IX End | LD PZ1 Comma PY Plus IX End
void Parser::parse_main_action_1120() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6DE4);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PZ Comma PY Plus IY End | LD PZ1 Comma PY Plus IY End
void Parser::parse_main_action_1121() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6DE5);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PZ Comma PZ End | LD PZ1 Comma PZ End
void Parser::parse_main_action_1122() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6DF7);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PZ Comma PZ Plus DE End | LD PZ1 Comma PZ Plus DE End
void Parser::parse_main_action_1123() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6DF6);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PZ Comma PZ Plus HL End | LD PZ1 Comma PZ Plus HL End
void Parser::parse_main_action_1124() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6DFE);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PZ Comma PZ Plus IX End | LD PZ1 Comma PZ Plus IX End
void Parser::parse_main_action_1125() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6DF4);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PZ Comma PZ Plus IY End | LD PZ1 Comma PZ Plus IY End
void Parser::parse_main_action_1126() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6DF5);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PZ Comma LParen PW Plus HL RParen End | LD PZ1 Comma LParen PW Plus HL RParen End
void Parser::parse_main_action_1127() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6DCA);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PZ Comma LParen PW RParen End | LD PZ1 Comma LParen PW RParen End
void Parser::parse_main_action_1128() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6DC800);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PZ Comma LParen PW expr RParen End | LD PZ1 Comma LParen PW expr RParen End
void Parser::parse_main_action_1129() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0x6DC8);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PZ Comma LParen PX Plus HL RParen End | LD PZ1 Comma LParen PX Plus HL RParen End
void Parser::parse_main_action_1130() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6DDA);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PZ Comma LParen PX RParen End | LD PZ1 Comma LParen PX RParen End
void Parser::parse_main_action_1131() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6DD800);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PZ Comma LParen PX expr RParen End | LD PZ1 Comma LParen PX expr RParen End
void Parser::parse_main_action_1132() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0x6DD8);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PZ Comma LParen PY Plus HL RParen End | LD PZ1 Comma LParen PY Plus HL RParen End
void Parser::parse_main_action_1133() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6DEA);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PZ Comma LParen PY RParen End | LD PZ1 Comma LParen PY RParen End
void Parser::parse_main_action_1134() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6DE800);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PZ Comma LParen PY expr RParen End | LD PZ1 Comma LParen PY expr RParen End
void Parser::parse_main_action_1135() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0x6DE8);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PZ Comma LParen PZ Plus HL RParen End | LD PZ1 Comma LParen PZ Plus HL RParen End
void Parser::parse_main_action_1136() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6DFA);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PZ Comma LParen PZ RParen End | LD PZ1 Comma LParen PZ RParen End
void Parser::parse_main_action_1137() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x6DF800);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LD PZ Comma LParen PZ expr RParen End | LD PZ1 Comma LParen PZ expr RParen End
void Parser::parse_main_action_1138() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0x6DF8);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LDF A Comma expr End | LDF A1 Comma expr End
void Parser::parse_main_action_1139() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0x76);
	add_opcode_nnn(0x9A, 0);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LDF BC Comma expr End | LDF BC1 Comma expr End
void Parser::parse_main_action_1140() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0x76);
	add_opcode_nnn(0xED0A, 0);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LDF BCDE Comma expr End | LDF BCDE1 Comma expr End
void Parser::parse_main_action_1141() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0x76);
	add_opcode_nnn(0xDD0A, 0);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LDF DE Comma expr End | LDF DE1 Comma expr End
void Parser::parse_main_action_1142() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0x76);
	add_opcode_nnn(0xED1A, 0);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LDF HL Comma expr End | LDF HL1 Comma expr End
void Parser::parse_main_action_1143() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0x76);
	add_opcode_nnn(0x92, 0);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LDF JKHL Comma expr End | LDF JKHL1 Comma expr End
void Parser::parse_main_action_1144() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0x76);
	add_opcode_nnn(0xFD0A, 0);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LDF PW Comma expr End | LDF PW1 Comma expr End
void Parser::parse_main_action_1145() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0x76);
	add_opcode_nnn(0xED08, 0);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LDF PX Comma expr End | LDF PX1 Comma expr End
void Parser::parse_main_action_1146() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0x76);
	add_opcode_nnn(0xED18, 0);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LDF PY Comma expr End | LDF PY1 Comma expr End
void Parser::parse_main_action_1147() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0x76);
	add_opcode_nnn(0xED28, 0);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LDF PZ Comma expr End | LDF PZ1 Comma expr End
void Parser::parse_main_action_1148() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0x76);
	add_opcode_nnn(0xED38, 0);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LDL PW Comma DE End | LDL PW1 Comma DE End
void Parser::parse_main_action_1149() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDD8F);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LDL PW Comma HL End | LDL PW1 Comma HL End
void Parser::parse_main_action_1150() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xFD8F);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LDL PW Comma IX End | LDL PW1 Comma IX End
void Parser::parse_main_action_1151() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDD8C);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LDL PW Comma IY End | LDL PW1 Comma IY End
void Parser::parse_main_action_1152() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xFD8C);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LDL PW Comma LParen SP RParen End | LDL PW1 Comma LParen SP RParen End
void Parser::parse_main_action_1153() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xED0300);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LDL PW Comma LParen SP expr RParen End | LDL PW1 Comma LParen SP expr RParen End
void Parser::parse_main_action_1154() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_n(0xED03);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LDL PW Comma expr End | LDL PW1 Comma expr End
void Parser::parse_main_action_1155() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	add_opcode_nn(0xED0D, 0);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LDL PX Comma DE End | LDL PX1 Comma DE End
void Parser::parse_main_action_1156() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDD9F);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LDL PX Comma HL End | LDL PX1 Comma HL End
void Parser::parse_main_action_1157() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xFD9F);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LDL PX Comma IX End | LDL PX1 Comma IX End
void Parser::parse_main_action_1158() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDD9C);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LDL PX Comma IY End | LDL PX1 Comma IY End
void Parser::parse_main_action_1159() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xFD9C);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LDL PX Comma LParen SP RParen End | LDL PX1 Comma LParen SP RParen End
void Parser::parse_main_action_1160() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xED1300);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LDL PX Comma LParen SP expr RParen End | LDL PX1 Comma LParen SP expr RParen End
void Parser::parse_main_action_1161() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_n(0xED13);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LDL PX Comma expr End | LDL PX1 Comma expr End
void Parser::parse_main_action_1162() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	add_opcode_nn(0xED1D, 0);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LDL PY Comma DE End | LDL PY1 Comma DE End
void Parser::parse_main_action_1163() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDDAF);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LDL PY Comma HL End | LDL PY1 Comma HL End
void Parser::parse_main_action_1164() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xFDAF);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LDL PY Comma IX End | LDL PY1 Comma IX End
void Parser::parse_main_action_1165() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDDAC);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LDL PY Comma IY End | LDL PY1 Comma IY End
void Parser::parse_main_action_1166() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xFDAC);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LDL PY Comma LParen SP RParen End | LDL PY1 Comma LParen SP RParen End
void Parser::parse_main_action_1167() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xED2300);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LDL PY Comma LParen SP expr RParen End | LDL PY1 Comma LParen SP expr RParen End
void Parser::parse_main_action_1168() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_n(0xED23);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LDL PY Comma expr End | LDL PY1 Comma expr End
void Parser::parse_main_action_1169() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	add_opcode_nn(0xED2D, 0);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LDL PZ Comma DE End | LDL PZ1 Comma DE End
void Parser::parse_main_action_1170() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDDBF);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LDL PZ Comma HL End | LDL PZ1 Comma HL End
void Parser::parse_main_action_1171() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xFDBF);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LDL PZ Comma IX End | LDL PZ1 Comma IX End
void Parser::parse_main_action_1172() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDDBC);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LDL PZ Comma IY End | LDL PZ1 Comma IY End
void Parser::parse_main_action_1173() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xFDBC);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LDL PZ Comma LParen SP RParen End | LDL PZ1 Comma LParen SP RParen End
void Parser::parse_main_action_1174() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xED3300);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LDL PZ Comma LParen SP expr RParen End | LDL PZ1 Comma LParen SP expr RParen End
void Parser::parse_main_action_1175() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_n(0xED33);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD LDL PZ Comma expr End | LDL PZ1 Comma expr End
void Parser::parse_main_action_1176() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	add_opcode_nn(0xED3D, 0);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD NEG A End | ALTD NEG End | NEG A1 End
void Parser::parse_main_action_1177() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xED44);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD NEG BCDE End | NEG BCDE1 End
void Parser::parse_main_action_1178() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDD4D);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD NEG HL End | NEG HL1 End
void Parser::parse_main_action_1179() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x4D);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD NEG JKHL End | NEG JKHL1 End
void Parser::parse_main_action_1180() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xFD4D);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD OR A Comma A End | ALTD OR A End | OR A1 Comma A End
void Parser::parse_main_action_1181() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7FB7);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xB7);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD OR A Comma B End | ALTD OR B End | OR A1 Comma B End
void Parser::parse_main_action_1182() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7FB0);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xB0);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD OR A Comma C End | ALTD OR C End | OR A1 Comma C End
void Parser::parse_main_action_1183() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7FB1);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xB1);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD OR A Comma D End | ALTD OR D End | OR A1 Comma D End
void Parser::parse_main_action_1184() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7FB2);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xB2);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD OR A Comma E End | ALTD OR E End | OR A1 Comma E End
void Parser::parse_main_action_1185() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7FB3);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xB3);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD OR A Comma H End | ALTD OR H End | OR A1 Comma H End
void Parser::parse_main_action_1186() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7FB4);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xB4);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD OR A Comma L End | ALTD OR L End | OR A1 Comma L End
void Parser::parse_main_action_1187() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7FB5);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xB5);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD OR A Comma LParen HL Minus RParen End | ALTD OR LParen HL Minus RParen End | OR A1 Comma LParen HL Minus RParen End
void Parser::parse_main_action_1188() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7FB6);
	add_opcode(0x2B);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xB6);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD OR A Comma LParen HL Plus RParen End | ALTD OR LParen HL Plus RParen End | OR A1 Comma LParen HL Plus RParen End
void Parser::parse_main_action_1189() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7FB6);
	add_opcode(0x23);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xB6);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD OR A Comma LParen HL RParen End | ALTD OR LParen HL RParen End | OR A1 Comma LParen HL RParen End
void Parser::parse_main_action_1190() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7FB6);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xB6);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD OR A Comma LParen IX RParen End | ALTD OR LParen IX RParen End | OR A1 Comma LParen IX RParen End
void Parser::parse_main_action_1191() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDDB600);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD OR A Comma LParen IX expr RParen End | ALTD OR LParen IX expr RParen End | OR A1 Comma LParen IX expr RParen End
void Parser::parse_main_action_1192() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0xDDB6);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD OR A Comma LParen IY RParen End | ALTD OR LParen IY RParen End | OR A1 Comma LParen IY RParen End
void Parser::parse_main_action_1193() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xFDB600);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD OR A Comma LParen IY expr RParen End | ALTD OR LParen IY expr RParen End | OR A1 Comma LParen IY expr RParen End
void Parser::parse_main_action_1194() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0xFDB6);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD OR A Comma expr End | ALTD OR expr End | OR A1 Comma expr End
void Parser::parse_main_action_1195() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	add_opcode_n(0xF6);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD OR HL Comma DE End | OR HL1 Comma DE End
void Parser::parse_main_action_1196() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xEC);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD OR JKHL Comma BCDE End | OR JKHL1 Comma BCDE End
void Parser::parse_main_action_1197() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xEDF6);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD POP AF End | POP AF1 End
void Parser::parse_main_action_1198() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xF1);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD POP BC End | POP BC1 End
void Parser::parse_main_action_1199() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xC1);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD POP BCDE End | POP BCDE1 End
void Parser::parse_main_action_1200() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDDF1);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD POP DE End | POP DE1 End
void Parser::parse_main_action_1201() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xD1);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD POP HL End | POP HL1 End
void Parser::parse_main_action_1202() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xE1);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD POP JKHL End | POP JKHL1 End
void Parser::parse_main_action_1203() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xFDF1);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD POP PW End | POP PW1 End
void Parser::parse_main_action_1204() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xEDC1);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD POP PX End | POP PX1 End
void Parser::parse_main_action_1205() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xEDD1);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD POP PY End | POP PY1 End
void Parser::parse_main_action_1206() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xEDE1);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD POP PZ End | POP PZ1 End
void Parser::parse_main_action_1207() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xEDF1);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RES const_expr Comma A End | RES const_expr Comma A1 End
void Parser::parse_main_action_1208() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCB87+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RES const_expr Comma B End | RES const_expr Comma B1 End
void Parser::parse_main_action_1209() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCB80+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RES const_expr Comma C End | RES const_expr Comma C1 End
void Parser::parse_main_action_1210() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCB81+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RES const_expr Comma D End | RES const_expr Comma D1 End
void Parser::parse_main_action_1211() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCB82+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RES const_expr Comma E End | RES const_expr Comma E1 End
void Parser::parse_main_action_1212() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCB83+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RES const_expr Comma H End | RES const_expr Comma H1 End
void Parser::parse_main_action_1213() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCB84+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RES const_expr Comma L End | RES const_expr Comma L1 End
void Parser::parse_main_action_1214() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCB85+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RL A End | RL A1 End
void Parser::parse_main_action_1215() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xCB17);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RL B End | RL B1 End
void Parser::parse_main_action_1216() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xCB10);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RL BC End | RL BC1 End
void Parser::parse_main_action_1217() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x62);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RL C End | RL C1 End
void Parser::parse_main_action_1218() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xCB11);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RL D End | RL D1 End
void Parser::parse_main_action_1219() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xCB12);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RL DE End | RL DE1 End
void Parser::parse_main_action_1220() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xF3);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RL E End | RL E1 End
void Parser::parse_main_action_1221() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xCB13);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RL H End | RL H1 End
void Parser::parse_main_action_1222() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xCB14);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RL HL End | RL HL1 End
void Parser::parse_main_action_1223() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x42);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RL L End | RL L1 End
void Parser::parse_main_action_1224() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xCB15);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RL LParen HL RParen End
void Parser::parse_main_action_1225() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xCB16);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RL LParen IX RParen End
void Parser::parse_main_action_1226() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDDCB0016);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RL LParen IX expr RParen End
void Parser::parse_main_action_1227() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0xDDCB16);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RL LParen IY RParen End
void Parser::parse_main_action_1228() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xFDCB0016);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RL LParen IY expr RParen End
void Parser::parse_main_action_1229() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0xFDCB16);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RL const_expr Comma BCDE End | RL const_expr Comma BCDE1 End
void Parser::parse_main_action_1230() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 1: case 2: case 4: break;
	default: error_int_range(const_expr); }
	add_opcode(0xDD00+((const_expr==1?0x68:const_expr==2?0x69:const_expr==4?0x6B:0x6F)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RL const_expr Comma JKHL End | RL const_expr Comma JKHL1 End
void Parser::parse_main_action_1231() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 1: case 2: case 4: break;
	default: error_int_range(const_expr); }
	add_opcode(0xFD00+((const_expr==1?0x68:const_expr==2?0x69:const_expr==4?0x6B:0x6F)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RLA End | RLA1 End
void Parser::parse_main_action_1232() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x17);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RLC A End | RLC A1 End
void Parser::parse_main_action_1233() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xCB07);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RLC B End | RLC B1 End
void Parser::parse_main_action_1234() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xCB00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RLC BC End | RLC BC1 End
void Parser::parse_main_action_1235() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x60);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RLC C End | RLC C1 End
void Parser::parse_main_action_1236() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xCB01);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RLC D End | RLC D1 End
void Parser::parse_main_action_1237() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xCB02);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RLC DE End | RLC DE1 End
void Parser::parse_main_action_1238() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x50);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RLC E End | RLC E1 End
void Parser::parse_main_action_1239() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xCB03);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RLC H End | RLC H1 End
void Parser::parse_main_action_1240() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xCB04);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RLC L End | RLC L1 End
void Parser::parse_main_action_1241() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xCB05);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RLC LParen HL RParen End
void Parser::parse_main_action_1242() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xCB06);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RLC LParen IX RParen End
void Parser::parse_main_action_1243() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDDCB0006);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RLC LParen IX expr RParen End
void Parser::parse_main_action_1244() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0xDDCB06);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RLC LParen IY RParen End
void Parser::parse_main_action_1245() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xFDCB0006);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RLC LParen IY expr RParen End
void Parser::parse_main_action_1246() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0xFDCB06);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RLC const_expr Comma BCDE End | RLC const_expr Comma BCDE1 End
void Parser::parse_main_action_1247() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 1: case 2: case 4: break;
	default: error_int_range(const_expr); }
	add_opcode(0xDD00+((const_expr==1?0x48:const_expr==2?0x49:const_expr==4?0x4B:0x4F)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RLC const_expr Comma JKHL End | RLC const_expr Comma JKHL1 End
void Parser::parse_main_action_1248() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 1: case 2: case 4: break;
	default: error_int_range(const_expr); }
	add_opcode(0xFD00+((const_expr==1?0x48:const_expr==2?0x49:const_expr==4?0x4B:0x4F)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RLCA End | RLCA1 End
void Parser::parse_main_action_1249() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x07);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RR A End | RR A1 End
void Parser::parse_main_action_1250() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xCB1F);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RR B End | RR B1 End
void Parser::parse_main_action_1251() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xCB18);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RR BC End | RR BC1 End
void Parser::parse_main_action_1252() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x63);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RR C End | RR C1 End
void Parser::parse_main_action_1253() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xCB19);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RR D End | RR D1 End
void Parser::parse_main_action_1254() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xCB1A);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RR DE End | RR DE1 End
void Parser::parse_main_action_1255() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xFB);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RR E End | RR E1 End
void Parser::parse_main_action_1256() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xCB1B);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RR H End | RR H1 End
void Parser::parse_main_action_1257() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xCB1C);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RR HL End | RR HL1 End
void Parser::parse_main_action_1258() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xFC);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RR L End | RR L1 End
void Parser::parse_main_action_1259() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xCB1D);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RR LParen HL RParen End
void Parser::parse_main_action_1260() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xCB1E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RR LParen IX RParen End
void Parser::parse_main_action_1261() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDDCB001E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RR LParen IX expr RParen End
void Parser::parse_main_action_1262() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0xDDCB1E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RR LParen IY RParen End
void Parser::parse_main_action_1263() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xFDCB001E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RR LParen IY expr RParen End
void Parser::parse_main_action_1264() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0xFDCB1E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RR const_expr Comma BCDE End | RR const_expr Comma BCDE1 End
void Parser::parse_main_action_1265() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 1: case 2: case 4: break;
	default: error_int_range(const_expr); }
	add_opcode(0xDD00+((const_expr==1?0x78:const_expr==2?0x79:const_expr==4?0x7B:0x7F)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RR const_expr Comma JKHL End | RR const_expr Comma JKHL1 End
void Parser::parse_main_action_1266() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 1: case 2: case 4: break;
	default: error_int_range(const_expr); }
	add_opcode(0xFD00+((const_expr==1?0x78:const_expr==2?0x79:const_expr==4?0x7B:0x7F)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RRA End | RRA1 End
void Parser::parse_main_action_1267() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x1F);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RRC A End | RRC A1 End
void Parser::parse_main_action_1268() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xCB0F);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RRC B End | RRC B1 End
void Parser::parse_main_action_1269() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xCB08);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RRC BC End | RRC BC1 End
void Parser::parse_main_action_1270() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x61);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RRC C End | RRC C1 End
void Parser::parse_main_action_1271() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xCB09);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RRC D End | RRC D1 End
void Parser::parse_main_action_1272() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xCB0A);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RRC DE End | RRC DE1 End
void Parser::parse_main_action_1273() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x51);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RRC E End | RRC E1 End
void Parser::parse_main_action_1274() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xCB0B);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RRC H End | RRC H1 End
void Parser::parse_main_action_1275() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xCB0C);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RRC L End | RRC L1 End
void Parser::parse_main_action_1276() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xCB0D);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RRC LParen HL RParen End
void Parser::parse_main_action_1277() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xCB0E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RRC LParen IX RParen End
void Parser::parse_main_action_1278() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDDCB000E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RRC LParen IX expr RParen End
void Parser::parse_main_action_1279() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0xDDCB0E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RRC LParen IY RParen End
void Parser::parse_main_action_1280() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xFDCB000E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RRC LParen IY expr RParen End
void Parser::parse_main_action_1281() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0xFDCB0E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RRC const_expr Comma BCDE End | RRC const_expr Comma BCDE1 End
void Parser::parse_main_action_1282() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 1: case 2: case 4: break;
	default: error_int_range(const_expr); }
	add_opcode(0xDD00+((const_expr==1?0x58:const_expr==2?0x59:const_expr==4?0x5B:0x5F)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RRC const_expr Comma JKHL End | RRC const_expr Comma JKHL1 End
void Parser::parse_main_action_1283() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 1: case 2: case 4: break;
	default: error_int_range(const_expr); }
	add_opcode(0xFD00+((const_expr==1?0x58:const_expr==2?0x59:const_expr==4?0x5B:0x5F)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// ALTD RRCA End | RRCA1 End
void Parser::parse_main_action_1284() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x0F);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SBC A Comma A End | ALTD SBC A End | SBC A1 Comma A End
void Parser::parse_main_action_1285() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F9F);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x9F);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SBC A Comma B End | ALTD SBC B End | SBC A1 Comma B End
void Parser::parse_main_action_1286() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F98);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x98);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SBC A Comma C End | ALTD SBC C End | SBC A1 Comma C End
void Parser::parse_main_action_1287() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F99);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x99);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SBC A Comma D End | ALTD SBC D End | SBC A1 Comma D End
void Parser::parse_main_action_1288() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F9A);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x9A);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SBC A Comma E End | ALTD SBC E End | SBC A1 Comma E End
void Parser::parse_main_action_1289() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F9B);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x9B);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SBC A Comma H End | ALTD SBC H End | SBC A1 Comma H End
void Parser::parse_main_action_1290() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F9C);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x9C);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SBC A Comma L End | ALTD SBC L End | SBC A1 Comma L End
void Parser::parse_main_action_1291() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F9D);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x9D);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SBC A Comma LParen HL Minus RParen End | ALTD SBC LParen HL Minus RParen End | SBC A1 Comma LParen HL Minus RParen End
void Parser::parse_main_action_1292() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F9E);
	add_opcode(0x2B);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x9E);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SBC A Comma LParen HL Plus RParen End | ALTD SBC LParen HL Plus RParen End | SBC A1 Comma LParen HL Plus RParen End
void Parser::parse_main_action_1293() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F9E);
	add_opcode(0x23);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x9E);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SBC A Comma LParen HL RParen End | ALTD SBC LParen HL RParen End | SBC A1 Comma LParen HL RParen End
void Parser::parse_main_action_1294() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F9E);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x9E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SBC A Comma LParen IX RParen End | ALTD SBC LParen IX RParen End | SBC A1 Comma LParen IX RParen End
void Parser::parse_main_action_1295() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDD9E00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SBC A Comma LParen IX expr RParen End | ALTD SBC LParen IX expr RParen End | SBC A1 Comma LParen IX expr RParen End
void Parser::parse_main_action_1296() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0xDD9E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SBC A Comma LParen IY RParen End | ALTD SBC LParen IY RParen End | SBC A1 Comma LParen IY RParen End
void Parser::parse_main_action_1297() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xFD9E00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SBC A Comma LParen IY expr RParen End | ALTD SBC LParen IY expr RParen End | SBC A1 Comma LParen IY expr RParen End
void Parser::parse_main_action_1298() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0xFD9E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SBC A Comma expr End | ALTD SBC expr End | SBC A1 Comma expr End
void Parser::parse_main_action_1299() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	add_opcode_n(0xDE);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SBC HL Comma BC End | SBC HL1 Comma BC End
void Parser::parse_main_action_1300() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xED42);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SBC HL Comma DE End | SBC HL1 Comma DE End
void Parser::parse_main_action_1301() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xED52);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SBC HL Comma HL End | SBC HL1 Comma HL End
void Parser::parse_main_action_1302() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xED62);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SBC HL Comma SP End | SBC HL1 Comma SP End
void Parser::parse_main_action_1303() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xED72);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SBOX A End | SBOX A1 End
void Parser::parse_main_action_1304() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xED02);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SCF End | SCF1 End
void Parser::parse_main_action_1305() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x37);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SET const_expr Comma A End | SET const_expr Comma A1 End
void Parser::parse_main_action_1306() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCBC7+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SET const_expr Comma B End | SET const_expr Comma B1 End
void Parser::parse_main_action_1307() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCBC0+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SET const_expr Comma C End | SET const_expr Comma C1 End
void Parser::parse_main_action_1308() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCBC1+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SET const_expr Comma D End | SET const_expr Comma D1 End
void Parser::parse_main_action_1309() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCBC2+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SET const_expr Comma E End | SET const_expr Comma E1 End
void Parser::parse_main_action_1310() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCBC3+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SET const_expr Comma H End | SET const_expr Comma H1 End
void Parser::parse_main_action_1311() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCBC4+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SET const_expr Comma L End | SET const_expr Comma L1 End
void Parser::parse_main_action_1312() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCBC5+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SLA A End | SLA A1 End
void Parser::parse_main_action_1313() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xCB27);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SLA B End | SLA B1 End
void Parser::parse_main_action_1314() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xCB20);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SLA C End | SLA C1 End
void Parser::parse_main_action_1315() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xCB21);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SLA D End | SLA D1 End
void Parser::parse_main_action_1316() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xCB22);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SLA E End | SLA E1 End
void Parser::parse_main_action_1317() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xCB23);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SLA H End | SLA H1 End
void Parser::parse_main_action_1318() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xCB24);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SLA L End | SLA L1 End
void Parser::parse_main_action_1319() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xCB25);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SLA LParen HL RParen End
void Parser::parse_main_action_1320() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xCB26);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SLA LParen IX RParen End
void Parser::parse_main_action_1321() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDDCB0026);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SLA LParen IX expr RParen End
void Parser::parse_main_action_1322() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0xDDCB26);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SLA LParen IY RParen End
void Parser::parse_main_action_1323() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xFDCB0026);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SLA LParen IY expr RParen End
void Parser::parse_main_action_1324() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0xFDCB26);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SLA const_expr Comma BCDE End | SLA const_expr Comma BCDE1 End
void Parser::parse_main_action_1325() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 1: case 2: case 4: break;
	default: error_int_range(const_expr); }
	add_opcode(0xDD00+((const_expr==1?0x88:const_expr==2?0x89:const_expr==4?0x8B:0x8F)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SLA const_expr Comma JKHL End | SLA const_expr Comma JKHL1 End
void Parser::parse_main_action_1326() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 1: case 2: case 4: break;
	default: error_int_range(const_expr); }
	add_opcode(0xFD00+((const_expr==1?0x88:const_expr==2?0x89:const_expr==4?0x8B:0x8F)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SLL const_expr Comma BCDE End | SLL const_expr Comma BCDE1 End
void Parser::parse_main_action_1327() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 1: case 2: case 4: break;
	default: error_int_range(const_expr); }
	add_opcode(0xDD00+((const_expr==1?0xA8:const_expr==2?0xA9:const_expr==4?0xAB:0xAF)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SLL const_expr Comma JKHL End | SLL const_expr Comma JKHL1 End
void Parser::parse_main_action_1328() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 1: case 2: case 4: break;
	default: error_int_range(const_expr); }
	add_opcode(0xFD00+((const_expr==1?0xA8:const_expr==2?0xA9:const_expr==4?0xAB:0xAF)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SRA A End | SRA A1 End
void Parser::parse_main_action_1329() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xCB2F);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SRA B End | SRA B1 End
void Parser::parse_main_action_1330() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xCB28);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SRA C End | SRA C1 End
void Parser::parse_main_action_1331() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xCB29);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SRA D End | SRA D1 End
void Parser::parse_main_action_1332() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xCB2A);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SRA E End | SRA E1 End
void Parser::parse_main_action_1333() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xCB2B);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SRA H End | SRA H1 End
void Parser::parse_main_action_1334() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xCB2C);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SRA L End | SRA L1 End
void Parser::parse_main_action_1335() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xCB2D);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SRA LParen HL RParen End
void Parser::parse_main_action_1336() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xCB2E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SRA LParen IX RParen End
void Parser::parse_main_action_1337() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDDCB002E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SRA LParen IX expr RParen End
void Parser::parse_main_action_1338() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0xDDCB2E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SRA LParen IY RParen End
void Parser::parse_main_action_1339() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xFDCB002E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SRA LParen IY expr RParen End
void Parser::parse_main_action_1340() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0xFDCB2E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SRA const_expr Comma BCDE End | SRA const_expr Comma BCDE1 End
void Parser::parse_main_action_1341() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 1: case 2: case 4: break;
	default: error_int_range(const_expr); }
	add_opcode(0xDD00+((const_expr==1?0x98:const_expr==2?0x99:const_expr==4?0x9B:0x9F)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SRA const_expr Comma JKHL End | SRA const_expr Comma JKHL1 End
void Parser::parse_main_action_1342() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 1: case 2: case 4: break;
	default: error_int_range(const_expr); }
	add_opcode(0xFD00+((const_expr==1?0x98:const_expr==2?0x99:const_expr==4?0x9B:0x9F)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SRL A End | SRL A1 End
void Parser::parse_main_action_1343() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xCB3F);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SRL B End | SRL B1 End
void Parser::parse_main_action_1344() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xCB38);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SRL C End | SRL C1 End
void Parser::parse_main_action_1345() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xCB39);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SRL D End | SRL D1 End
void Parser::parse_main_action_1346() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xCB3A);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SRL E End | SRL E1 End
void Parser::parse_main_action_1347() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xCB3B);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SRL H End | SRL H1 End
void Parser::parse_main_action_1348() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xCB3C);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SRL L End | SRL L1 End
void Parser::parse_main_action_1349() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xCB3D);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SRL LParen HL RParen End
void Parser::parse_main_action_1350() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xCB3E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SRL LParen IX RParen End
void Parser::parse_main_action_1351() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDDCB003E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SRL LParen IX expr RParen End
void Parser::parse_main_action_1352() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0xDDCB3E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SRL LParen IY RParen End
void Parser::parse_main_action_1353() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xFDCB003E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SRL LParen IY expr RParen End
void Parser::parse_main_action_1354() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0xFDCB3E);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SRL const_expr Comma BCDE End | SRL const_expr Comma BCDE1 End
void Parser::parse_main_action_1355() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 1: case 2: case 4: break;
	default: error_int_range(const_expr); }
	add_opcode(0xDD00+((const_expr==1?0xB8:const_expr==2?0xB9:const_expr==4?0xBB:0xBF)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SRL const_expr Comma JKHL End | SRL const_expr Comma JKHL1 End
void Parser::parse_main_action_1356() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 1: case 2: case 4: break;
	default: error_int_range(const_expr); }
	add_opcode(0xFD00+((const_expr==1?0xB8:const_expr==2?0xB9:const_expr==4?0xBB:0xBF)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SUB A Comma A End | ALTD SUB A End | SUB A1 Comma A End
void Parser::parse_main_action_1357() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F97);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x97);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SUB A Comma B End | ALTD SUB B End | SUB A1 Comma B End
void Parser::parse_main_action_1358() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F90);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x90);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SUB A Comma C End | ALTD SUB C End | SUB A1 Comma C End
void Parser::parse_main_action_1359() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F91);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x91);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SUB A Comma D End | ALTD SUB D End | SUB A1 Comma D End
void Parser::parse_main_action_1360() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F92);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x92);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SUB A Comma E End | ALTD SUB E End | SUB A1 Comma E End
void Parser::parse_main_action_1361() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F93);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x93);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SUB A Comma H End | ALTD SUB H End | SUB A1 Comma H End
void Parser::parse_main_action_1362() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F94);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x94);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SUB A Comma L End | ALTD SUB L End | SUB A1 Comma L End
void Parser::parse_main_action_1363() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F95);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x95);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SUB A Comma LParen HL Minus RParen End | ALTD SUB LParen HL Minus RParen End | SUB A1 Comma LParen HL Minus RParen End
void Parser::parse_main_action_1364() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F96);
	add_opcode(0x2B);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x96);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SUB A Comma LParen HL Plus RParen End | ALTD SUB LParen HL Plus RParen End | SUB A1 Comma LParen HL Plus RParen End
void Parser::parse_main_action_1365() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F96);
	add_opcode(0x23);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x96);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SUB A Comma LParen HL RParen End | ALTD SUB LParen HL RParen End | SUB A1 Comma LParen HL RParen End
void Parser::parse_main_action_1366() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7F96);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0x96);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SUB A Comma LParen IX RParen End | ALTD SUB LParen IX RParen End | SUB A1 Comma LParen IX RParen End
void Parser::parse_main_action_1367() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDD9600);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SUB A Comma LParen IX expr RParen End | ALTD SUB LParen IX expr RParen End | SUB A1 Comma LParen IX expr RParen End
void Parser::parse_main_action_1368() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0xDD96);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SUB A Comma LParen IY RParen End | ALTD SUB LParen IY RParen End | SUB A1 Comma LParen IY RParen End
void Parser::parse_main_action_1369() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xFD9600);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SUB A Comma LParen IY expr RParen End | ALTD SUB LParen IY expr RParen End | SUB A1 Comma LParen IY expr RParen End
void Parser::parse_main_action_1370() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0xFD96);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SUB A Comma expr End | ALTD SUB expr End | SUB A1 Comma expr End
void Parser::parse_main_action_1371() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	add_opcode_n(0xD6);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SUB HL Comma DE End | SUB HL1 Comma DE End
void Parser::parse_main_action_1372() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x55);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SUB HL Comma JK End | SUB HL1 Comma JK End
void Parser::parse_main_action_1373() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x45);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD SUB JKHL Comma BCDE End | SUB JKHL1 Comma BCDE End
void Parser::parse_main_action_1374() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xEDD6);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD TEST BC End
void Parser::parse_main_action_1375() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xED4C);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD TEST BCDE End
void Parser::parse_main_action_1376() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDD5C);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD TEST HL End
void Parser::parse_main_action_1377() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x4C);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD TEST IX End
void Parser::parse_main_action_1378() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDD4C);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD TEST IY End
void Parser::parse_main_action_1379() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xFD4C);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD TEST JKHL End
void Parser::parse_main_action_1380() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xFD5C);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD XOR A Comma A End | ALTD XOR A End | XOR A1 Comma A End
void Parser::parse_main_action_1381() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7FAF);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xAF);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD XOR A Comma B End | ALTD XOR B End | XOR A1 Comma B End
void Parser::parse_main_action_1382() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7FA8);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xA8);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD XOR A Comma C End | ALTD XOR C End | XOR A1 Comma C End
void Parser::parse_main_action_1383() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7FA9);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xA9);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD XOR A Comma D End | ALTD XOR D End | XOR A1 Comma D End
void Parser::parse_main_action_1384() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7FAA);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xAA);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD XOR A Comma E End | ALTD XOR E End | XOR A1 Comma E End
void Parser::parse_main_action_1385() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7FAB);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xAB);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD XOR A Comma H End | ALTD XOR H End | XOR A1 Comma H End
void Parser::parse_main_action_1386() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7FAC);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xAC);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD XOR A Comma L End | ALTD XOR L End | XOR A1 Comma L End
void Parser::parse_main_action_1387() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7FAD);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xAD);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD XOR A Comma LParen HL Minus RParen End | ALTD XOR LParen HL Minus RParen End | XOR A1 Comma LParen HL Minus RParen End
void Parser::parse_main_action_1388() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7FAE);
	add_opcode(0x2B);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xAE);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD XOR A Comma LParen HL Plus RParen End | ALTD XOR LParen HL Plus RParen End | XOR A1 Comma LParen HL Plus RParen End
void Parser::parse_main_action_1389() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7FAE);
	add_opcode(0x23);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xAE);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD XOR A Comma LParen HL RParen End | ALTD XOR LParen HL RParen End | XOR A1 Comma LParen HL RParen End
void Parser::parse_main_action_1390() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x7FAE);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0x76);
	add_opcode(0xAE);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD XOR A Comma LParen IX RParen End | ALTD XOR LParen IX RParen End | XOR A1 Comma LParen IX RParen End
void Parser::parse_main_action_1391() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xDDAE00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD XOR A Comma LParen IX expr RParen End | ALTD XOR LParen IX expr RParen End | XOR A1 Comma LParen IX expr RParen End
void Parser::parse_main_action_1392() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0xDDAE);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD XOR A Comma LParen IY RParen End | ALTD XOR LParen IY RParen End | XOR A1 Comma LParen IY RParen End
void Parser::parse_main_action_1393() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xFDAE00);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD XOR A Comma LParen IY expr RParen End | ALTD XOR LParen IY expr RParen End | XOR A1 Comma LParen IY expr RParen End
void Parser::parse_main_action_1394() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode_idx(0xFDAE);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD XOR A Comma expr End | ALTD XOR expr End | XOR A1 Comma expr End
void Parser::parse_main_action_1395() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0x76);
	add_opcode_n(0xEE);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD XOR HL Comma DE End | XOR HL1 Comma DE End
void Parser::parse_main_action_1396() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0x54);
	break;
	default:
	error_illegal_ident(); }
}

// ALTD XOR JKHL Comma BCDE End | XOR JKHL1 Comma BCDE End
void Parser::parse_main_action_1397() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x76);
	add_opcode(0xEDEE);
	break;
	default:
	error_illegal_ident(); }
}

// ANA A End | AND A Comma A End | AND A End
void Parser::parse_main_action_1398() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7FA7);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xA7);
	break;
	default:
	error_illegal_ident(); }
}

// ANA B End | AND A Comma B End | AND B End
void Parser::parse_main_action_1399() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7FA0);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xA0);
	break;
	default:
	error_illegal_ident(); }
}

// ANA C End | AND A Comma C End | AND C End
void Parser::parse_main_action_1400() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7FA1);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xA1);
	break;
	default:
	error_illegal_ident(); }
}

// ANA D End | AND A Comma D End | AND D End
void Parser::parse_main_action_1401() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7FA2);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xA2);
	break;
	default:
	error_illegal_ident(); }
}

// ANA E End | AND A Comma E End | AND E End
void Parser::parse_main_action_1402() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7FA3);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xA3);
	break;
	default:
	error_illegal_ident(); }
}

// ANA H End | AND A Comma H End | AND H End
void Parser::parse_main_action_1403() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7FA4);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xA4);
	break;
	default:
	error_illegal_ident(); }
}

// ANA L End | AND A Comma L End | AND L End
void Parser::parse_main_action_1404() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7FA5);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xA5);
	break;
	default:
	error_illegal_ident(); }
}

// ANA M End | AND A Comma LParen HL RParen End | AND LParen HL RParen End
void Parser::parse_main_action_1405() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7FA6);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xA6);
	break;
	default:
	error_illegal_ident(); }
}

// AND A Comma IXH End | AND IXH End
void Parser::parse_main_action_1406() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDDA4);
	break;
	default:
	error_illegal_ident(); }
}

// AND A Comma IXL End | AND IXL End
void Parser::parse_main_action_1407() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDDA5);
	break;
	default:
	error_illegal_ident(); }
}

// AND A Comma IYH End | AND IYH End
void Parser::parse_main_action_1408() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFDA4);
	break;
	default:
	error_illegal_ident(); }
}

// AND A Comma IYL End | AND IYL End
void Parser::parse_main_action_1409() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFDA5);
	break;
	default:
	error_illegal_ident(); }
}

// AND A Comma LParen AHL RParen End | AND LParen AHL RParen End
void Parser::parse_main_action_1410() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xA6);
	break;
	default:
	error_illegal_ident(); }
}

// AND A Comma LParen AIX RParen End | AND LParen AIX RParen End
void Parser::parse_main_action_1411() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xDDA600);
	break;
	default:
	error_illegal_ident(); }
}

// AND A Comma LParen AIX expr RParen End | AND LParen AIX expr RParen End
void Parser::parse_main_action_1412() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xDDA6);
	break;
	default:
	error_illegal_ident(); }
}

// AND A Comma LParen AIY RParen End | AND LParen AIY RParen End
void Parser::parse_main_action_1413() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xFDA600);
	break;
	default:
	error_illegal_ident(); }
}

// AND A Comma LParen AIY expr RParen End | AND LParen AIY expr RParen End
void Parser::parse_main_action_1414() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xFDA6);
	break;
	default:
	error_illegal_ident(); }
}

// AND A Comma LParen HL Minus RParen End | AND LParen HL Minus RParen End
void Parser::parse_main_action_1415() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7FA6);
	add_opcode(0x2B);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xA6);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// AND A Comma LParen HL Plus RParen End | AND LParen HL Plus RParen End
void Parser::parse_main_action_1416() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7FA6);
	add_opcode(0x23);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xA6);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// AND A Comma LParen IX RParen End | AND LParen IX RParen End
void Parser::parse_main_action_1417() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xDDA600);
	break;
	default:
	error_illegal_ident(); }
}

// AND A Comma LParen IX expr RParen End | AND LParen IX expr RParen End
void Parser::parse_main_action_1418() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx(0xDDA6);
	break;
	default:
	error_illegal_ident(); }
}

// AND A Comma LParen IY RParen End | AND LParen IY RParen End
void Parser::parse_main_action_1419() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xFDA600);
	break;
	default:
	error_illegal_ident(); }
}

// AND A Comma LParen IY expr RParen End | AND LParen IY expr RParen End
void Parser::parse_main_action_1420() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx(0xFDA6);
	break;
	default:
	error_illegal_ident(); }
}

// AND A Comma LParen PHL RParen End | AND LParen PHL RParen End
void Parser::parse_main_action_1421() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xA6);
	break;
	default:
	error_illegal_ident(); }
}

// AND A Comma LParen PIX RParen End | AND LParen PIX RParen End
void Parser::parse_main_action_1422() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xDDA600);
	break;
	default:
	error_illegal_ident(); }
}

// AND A Comma LParen PIX expr RParen End | AND LParen PIX expr RParen End
void Parser::parse_main_action_1423() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xDDA6);
	break;
	default:
	error_illegal_ident(); }
}

// AND A Comma LParen PIY RParen End | AND LParen PIY RParen End
void Parser::parse_main_action_1424() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xFDA600);
	break;
	default:
	error_illegal_ident(); }
}

// AND A Comma LParen PIY expr RParen End | AND LParen PIY expr RParen End
void Parser::parse_main_action_1425() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xFDA6);
	break;
	default:
	error_illegal_ident(); }
}

// AND A Comma LParen XHL RParen End | AND LParen XHL RParen End
void Parser::parse_main_action_1426() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xA6);
	break;
	default:
	error_illegal_ident(); }
}

// AND A Comma LParen XIX RParen End | AND LParen XIX RParen End
void Parser::parse_main_action_1427() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xDDA600);
	break;
	default:
	error_illegal_ident(); }
}

// AND A Comma LParen XIX expr RParen End | AND LParen XIX expr RParen End
void Parser::parse_main_action_1428() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xDDA6);
	break;
	default:
	error_illegal_ident(); }
}

// AND A Comma LParen XIY RParen End | AND LParen XIY RParen End
void Parser::parse_main_action_1429() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xFDA600);
	break;
	default:
	error_illegal_ident(); }
}

// AND A Comma LParen XIY expr RParen End | AND LParen XIY expr RParen End
void Parser::parse_main_action_1430() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xFDA6);
	break;
	default:
	error_illegal_ident(); }
}

// AND A Comma LParen YHL RParen End | AND LParen YHL RParen End
void Parser::parse_main_action_1431() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xA6);
	break;
	default:
	error_illegal_ident(); }
}

// AND A Comma LParen YIX RParen End | AND LParen YIX RParen End
void Parser::parse_main_action_1432() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xDDA600);
	break;
	default:
	error_illegal_ident(); }
}

// AND A Comma LParen YIX expr RParen End | AND LParen YIX expr RParen End
void Parser::parse_main_action_1433() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xDDA6);
	break;
	default:
	error_illegal_ident(); }
}

// AND A Comma LParen YIY RParen End | AND LParen YIY RParen End
void Parser::parse_main_action_1434() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xFDA600);
	break;
	default:
	error_illegal_ident(); }
}

// AND A Comma LParen YIY expr RParen End | AND LParen YIY expr RParen End
void Parser::parse_main_action_1435() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xFDA6);
	break;
	default:
	error_illegal_ident(); }
}

// AND A Comma LParen ZHL RParen End | AND LParen ZHL RParen End
void Parser::parse_main_action_1436() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xA6);
	break;
	default:
	error_illegal_ident(); }
}

// AND A Comma LParen ZIX RParen End | AND LParen ZIX RParen End
void Parser::parse_main_action_1437() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xDDA600);
	break;
	default:
	error_illegal_ident(); }
}

// AND A Comma LParen ZIX expr RParen End | AND LParen ZIX expr RParen End
void Parser::parse_main_action_1438() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xDDA6);
	break;
	default:
	error_illegal_ident(); }
}

// AND A Comma LParen ZIY RParen End | AND LParen ZIY RParen End
void Parser::parse_main_action_1439() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xFDA600);
	break;
	default:
	error_illegal_ident(); }
}

// AND A Comma LParen ZIY expr RParen End | AND LParen ZIY expr RParen End
void Parser::parse_main_action_1440() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xFDA6);
	break;
	default:
	error_illegal_ident(); }
}

// AND A Comma expr End | AND expr End | ANI expr End
void Parser::parse_main_action_1441() {
	warn_if_expr_in_parens();
	add_opcode_n(0xE6);
}

// AND HL Comma BC End
void Parser::parse_main_action_1442() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xF5);
	add_opcode(0x7C);
	add_opcode(0xA0);
	add_opcode(0x67);
	add_opcode(0x7D);
	add_opcode(0xA1);
	add_opcode(0x6F);
	add_opcode(0xF1);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xF5);
	add_opcode(0x7F7C);
	add_opcode(0x7FA0);
	add_opcode(0x7F67);
	add_opcode(0x7F7D);
	add_opcode(0x7FA1);
	add_opcode(0x7F6F);
	add_opcode(0xF1);
	break;
	default:
	error_illegal_ident(); }
}

// AND HL Comma DE End
void Parser::parse_main_action_1443() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDC);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xF5);
	add_opcode(0x7C);
	add_opcode(0xA2);
	add_opcode(0x67);
	add_opcode(0x7D);
	add_opcode(0xA3);
	add_opcode(0x6F);
	add_opcode(0xF1);
	break;
	default:
	error_illegal_ident(); }
}

// AND IX Comma BC End
void Parser::parse_main_action_1444() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xF5);
	add_opcode(0xDD7C);
	add_opcode(0xA0);
	add_opcode(0xDD67);
	add_opcode(0xDD7D);
	add_opcode(0xA1);
	add_opcode(0xDD6F);
	add_opcode(0xF1);
	break;
	default:
	error_illegal_ident(); }
}

// AND IX Comma DE End
void Parser::parse_main_action_1445() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDDDC);
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xF5);
	add_opcode(0xDD7C);
	add_opcode(0xA2);
	add_opcode(0xDD67);
	add_opcode(0xDD7D);
	add_opcode(0xA3);
	add_opcode(0xDD6F);
	add_opcode(0xF1);
	break;
	default:
	error_illegal_ident(); }
}

// AND IY Comma BC End
void Parser::parse_main_action_1446() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xF5);
	add_opcode(0xFD7C);
	add_opcode(0xA0);
	add_opcode(0xFD67);
	add_opcode(0xFD7D);
	add_opcode(0xA1);
	add_opcode(0xFD6F);
	add_opcode(0xF1);
	break;
	default:
	error_illegal_ident(); }
}

// AND IY Comma DE End
void Parser::parse_main_action_1447() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xF5);
	add_opcode(0xFD7C);
	add_opcode(0xA2);
	add_opcode(0xFD67);
	add_opcode(0xFD7D);
	add_opcode(0xA3);
	add_opcode(0xFD6F);
	add_opcode(0xF1);
	break;
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFDDC);
	break;
	default:
	error_illegal_ident(); }
}

// AND JKHL Comma BCDE End
void Parser::parse_main_action_1448() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xEDE6);
	break;
	default:
	error_illegal_ident(); }
}

// AND Dot L A Comma LParen HL Minus RParen End | AND Dot L LParen HL Minus RParen End | AND Dot LIS A Comma LParen HL Minus RParen End | AND Dot LIS LParen HL Minus RParen End
void Parser::parse_main_action_1449() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xA6);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// AND Dot L A Comma LParen HL Plus RParen End | AND Dot L LParen HL Plus RParen End | AND Dot LIS A Comma LParen HL Plus RParen End | AND Dot LIS LParen HL Plus RParen End
void Parser::parse_main_action_1450() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xA6);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// AND Dot L A Comma LParen HL RParen End | AND Dot L LParen HL RParen End | AND Dot LIS A Comma LParen HL RParen End | AND Dot LIS LParen HL RParen End
void Parser::parse_main_action_1451() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xA6);
	break;
	default:
	error_illegal_ident(); }
}

// AND Dot L A Comma LParen IX RParen End | AND Dot L LParen IX RParen End | AND Dot LIS A Comma LParen IX RParen End | AND Dot LIS LParen IX RParen End
void Parser::parse_main_action_1452() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xDDA600);
	break;
	default:
	error_illegal_ident(); }
}

// AND Dot L A Comma LParen IX expr RParen End | AND Dot L LParen IX expr RParen End | AND Dot LIS A Comma LParen IX expr RParen End | AND Dot LIS LParen IX expr RParen End
void Parser::parse_main_action_1453() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xDDA6);
	break;
	default:
	error_illegal_ident(); }
}

// AND Dot L A Comma LParen IY RParen End | AND Dot L LParen IY RParen End | AND Dot LIS A Comma LParen IY RParen End | AND Dot LIS LParen IY RParen End
void Parser::parse_main_action_1454() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xFDA600);
	break;
	default:
	error_illegal_ident(); }
}

// AND Dot L A Comma LParen IY expr RParen End | AND Dot L LParen IY expr RParen End | AND Dot LIS A Comma LParen IY expr RParen End | AND Dot LIS LParen IY expr RParen End
void Parser::parse_main_action_1455() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xFDA6);
	break;
	default:
	error_illegal_ident(); }
}

// AND Dot S A Comma LParen HL Minus RParen End | AND Dot S LParen HL Minus RParen End | AND Dot SIL A Comma LParen HL Minus RParen End | AND Dot SIL LParen HL Minus RParen End
void Parser::parse_main_action_1456() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xA6);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// AND Dot S A Comma LParen HL Plus RParen End | AND Dot S LParen HL Plus RParen End | AND Dot SIL A Comma LParen HL Plus RParen End | AND Dot SIL LParen HL Plus RParen End
void Parser::parse_main_action_1457() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xA6);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// AND Dot S A Comma LParen HL RParen End | AND Dot S LParen HL RParen End | AND Dot SIL A Comma LParen HL RParen End | AND Dot SIL LParen HL RParen End
void Parser::parse_main_action_1458() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xA6);
	break;
	default:
	error_illegal_ident(); }
}

// AND Dot S A Comma LParen IX RParen End | AND Dot S LParen IX RParen End | AND Dot SIL A Comma LParen IX RParen End | AND Dot SIL LParen IX RParen End
void Parser::parse_main_action_1459() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xDDA600);
	break;
	default:
	error_illegal_ident(); }
}

// AND Dot S A Comma LParen IX expr RParen End | AND Dot S LParen IX expr RParen End | AND Dot SIL A Comma LParen IX expr RParen End | AND Dot SIL LParen IX expr RParen End
void Parser::parse_main_action_1460() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xDDA6);
	break;
	default:
	error_illegal_ident(); }
}

// AND Dot S A Comma LParen IY RParen End | AND Dot S LParen IY RParen End | AND Dot SIL A Comma LParen IY RParen End | AND Dot SIL LParen IY RParen End
void Parser::parse_main_action_1461() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xFDA600);
	break;
	default:
	error_illegal_ident(); }
}

// AND Dot S A Comma LParen IY expr RParen End | AND Dot S LParen IY expr RParen End | AND Dot SIL A Comma LParen IY expr RParen End | AND Dot SIL LParen IY expr RParen End
void Parser::parse_main_action_1462() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xFDA6);
	break;
	default:
	error_illegal_ident(); }
}

// ARHL End | RRHL End | SRA HL End
void Parser::parse_main_action_1463() {
	switch (g_args.cpu()) {
	case CPU_8080: 
	add_call_function("__z80asm__sra_hl");
	break;
	case CPU_8085: 
	add_opcode(0x10);
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xCB2C);
	add_opcode(0xCB1D);
	break;
	default:
	error_illegal_ident(); }
}

// BIT Dot L const_expr Comma LParen HL RParen End | BIT Dot LIS const_expr Comma LParen HL RParen End
void Parser::parse_main_action_1464() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCB46+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// BIT Dot L const_expr Comma LParen IX RParen End | BIT Dot LIS const_expr Comma LParen IX RParen End
void Parser::parse_main_action_1465() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xDDCB0046+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// BIT Dot L const_expr Comma LParen IX expr RParen End | BIT Dot LIS const_expr Comma LParen IX expr RParen End
void Parser::parse_main_action_1466() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xDDCB46+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// BIT Dot L const_expr Comma LParen IY RParen End | BIT Dot LIS const_expr Comma LParen IY RParen End
void Parser::parse_main_action_1467() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xFDCB0046+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// BIT Dot L const_expr Comma LParen IY expr RParen End | BIT Dot LIS const_expr Comma LParen IY expr RParen End
void Parser::parse_main_action_1468() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xFDCB46+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// BIT Dot S const_expr Comma LParen HL RParen End | BIT Dot SIL const_expr Comma LParen HL RParen End
void Parser::parse_main_action_1469() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCB46+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// BIT Dot S const_expr Comma LParen IX RParen End | BIT Dot SIL const_expr Comma LParen IX RParen End
void Parser::parse_main_action_1470() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xDDCB0046+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// BIT Dot S const_expr Comma LParen IX expr RParen End | BIT Dot SIL const_expr Comma LParen IX expr RParen End
void Parser::parse_main_action_1471() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xDDCB46+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// BIT Dot S const_expr Comma LParen IY RParen End | BIT Dot SIL const_expr Comma LParen IY RParen End
void Parser::parse_main_action_1472() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xFDCB0046+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// BIT Dot S const_expr Comma LParen IY expr RParen End | BIT Dot SIL const_expr Comma LParen IY expr RParen End
void Parser::parse_main_action_1473() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xFDCB46+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// BIT const_expr Comma A End
void Parser::parse_main_action_1474() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCB47+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// BIT const_expr Comma B End
void Parser::parse_main_action_1475() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCB40+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// BIT const_expr Comma C End
void Parser::parse_main_action_1476() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCB41+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// BIT const_expr Comma D End
void Parser::parse_main_action_1477() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCB42+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// BIT const_expr Comma E End
void Parser::parse_main_action_1478() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCB43+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// BIT const_expr Comma H End
void Parser::parse_main_action_1479() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCB44+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// BIT const_expr Comma L End
void Parser::parse_main_action_1480() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCB45+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// BIT const_expr Comma LParen AHL RParen End
void Parser::parse_main_action_1481() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCB46+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// BIT const_expr Comma LParen AIX RParen End
void Parser::parse_main_action_1482() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xDDCB0046+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// BIT const_expr Comma LParen AIX expr RParen End
void Parser::parse_main_action_1483() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xDDCB46+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// BIT const_expr Comma LParen AIY RParen End
void Parser::parse_main_action_1484() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xFDCB0046+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// BIT const_expr Comma LParen AIY expr RParen End
void Parser::parse_main_action_1485() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xFDCB46+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// BIT const_expr Comma LParen HL RParen End
void Parser::parse_main_action_1486() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCB46+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// BIT const_expr Comma LParen IX RParen End
void Parser::parse_main_action_1487() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xDDCB0046+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// BIT const_expr Comma LParen IX expr RParen End
void Parser::parse_main_action_1488() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xDDCB46+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// BIT const_expr Comma LParen IY RParen End
void Parser::parse_main_action_1489() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xFDCB0046+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// BIT const_expr Comma LParen IY expr RParen End
void Parser::parse_main_action_1490() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xFDCB46+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// BIT const_expr Comma LParen PHL RParen End
void Parser::parse_main_action_1491() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x5B);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCB46+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// BIT const_expr Comma LParen PIX RParen End
void Parser::parse_main_action_1492() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x5B);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xDDCB0046+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// BIT const_expr Comma LParen PIX expr RParen End
void Parser::parse_main_action_1493() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x5B);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xDDCB46+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// BIT const_expr Comma LParen PIY RParen End
void Parser::parse_main_action_1494() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x5B);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xFDCB0046+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// BIT const_expr Comma LParen PIY expr RParen End
void Parser::parse_main_action_1495() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x5B);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xFDCB46+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// BIT const_expr Comma LParen XHL RParen End
void Parser::parse_main_action_1496() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x40);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCB46+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// BIT const_expr Comma LParen XIX RParen End
void Parser::parse_main_action_1497() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x40);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xDDCB0046+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// BIT const_expr Comma LParen XIX expr RParen End
void Parser::parse_main_action_1498() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x40);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xDDCB46+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// BIT const_expr Comma LParen XIY RParen End
void Parser::parse_main_action_1499() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x40);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xFDCB0046+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// BIT const_expr Comma LParen XIY expr RParen End
void Parser::parse_main_action_1500() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x40);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xFDCB46+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// BIT const_expr Comma LParen YHL RParen End
void Parser::parse_main_action_1501() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCB46+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// BIT const_expr Comma LParen YIX RParen End
void Parser::parse_main_action_1502() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xDDCB0046+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// BIT const_expr Comma LParen YIX expr RParen End
void Parser::parse_main_action_1503() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xDDCB46+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// BIT const_expr Comma LParen YIY RParen End
void Parser::parse_main_action_1504() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xFDCB0046+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// BIT const_expr Comma LParen YIY expr RParen End
void Parser::parse_main_action_1505() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xFDCB46+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// BIT const_expr Comma LParen ZHL RParen End
void Parser::parse_main_action_1506() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x7F);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCB46+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// BIT const_expr Comma LParen ZIX RParen End
void Parser::parse_main_action_1507() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x7F);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xDDCB0046+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// BIT const_expr Comma LParen ZIX expr RParen End
void Parser::parse_main_action_1508() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x7F);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xDDCB46+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// BIT const_expr Comma LParen ZIY RParen End
void Parser::parse_main_action_1509() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x7F);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xFDCB0046+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// BIT const_expr Comma LParen ZIY expr RParen End
void Parser::parse_main_action_1510() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x7F);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xFDCB46+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// BOOL HL End
void Parser::parse_main_action_1511() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xCC);
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	{
	string target1 = Section::autolabel();
	auto target_expr1 = Expr::make_expr(target1);
	add_opcode(0xF5);
	add_opcode(0x7C);
	add_opcode(0xB5);
	m_exprs.push_back(target_expr1);
	add_jump_relative(0x28);
	m_exprs.pop_back();
	add_opcode(0x210100);
	add_label(target1);
	add_opcode(0xF1);
	}
	break;
	case CPU_8080: case CPU_8085: case CPU_GBZ80: 
	{
	string target1 = Section::autolabel();
	auto target_expr1 = Expr::make_expr(target1);
	add_opcode(0xF5);
	add_opcode(0x7C);
	add_opcode(0xB5);
	m_exprs.push_back(target_expr1);
	add_opcode_nn(0xCA);
	m_exprs.pop_back();
	add_opcode(0x210100);
	add_label(target1);
	add_opcode(0xF1);
	}
	break;
	default:
	error_illegal_ident(); }
}

// BOOL IX End
void Parser::parse_main_action_1512() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDDCC);
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80N: 
	{
	string target1 = Section::autolabel();
	auto target_expr1 = Expr::make_expr(target1);
	add_opcode(0xF5);
	add_opcode(0xDD7C);
	add_opcode(0xDDB5);
	m_exprs.push_back(target_expr1);
	add_jump_relative(0x28);
	m_exprs.pop_back();
	add_opcode(0xDD210100);
	add_label(target1);
	add_opcode(0xF1);
	}
	break;
	case CPU_KC160: case CPU_KC160_Z80: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: 
	{
	string target1 = Section::autolabel();
	auto target_expr1 = Expr::make_expr(target1);
	add_opcode(0xF5);
	add_opcode(0xE5);
	add_opcode(0xDDE5);
	add_opcode(0xE1);
	add_opcode(0x7C);
	add_opcode(0xB5);
	m_exprs.push_back(target_expr1);
	add_jump_relative(0x28);
	m_exprs.pop_back();
	add_opcode(0x210100);
	add_label(target1);
	add_opcode(0xE5);
	add_opcode(0xDDE1);
	add_opcode(0xE1);
	add_opcode(0xF1);
	}
	break;
	default:
	error_illegal_ident(); }
}

// BOOL IY End
void Parser::parse_main_action_1513() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFDCC);
	break;
	case CPU_KC160: case CPU_KC160_Z80: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: 
	{
	string target1 = Section::autolabel();
	auto target_expr1 = Expr::make_expr(target1);
	add_opcode(0xF5);
	add_opcode(0xE5);
	add_opcode(0xFDE5);
	add_opcode(0xE1);
	add_opcode(0x7C);
	add_opcode(0xB5);
	m_exprs.push_back(target_expr1);
	add_jump_relative(0x28);
	m_exprs.pop_back();
	add_opcode(0x210100);
	add_label(target1);
	add_opcode(0xE5);
	add_opcode(0xFDE1);
	add_opcode(0xE1);
	add_opcode(0xF1);
	}
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80N: 
	{
	string target1 = Section::autolabel();
	auto target_expr1 = Expr::make_expr(target1);
	add_opcode(0xF5);
	add_opcode(0xFD7C);
	add_opcode(0xFDB5);
	m_exprs.push_back(target_expr1);
	add_jump_relative(0x28);
	m_exprs.pop_back();
	add_opcode(0xFD210100);
	add_label(target1);
	add_opcode(0xF1);
	}
	break;
	default:
	error_illegal_ident(); }
}

// BRLC DE Comma B End
void Parser::parse_main_action_1514() {
	switch (g_args.cpu()) {
	case CPU_Z80N: 
	add_opcode(0xED2C);
	break;
	default:
	error_illegal_ident(); }
}

// BSLA DE Comma B End
void Parser::parse_main_action_1515() {
	switch (g_args.cpu()) {
	case CPU_Z80N: 
	add_opcode(0xED28);
	break;
	default:
	error_illegal_ident(); }
}

// BSRA DE Comma B End
void Parser::parse_main_action_1516() {
	switch (g_args.cpu()) {
	case CPU_Z80N: 
	add_opcode(0xED29);
	break;
	default:
	error_illegal_ident(); }
}

// BSRF DE Comma B End
void Parser::parse_main_action_1517() {
	switch (g_args.cpu()) {
	case CPU_Z80N: 
	add_opcode(0xED2B);
	break;
	default:
	error_illegal_ident(); }
}

// BSRL DE Comma B End
void Parser::parse_main_action_1518() {
	switch (g_args.cpu()) {
	case CPU_Z80N: 
	add_opcode(0xED2A);
	break;
	default:
	error_illegal_ident(); }
}

// BYTE | DB | DEFB | DEFM | DM
void Parser::parse_main_action_1519() {
	parse_int8_data();
}

// CALL C Comma expr End | CALL LTU Comma expr End | CC expr End | CLTU expr End | C_C expr End | C_LTU expr End
void Parser::parse_main_action_1520() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_opcode_nn(0xDC, 0);
	break;
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode_nnn(0xDC, 0);
	break;
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	{
	string target1 = Section::autolabel();
	auto target_expr1 = Expr::make_expr(target1);
	m_exprs.push_back(target_expr1);
	add_jump_relative(0x30);
	m_exprs.pop_back();
	add_opcode_nn(0xCD);
	add_label(target1);
	}
	break;
	default:
	error_illegal_ident(); }
}

// CALL EQ Comma expr End | CALL Z Comma expr End | CEQ expr End | CZ expr End | C_EQ expr End | C_Z expr End
void Parser::parse_main_action_1521() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_opcode_nn(0xCC, 0);
	break;
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode_nnn(0xCC, 0);
	break;
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	{
	string target1 = Section::autolabel();
	auto target_expr1 = Expr::make_expr(target1);
	m_exprs.push_back(target_expr1);
	add_jump_relative(0x20);
	m_exprs.pop_back();
	add_opcode_nn(0xCD);
	add_label(target1);
	}
	break;
	default:
	error_illegal_ident(); }
}

// CALL GEU Comma expr End | CALL NC Comma expr End | CGEU expr End | CNC expr End | C_GEU expr End | C_NC expr End
void Parser::parse_main_action_1522() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_opcode_nn(0xD4, 0);
	break;
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode_nnn(0xD4, 0);
	break;
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	{
	string target1 = Section::autolabel();
	auto target_expr1 = Expr::make_expr(target1);
	m_exprs.push_back(target_expr1);
	add_jump_relative(0x38);
	m_exprs.pop_back();
	add_opcode_nn(0xCD);
	add_label(target1);
	}
	break;
	default:
	error_illegal_ident(); }
}

// CALL GTU Comma expr End | CGTU expr End | C_GTU expr End
void Parser::parse_main_action_1523() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	string target2 = Section::autolabel();
	auto target_expr2 = Expr::make_expr(target2);
	m_exprs.push_back(target_expr2);
	add_jump_relative(0x28);
	m_exprs.pop_back();
	m_exprs.push_back(target_expr2);
	add_jump_relative(0x38);
	m_exprs.pop_back();
	add_opcode_nn(0xCD);
	add_label(target2);
	}
	break;
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	{
	string target2 = Section::autolabel();
	auto target_expr2 = Expr::make_expr(target2);
	m_exprs.push_back(target_expr2);
	add_jump_relative(0x28);
	m_exprs.pop_back();
	m_exprs.push_back(target_expr2);
	add_jump_relative(0x38);
	m_exprs.pop_back();
	add_opcode_nnn(0xCD);
	add_label(target2);
	}
	break;
	case CPU_8080: case CPU_8085: 
	warn_if_expr_in_parens();
	{
	string target2 = Section::autolabel();
	auto target_expr2 = Expr::make_expr(target2);
	m_exprs.push_back(target_expr2);
	add_opcode_nn(0xCA);
	m_exprs.pop_back();
	m_exprs.push_back(target_expr2);
	add_opcode_nn(0xDA);
	m_exprs.pop_back();
	add_opcode_nn(0xCD);
	add_label(target2);
	}
	break;
	default:
	error_illegal_ident(); }
}

// CALL LEU Comma expr End | CLEU expr End | C_LEU expr End
void Parser::parse_main_action_1524() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	string target2 = Section::autolabel();
	auto target_expr2 = Expr::make_expr(target2);
	string target1 = Section::autolabel();
	auto target_expr1 = Expr::make_expr(target1);
	m_exprs.push_back(target_expr1);
	add_jump_relative(0x28);
	m_exprs.pop_back();
	m_exprs.push_back(target_expr2);
	add_jump_relative(0x30);
	m_exprs.pop_back();
	add_label(target1);
	add_opcode_nn(0xCD);
	add_label(target2);
	}
	break;
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	{
	string target2 = Section::autolabel();
	auto target_expr2 = Expr::make_expr(target2);
	string target1 = Section::autolabel();
	auto target_expr1 = Expr::make_expr(target1);
	m_exprs.push_back(target_expr1);
	add_jump_relative(0x28);
	m_exprs.pop_back();
	m_exprs.push_back(target_expr2);
	add_jump_relative(0x30);
	m_exprs.pop_back();
	add_label(target1);
	add_opcode_nnn(0xCD);
	add_label(target2);
	}
	break;
	case CPU_8080: case CPU_8085: 
	warn_if_expr_in_parens();
	{
	string target2 = Section::autolabel();
	auto target_expr2 = Expr::make_expr(target2);
	string target1 = Section::autolabel();
	auto target_expr1 = Expr::make_expr(target1);
	m_exprs.push_back(target_expr1);
	add_opcode_nn(0xCA);
	m_exprs.pop_back();
	m_exprs.push_back(target_expr2);
	add_opcode_nn(0xD2);
	m_exprs.pop_back();
	add_label(target1);
	add_opcode_nn(0xCD);
	add_label(target2);
	}
	break;
	default:
	error_illegal_ident(); }
}

// CALL LO Comma expr End | CLO expr End | C_LO expr End
void Parser::parse_main_action_1525() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	{
	string target1 = Section::autolabel();
	auto target_expr1 = Expr::make_expr(target1);
	m_exprs.push_back(target_expr1);
	add_opcode_nn(0xE2);
	m_exprs.pop_back();
	add_opcode_nn(0xCD);
	add_label(target1);
	}
	break;
	default:
	error_illegal_ident(); }
}

// CALL LZ Comma expr End | CLZ expr End | C_LZ expr End
void Parser::parse_main_action_1526() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	{
	string target1 = Section::autolabel();
	auto target_expr1 = Expr::make_expr(target1);
	m_exprs.push_back(target_expr1);
	add_opcode_nn(0xEA);
	m_exprs.pop_back();
	add_opcode_nn(0xCD);
	add_label(target1);
	}
	break;
	default:
	error_illegal_ident(); }
}

// CALL M Comma expr End | CM expr End | C_M expr End
void Parser::parse_main_action_1527() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_opcode_nn(0xFC, 0);
	break;
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode_nnn(0xFC, 0);
	break;
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	{
	string target1 = Section::autolabel();
	auto target_expr1 = Expr::make_expr(target1);
	m_exprs.push_back(target_expr1);
	add_opcode_nn(0xF2);
	m_exprs.pop_back();
	add_opcode_nn(0xCD);
	add_label(target1);
	}
	break;
	default:
	error_illegal_ident(); }
}

// CALL NE Comma expr End | CALL NZ Comma expr End | CNE expr End | CNZ expr End | C_NE expr End | C_NZ expr End
void Parser::parse_main_action_1528() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_opcode_nn(0xC4, 0);
	break;
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode_nnn(0xC4, 0);
	break;
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	{
	string target1 = Section::autolabel();
	auto target_expr1 = Expr::make_expr(target1);
	m_exprs.push_back(target_expr1);
	add_jump_relative(0x28);
	m_exprs.pop_back();
	add_opcode_nn(0xCD);
	add_label(target1);
	}
	break;
	default:
	error_illegal_ident(); }
}

// CALL NV Comma expr End | CNV expr End | C_NV expr End
void Parser::parse_main_action_1529() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_opcode_nn(0xE4, 0);
	break;
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode_nnn(0xE4, 0);
	break;
	case CPU_R2KA: case CPU_R3K: 
	warn_if_expr_in_parens();
	{
	string target1 = Section::autolabel();
	auto target_expr1 = Expr::make_expr(target1);
	m_exprs.push_back(target_expr1);
	add_opcode_nn(0xEA);
	m_exprs.pop_back();
	add_opcode_nn(0xCD);
	add_label(target1);
	}
	break;
	default:
	error_illegal_ident(); }
}

// CALL P Comma expr End | C_P expr End
void Parser::parse_main_action_1530() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_opcode_nn(0xF4, 0);
	break;
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode_nnn(0xF4, 0);
	break;
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	{
	string target1 = Section::autolabel();
	auto target_expr1 = Expr::make_expr(target1);
	m_exprs.push_back(target_expr1);
	add_opcode_nn(0xFA);
	m_exprs.pop_back();
	add_opcode_nn(0xCD);
	add_label(target1);
	}
	break;
	default:
	error_illegal_ident(); }
}

// CALL PE Comma expr End | CPE expr End | C_PE expr End
void Parser::parse_main_action_1531() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_opcode_nn(0xEC, 0);
	break;
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode_nnn(0xEC, 0);
	break;
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	{
	string target1 = Section::autolabel();
	auto target_expr1 = Expr::make_expr(target1);
	m_exprs.push_back(target_expr1);
	add_opcode_nn(0xE2);
	m_exprs.pop_back();
	add_opcode_nn(0xCD);
	add_label(target1);
	}
	break;
	default:
	error_illegal_ident(); }
}

// CALL PO Comma expr End | CPO expr End | C_PO expr End
void Parser::parse_main_action_1532() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_opcode_nn(0xE4, 0);
	break;
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode_nnn(0xE4, 0);
	break;
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	{
	string target1 = Section::autolabel();
	auto target_expr1 = Expr::make_expr(target1);
	m_exprs.push_back(target_expr1);
	add_opcode_nn(0xEA);
	m_exprs.pop_back();
	add_opcode_nn(0xCD);
	add_label(target1);
	}
	break;
	default:
	error_illegal_ident(); }
}

// CALL V Comma expr End | CV expr End | C_V expr End
void Parser::parse_main_action_1533() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_opcode_nn(0xEC, 0);
	break;
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode_nnn(0xEC, 0);
	break;
	case CPU_R2KA: case CPU_R3K: 
	warn_if_expr_in_parens();
	{
	string target1 = Section::autolabel();
	auto target_expr1 = Expr::make_expr(target1);
	m_exprs.push_back(target_expr1);
	add_opcode_nn(0xE2);
	m_exprs.pop_back();
	add_opcode_nn(0xCD);
	add_label(target1);
	}
	break;
	default:
	error_illegal_ident(); }
}

// CALL Dot IL C Comma expr End | CALL Dot IL LTU Comma expr End
void Parser::parse_main_action_1534() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	add_opcode_nnn(0xDC, 0);
	break;
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode(0x5B);
	add_opcode_nnn(0xDC, 0);
	break;
	default:
	error_illegal_ident(); }
}

// CALL Dot IL EQ Comma expr End | CALL Dot IL Z Comma expr End
void Parser::parse_main_action_1535() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	add_opcode_nnn(0xCC, 0);
	break;
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode(0x5B);
	add_opcode_nnn(0xCC, 0);
	break;
	default:
	error_illegal_ident(); }
}

// CALL Dot IL GEU Comma expr End | CALL Dot IL NC Comma expr End
void Parser::parse_main_action_1536() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	add_opcode_nnn(0xD4, 0);
	break;
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode(0x5B);
	add_opcode_nnn(0xD4, 0);
	break;
	default:
	error_illegal_ident(); }
}

// CALL Dot IL GTU Comma expr End
void Parser::parse_main_action_1537() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	{
	string target2 = Section::autolabel();
	auto target_expr2 = Expr::make_expr(target2);
	m_exprs.push_back(target_expr2);
	add_jump_relative(0x28);
	m_exprs.pop_back();
	m_exprs.push_back(target_expr2);
	add_jump_relative(0x38);
	m_exprs.pop_back();
	add_opcode(0x52);
	add_opcode_nnn(0xCD);
	add_label(target2);
	}
	break;
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	{
	string target2 = Section::autolabel();
	auto target_expr2 = Expr::make_expr(target2);
	m_exprs.push_back(target_expr2);
	add_jump_relative(0x28);
	m_exprs.pop_back();
	m_exprs.push_back(target_expr2);
	add_jump_relative(0x38);
	m_exprs.pop_back();
	add_opcode(0x5B);
	add_opcode_nnn(0xCD);
	add_label(target2);
	}
	break;
	default:
	error_illegal_ident(); }
}

// CALL Dot IL LEU Comma expr End
void Parser::parse_main_action_1538() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	{
	string target2 = Section::autolabel();
	auto target_expr2 = Expr::make_expr(target2);
	string target1 = Section::autolabel();
	auto target_expr1 = Expr::make_expr(target1);
	m_exprs.push_back(target_expr1);
	add_jump_relative(0x28);
	m_exprs.pop_back();
	m_exprs.push_back(target_expr2);
	add_jump_relative(0x30);
	m_exprs.pop_back();
	add_label(target1);
	add_opcode(0x52);
	add_opcode_nnn(0xCD);
	add_label(target2);
	}
	break;
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	{
	string target2 = Section::autolabel();
	auto target_expr2 = Expr::make_expr(target2);
	string target1 = Section::autolabel();
	auto target_expr1 = Expr::make_expr(target1);
	m_exprs.push_back(target_expr1);
	add_jump_relative(0x28);
	m_exprs.pop_back();
	m_exprs.push_back(target_expr2);
	add_jump_relative(0x30);
	m_exprs.pop_back();
	add_label(target1);
	add_opcode(0x5B);
	add_opcode_nnn(0xCD);
	add_label(target2);
	}
	break;
	default:
	error_illegal_ident(); }
}

// CALL Dot IL M Comma expr End
void Parser::parse_main_action_1539() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	add_opcode_nnn(0xFC, 0);
	break;
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode(0x5B);
	add_opcode_nnn(0xFC, 0);
	break;
	default:
	error_illegal_ident(); }
}

// CALL Dot IL NE Comma expr End | CALL Dot IL NZ Comma expr End
void Parser::parse_main_action_1540() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	add_opcode_nnn(0xC4, 0);
	break;
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode(0x5B);
	add_opcode_nnn(0xC4, 0);
	break;
	default:
	error_illegal_ident(); }
}

// CALL Dot IL NV Comma expr End | CALL Dot IL PO Comma expr End
void Parser::parse_main_action_1541() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	add_opcode_nnn(0xE4, 0);
	break;
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode(0x5B);
	add_opcode_nnn(0xE4, 0);
	break;
	default:
	error_illegal_ident(); }
}

// CALL Dot IL P Comma expr End
void Parser::parse_main_action_1542() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	add_opcode_nnn(0xF4, 0);
	break;
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode(0x5B);
	add_opcode_nnn(0xF4, 0);
	break;
	default:
	error_illegal_ident(); }
}

// CALL Dot IL PE Comma expr End | CALL Dot IL V Comma expr End
void Parser::parse_main_action_1543() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	add_opcode_nnn(0xEC, 0);
	break;
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode(0x5B);
	add_opcode_nnn(0xEC, 0);
	break;
	default:
	error_illegal_ident(); }
}

// CALL Dot IL expr End
void Parser::parse_main_action_1544() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	add_opcode_nnn(0xCD, 0);
	break;
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode(0x5B);
	add_opcode_nnn(0xCD, 0);
	break;
	default:
	error_illegal_ident(); }
}

// CALL Dot IS C Comma expr End | CALL Dot IS LTU Comma expr End
void Parser::parse_main_action_1545() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x40);
	add_opcode_nn(0xDC, 0);
	break;
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	add_opcode_nn(0xDC, 0);
	break;
	default:
	error_illegal_ident(); }
}

// CALL Dot IS EQ Comma expr End | CALL Dot IS Z Comma expr End
void Parser::parse_main_action_1546() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x40);
	add_opcode_nn(0xCC, 0);
	break;
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	add_opcode_nn(0xCC, 0);
	break;
	default:
	error_illegal_ident(); }
}

// CALL Dot IS GEU Comma expr End | CALL Dot IS NC Comma expr End
void Parser::parse_main_action_1547() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x40);
	add_opcode_nn(0xD4, 0);
	break;
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	add_opcode_nn(0xD4, 0);
	break;
	default:
	error_illegal_ident(); }
}

// CALL Dot IS GTU Comma expr End
void Parser::parse_main_action_1548() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	{
	string target2 = Section::autolabel();
	auto target_expr2 = Expr::make_expr(target2);
	m_exprs.push_back(target_expr2);
	add_jump_relative(0x28);
	m_exprs.pop_back();
	m_exprs.push_back(target_expr2);
	add_jump_relative(0x38);
	m_exprs.pop_back();
	add_opcode(0x40);
	add_opcode_nn(0xCD);
	add_label(target2);
	}
	break;
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	{
	string target2 = Section::autolabel();
	auto target_expr2 = Expr::make_expr(target2);
	m_exprs.push_back(target_expr2);
	add_jump_relative(0x28);
	m_exprs.pop_back();
	m_exprs.push_back(target_expr2);
	add_jump_relative(0x38);
	m_exprs.pop_back();
	add_opcode(0x49);
	add_opcode_nn(0xCD);
	add_label(target2);
	}
	break;
	default:
	error_illegal_ident(); }
}

// CALL Dot IS LEU Comma expr End
void Parser::parse_main_action_1549() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	{
	string target2 = Section::autolabel();
	auto target_expr2 = Expr::make_expr(target2);
	string target1 = Section::autolabel();
	auto target_expr1 = Expr::make_expr(target1);
	m_exprs.push_back(target_expr1);
	add_jump_relative(0x28);
	m_exprs.pop_back();
	m_exprs.push_back(target_expr2);
	add_jump_relative(0x30);
	m_exprs.pop_back();
	add_label(target1);
	add_opcode(0x40);
	add_opcode_nnn(0xCD);
	add_label(target2);
	}
	break;
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	{
	string target2 = Section::autolabel();
	auto target_expr2 = Expr::make_expr(target2);
	string target1 = Section::autolabel();
	auto target_expr1 = Expr::make_expr(target1);
	m_exprs.push_back(target_expr1);
	add_jump_relative(0x28);
	m_exprs.pop_back();
	m_exprs.push_back(target_expr2);
	add_jump_relative(0x30);
	m_exprs.pop_back();
	add_label(target1);
	add_opcode(0x49);
	add_opcode_nnn(0xCD);
	add_label(target2);
	}
	break;
	default:
	error_illegal_ident(); }
}

// CALL Dot IS M Comma expr End
void Parser::parse_main_action_1550() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x40);
	add_opcode_nn(0xFC, 0);
	break;
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	add_opcode_nn(0xFC, 0);
	break;
	default:
	error_illegal_ident(); }
}

// CALL Dot IS NE Comma expr End | CALL Dot IS NZ Comma expr End
void Parser::parse_main_action_1551() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x40);
	add_opcode_nn(0xC4, 0);
	break;
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	add_opcode_nn(0xC4, 0);
	break;
	default:
	error_illegal_ident(); }
}

// CALL Dot IS NV Comma expr End | CALL Dot IS PO Comma expr End
void Parser::parse_main_action_1552() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x40);
	add_opcode_nn(0xE4, 0);
	break;
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	add_opcode_nn(0xE4, 0);
	break;
	default:
	error_illegal_ident(); }
}

// CALL Dot IS P Comma expr End
void Parser::parse_main_action_1553() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x40);
	add_opcode_nn(0xF4, 0);
	break;
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	add_opcode_nn(0xF4, 0);
	break;
	default:
	error_illegal_ident(); }
}

// CALL Dot IS PE Comma expr End | CALL Dot IS V Comma expr End
void Parser::parse_main_action_1554() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x40);
	add_opcode_nn(0xEC, 0);
	break;
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	add_opcode_nn(0xEC, 0);
	break;
	default:
	error_illegal_ident(); }
}

// CALL Dot IS expr End
void Parser::parse_main_action_1555() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x40);
	add_opcode_nn(0xCD, 0);
	break;
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	add_opcode_nn(0xCD, 0);
	break;
	default:
	error_illegal_ident(); }
}

// CALL Dot LIL C Comma expr End | CALL Dot LIL LTU Comma expr End
void Parser::parse_main_action_1556() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode(0x5B);
	add_opcode_nnn(0xDC, 0);
	break;
	default:
	error_illegal_ident(); }
}

// CALL Dot LIL EQ Comma expr End | CALL Dot LIL Z Comma expr End
void Parser::parse_main_action_1557() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode(0x5B);
	add_opcode_nnn(0xCC, 0);
	break;
	default:
	error_illegal_ident(); }
}

// CALL Dot LIL GEU Comma expr End | CALL Dot LIL NC Comma expr End
void Parser::parse_main_action_1558() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode(0x5B);
	add_opcode_nnn(0xD4, 0);
	break;
	default:
	error_illegal_ident(); }
}

// CALL Dot LIL GTU Comma expr End
void Parser::parse_main_action_1559() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	{
	string target2 = Section::autolabel();
	auto target_expr2 = Expr::make_expr(target2);
	m_exprs.push_back(target_expr2);
	add_jump_relative(0x28);
	m_exprs.pop_back();
	m_exprs.push_back(target_expr2);
	add_jump_relative(0x38);
	m_exprs.pop_back();
	add_opcode(0x5B);
	add_opcode_nnn(0xCD);
	add_label(target2);
	}
	break;
	default:
	error_illegal_ident(); }
}

// CALL Dot LIL LEU Comma expr End
void Parser::parse_main_action_1560() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	{
	string target2 = Section::autolabel();
	auto target_expr2 = Expr::make_expr(target2);
	string target1 = Section::autolabel();
	auto target_expr1 = Expr::make_expr(target1);
	m_exprs.push_back(target_expr1);
	add_jump_relative(0x28);
	m_exprs.pop_back();
	m_exprs.push_back(target_expr2);
	add_jump_relative(0x30);
	m_exprs.pop_back();
	add_label(target1);
	add_opcode(0x5B);
	add_opcode_nnn(0xCD);
	add_label(target2);
	}
	break;
	default:
	error_illegal_ident(); }
}

// CALL Dot LIL M Comma expr End
void Parser::parse_main_action_1561() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode(0x5B);
	add_opcode_nnn(0xFC, 0);
	break;
	default:
	error_illegal_ident(); }
}

// CALL Dot LIL NE Comma expr End | CALL Dot LIL NZ Comma expr End
void Parser::parse_main_action_1562() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode(0x5B);
	add_opcode_nnn(0xC4, 0);
	break;
	default:
	error_illegal_ident(); }
}

// CALL Dot LIL NV Comma expr End | CALL Dot LIL PO Comma expr End
void Parser::parse_main_action_1563() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode(0x5B);
	add_opcode_nnn(0xE4, 0);
	break;
	default:
	error_illegal_ident(); }
}

// CALL Dot LIL P Comma expr End
void Parser::parse_main_action_1564() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode(0x5B);
	add_opcode_nnn(0xF4, 0);
	break;
	default:
	error_illegal_ident(); }
}

// CALL Dot LIL PE Comma expr End | CALL Dot LIL V Comma expr End
void Parser::parse_main_action_1565() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode(0x5B);
	add_opcode_nnn(0xEC, 0);
	break;
	default:
	error_illegal_ident(); }
}

// CALL Dot LIL expr End
void Parser::parse_main_action_1566() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode(0x5B);
	add_opcode_nnn(0xCD, 0);
	break;
	default:
	error_illegal_ident(); }
}

// CALL Dot LIS C Comma expr End | CALL Dot LIS LTU Comma expr End
void Parser::parse_main_action_1567() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	add_opcode_nn(0xDC, 0);
	break;
	default:
	error_illegal_ident(); }
}

// CALL Dot LIS EQ Comma expr End | CALL Dot LIS Z Comma expr End
void Parser::parse_main_action_1568() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	add_opcode_nn(0xCC, 0);
	break;
	default:
	error_illegal_ident(); }
}

// CALL Dot LIS GEU Comma expr End | CALL Dot LIS NC Comma expr End
void Parser::parse_main_action_1569() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	add_opcode_nn(0xD4, 0);
	break;
	default:
	error_illegal_ident(); }
}

// CALL Dot LIS GTU Comma expr End
void Parser::parse_main_action_1570() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	{
	string target2 = Section::autolabel();
	auto target_expr2 = Expr::make_expr(target2);
	m_exprs.push_back(target_expr2);
	add_jump_relative(0x28);
	m_exprs.pop_back();
	m_exprs.push_back(target_expr2);
	add_jump_relative(0x38);
	m_exprs.pop_back();
	add_opcode(0x49);
	add_opcode_nn(0xCD);
	add_label(target2);
	}
	break;
	default:
	error_illegal_ident(); }
}

// CALL Dot LIS LEU Comma expr End
void Parser::parse_main_action_1571() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	{
	string target2 = Section::autolabel();
	auto target_expr2 = Expr::make_expr(target2);
	string target1 = Section::autolabel();
	auto target_expr1 = Expr::make_expr(target1);
	m_exprs.push_back(target_expr1);
	add_jump_relative(0x28);
	m_exprs.pop_back();
	m_exprs.push_back(target_expr2);
	add_jump_relative(0x30);
	m_exprs.pop_back();
	add_label(target1);
	add_opcode(0x49);
	add_opcode_nnn(0xCD);
	add_label(target2);
	}
	break;
	default:
	error_illegal_ident(); }
}

// CALL Dot LIS M Comma expr End
void Parser::parse_main_action_1572() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	add_opcode_nn(0xFC, 0);
	break;
	default:
	error_illegal_ident(); }
}

// CALL Dot LIS NE Comma expr End | CALL Dot LIS NZ Comma expr End
void Parser::parse_main_action_1573() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	add_opcode_nn(0xC4, 0);
	break;
	default:
	error_illegal_ident(); }
}

// CALL Dot LIS NV Comma expr End | CALL Dot LIS PO Comma expr End
void Parser::parse_main_action_1574() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	add_opcode_nn(0xE4, 0);
	break;
	default:
	error_illegal_ident(); }
}

// CALL Dot LIS P Comma expr End
void Parser::parse_main_action_1575() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	add_opcode_nn(0xF4, 0);
	break;
	default:
	error_illegal_ident(); }
}

// CALL Dot LIS PE Comma expr End | CALL Dot LIS V Comma expr End
void Parser::parse_main_action_1576() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	add_opcode_nn(0xEC, 0);
	break;
	default:
	error_illegal_ident(); }
}

// CALL Dot LIS expr End
void Parser::parse_main_action_1577() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	add_opcode_nn(0xCD, 0);
	break;
	default:
	error_illegal_ident(); }
}

// CALL Dot SIL C Comma expr End | CALL Dot SIL LTU Comma expr End
void Parser::parse_main_action_1578() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	add_opcode_nnn(0xDC, 0);
	break;
	default:
	error_illegal_ident(); }
}

// CALL Dot SIL EQ Comma expr End | CALL Dot SIL Z Comma expr End
void Parser::parse_main_action_1579() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	add_opcode_nnn(0xCC, 0);
	break;
	default:
	error_illegal_ident(); }
}

// CALL Dot SIL GEU Comma expr End | CALL Dot SIL NC Comma expr End
void Parser::parse_main_action_1580() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	add_opcode_nnn(0xD4, 0);
	break;
	default:
	error_illegal_ident(); }
}

// CALL Dot SIL GTU Comma expr End
void Parser::parse_main_action_1581() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	{
	string target2 = Section::autolabel();
	auto target_expr2 = Expr::make_expr(target2);
	m_exprs.push_back(target_expr2);
	add_jump_relative(0x28);
	m_exprs.pop_back();
	m_exprs.push_back(target_expr2);
	add_jump_relative(0x38);
	m_exprs.pop_back();
	add_opcode(0x52);
	add_opcode_nnn(0xCD);
	add_label(target2);
	}
	break;
	default:
	error_illegal_ident(); }
}

// CALL Dot SIL LEU Comma expr End
void Parser::parse_main_action_1582() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	{
	string target2 = Section::autolabel();
	auto target_expr2 = Expr::make_expr(target2);
	string target1 = Section::autolabel();
	auto target_expr1 = Expr::make_expr(target1);
	m_exprs.push_back(target_expr1);
	add_jump_relative(0x28);
	m_exprs.pop_back();
	m_exprs.push_back(target_expr2);
	add_jump_relative(0x30);
	m_exprs.pop_back();
	add_label(target1);
	add_opcode(0x52);
	add_opcode_nnn(0xCD);
	add_label(target2);
	}
	break;
	default:
	error_illegal_ident(); }
}

// CALL Dot SIL M Comma expr End
void Parser::parse_main_action_1583() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	add_opcode_nnn(0xFC, 0);
	break;
	default:
	error_illegal_ident(); }
}

// CALL Dot SIL NE Comma expr End | CALL Dot SIL NZ Comma expr End
void Parser::parse_main_action_1584() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	add_opcode_nnn(0xC4, 0);
	break;
	default:
	error_illegal_ident(); }
}

// CALL Dot SIL NV Comma expr End | CALL Dot SIL PO Comma expr End
void Parser::parse_main_action_1585() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	add_opcode_nnn(0xE4, 0);
	break;
	default:
	error_illegal_ident(); }
}

// CALL Dot SIL P Comma expr End
void Parser::parse_main_action_1586() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	add_opcode_nnn(0xF4, 0);
	break;
	default:
	error_illegal_ident(); }
}

// CALL Dot SIL PE Comma expr End | CALL Dot SIL V Comma expr End
void Parser::parse_main_action_1587() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	add_opcode_nnn(0xEC, 0);
	break;
	default:
	error_illegal_ident(); }
}

// CALL Dot SIL expr End
void Parser::parse_main_action_1588() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	add_opcode_nnn(0xCD, 0);
	break;
	default:
	error_illegal_ident(); }
}

// CALL Dot SIS C Comma expr End | CALL Dot SIS LTU Comma expr End
void Parser::parse_main_action_1589() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x40);
	add_opcode_nn(0xDC, 0);
	break;
	default:
	error_illegal_ident(); }
}

// CALL Dot SIS EQ Comma expr End | CALL Dot SIS Z Comma expr End
void Parser::parse_main_action_1590() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x40);
	add_opcode_nn(0xCC, 0);
	break;
	default:
	error_illegal_ident(); }
}

// CALL Dot SIS GEU Comma expr End | CALL Dot SIS NC Comma expr End
void Parser::parse_main_action_1591() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x40);
	add_opcode_nn(0xD4, 0);
	break;
	default:
	error_illegal_ident(); }
}

// CALL Dot SIS GTU Comma expr End
void Parser::parse_main_action_1592() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	{
	string target2 = Section::autolabel();
	auto target_expr2 = Expr::make_expr(target2);
	m_exprs.push_back(target_expr2);
	add_jump_relative(0x28);
	m_exprs.pop_back();
	m_exprs.push_back(target_expr2);
	add_jump_relative(0x38);
	m_exprs.pop_back();
	add_opcode(0x40);
	add_opcode_nn(0xCD);
	add_label(target2);
	}
	break;
	default:
	error_illegal_ident(); }
}

// CALL Dot SIS LEU Comma expr End
void Parser::parse_main_action_1593() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	{
	string target2 = Section::autolabel();
	auto target_expr2 = Expr::make_expr(target2);
	string target1 = Section::autolabel();
	auto target_expr1 = Expr::make_expr(target1);
	m_exprs.push_back(target_expr1);
	add_jump_relative(0x28);
	m_exprs.pop_back();
	m_exprs.push_back(target_expr2);
	add_jump_relative(0x30);
	m_exprs.pop_back();
	add_label(target1);
	add_opcode(0x40);
	add_opcode_nnn(0xCD);
	add_label(target2);
	}
	break;
	default:
	error_illegal_ident(); }
}

// CALL Dot SIS M Comma expr End
void Parser::parse_main_action_1594() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x40);
	add_opcode_nn(0xFC, 0);
	break;
	default:
	error_illegal_ident(); }
}

// CALL Dot SIS NE Comma expr End | CALL Dot SIS NZ Comma expr End
void Parser::parse_main_action_1595() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x40);
	add_opcode_nn(0xC4, 0);
	break;
	default:
	error_illegal_ident(); }
}

// CALL Dot SIS NV Comma expr End | CALL Dot SIS PO Comma expr End
void Parser::parse_main_action_1596() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x40);
	add_opcode_nn(0xE4, 0);
	break;
	default:
	error_illegal_ident(); }
}

// CALL Dot SIS P Comma expr End
void Parser::parse_main_action_1597() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x40);
	add_opcode_nn(0xF4, 0);
	break;
	default:
	error_illegal_ident(); }
}

// CALL Dot SIS PE Comma expr End | CALL Dot SIS V Comma expr End
void Parser::parse_main_action_1598() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x40);
	add_opcode_nn(0xEC, 0);
	break;
	default:
	error_illegal_ident(); }
}

// CALL Dot SIS expr End
void Parser::parse_main_action_1599() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x40);
	add_opcode_nn(0xCD, 0);
	break;
	default:
	error_illegal_ident(); }
}

// CALL LParen HL RParen End
void Parser::parse_main_action_1600() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_call_function("__z80asm__call_hl");
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xEDEA);
	break;
	default:
	error_illegal_ident(); }
}

// CALL LParen IX RParen End
void Parser::parse_main_action_1601() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_call_function("__z80asm__call_ix");
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDDEA);
	break;
	default:
	error_illegal_ident(); }
}

// CALL LParen IY RParen End
void Parser::parse_main_action_1602() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_call_function("__z80asm__call_iy");
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFDEA);
	break;
	default:
	error_illegal_ident(); }
}

// CALL expr End
void Parser::parse_main_action_1603() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_opcode_nn(0xCD, 0);
	break;
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode_nnn(0xCD, 0);
	break;
	default:
	error_illegal_ident(); }
}

// CALL3 expr End
void Parser::parse_main_action_1604() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	warn_if_expr_in_parens();
	add_opcode_nnn(0xED4C, 0);
	break;
	default:
	error_illegal_ident(); }
}

// CBM expr End
void Parser::parse_main_action_1605() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode_n(0xED00);
	break;
	default:
	error_illegal_ident(); }
}

// CCF End | CMC End
void Parser::parse_main_action_1606() {
	add_opcode(0x3F);
}

// CLR A End
void Parser::parse_main_action_1607() {
	add_opcode(0x3E00);
}

// CLR B End
void Parser::parse_main_action_1608() {
	add_opcode(0x0600);
}

// CLR BC End
void Parser::parse_main_action_1609() {
	add_opcode(0x010000);
}

// CLR C End
void Parser::parse_main_action_1610() {
	add_opcode(0x0E00);
}

// CLR D End
void Parser::parse_main_action_1611() {
	add_opcode(0x1600);
}

// CLR DE End
void Parser::parse_main_action_1612() {
	add_opcode(0x110000);
}

// CLR E End
void Parser::parse_main_action_1613() {
	add_opcode(0x1E00);
}

// CLR H End
void Parser::parse_main_action_1614() {
	add_opcode(0x2600);
}

// CLR HL End
void Parser::parse_main_action_1615() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x210000);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xBF);
	break;
	default:
	error_illegal_ident(); }
}

// CLR IX End
void Parser::parse_main_action_1616() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xDD210000);
	break;
	default:
	error_illegal_ident(); }
}

// CLR IXH End
void Parser::parse_main_action_1617() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDD2600);
	break;
	default:
	error_illegal_ident(); }
}

// CLR IXL End
void Parser::parse_main_action_1618() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDD2E00);
	break;
	default:
	error_illegal_ident(); }
}

// CLR IY End
void Parser::parse_main_action_1619() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xFD210000);
	break;
	default:
	error_illegal_ident(); }
}

// CLR IYH End
void Parser::parse_main_action_1620() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFD2600);
	break;
	default:
	error_illegal_ident(); }
}

// CLR IYL End
void Parser::parse_main_action_1621() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFD2E00);
	break;
	default:
	error_illegal_ident(); }
}

// CLR L End
void Parser::parse_main_action_1622() {
	add_opcode(0x2E00);
}

// CLR LParen HL RParen End
void Parser::parse_main_action_1623() {
	add_opcode(0x3600);
}

// CLR LParen IX RParen End
void Parser::parse_main_action_1624() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xDD360000);
	break;
	default:
	error_illegal_ident(); }
}

// CLR LParen IX expr RParen End
void Parser::parse_main_action_1625() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx(0xDD3600);
	break;
	default:
	error_illegal_ident(); }
}

// CLR LParen IY RParen End
void Parser::parse_main_action_1626() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xFD360000);
	break;
	default:
	error_illegal_ident(); }
}

// CLR LParen IY expr RParen End
void Parser::parse_main_action_1627() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx(0xFD3600);
	break;
	default:
	error_illegal_ident(); }
}

// CMA End | CPL A End | CPL End
void Parser::parse_main_action_1628() {
	add_opcode(0x2F);
}

// CMP A Comma A End | CMP A End | CP A Comma A End | CP A End
void Parser::parse_main_action_1629() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7FBF);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xBF);
	break;
	default:
	error_illegal_ident(); }
}

// CMP A Comma B End | CMP B End | CP A Comma B End | CP B End
void Parser::parse_main_action_1630() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7FB8);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xB8);
	break;
	default:
	error_illegal_ident(); }
}

// CMP A Comma C End | CMP C End | CP A Comma C End | CP C End
void Parser::parse_main_action_1631() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7FB9);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xB9);
	break;
	default:
	error_illegal_ident(); }
}

// CMP A Comma D End | CMP D End | CP A Comma D End | CP D End
void Parser::parse_main_action_1632() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7FBA);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xBA);
	break;
	default:
	error_illegal_ident(); }
}

// CMP A Comma E End | CMP E End | CP A Comma E End | CP E End
void Parser::parse_main_action_1633() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7FBB);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xBB);
	break;
	default:
	error_illegal_ident(); }
}

// CMP A Comma H End | CMP H End | CP A Comma H End | CP H End
void Parser::parse_main_action_1634() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7FBC);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xBC);
	break;
	default:
	error_illegal_ident(); }
}

// CMP A Comma IXH End | CMP IXH End | CP A Comma IXH End | CP IXH End
void Parser::parse_main_action_1635() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDDBC);
	break;
	default:
	error_illegal_ident(); }
}

// CMP A Comma IXL End | CMP IXL End | CP A Comma IXL End | CP IXL End
void Parser::parse_main_action_1636() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDDBD);
	break;
	default:
	error_illegal_ident(); }
}

// CMP A Comma IYH End | CMP IYH End | CP A Comma IYH End | CP IYH End
void Parser::parse_main_action_1637() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFDBC);
	break;
	default:
	error_illegal_ident(); }
}

// CMP A Comma IYL End | CMP IYL End | CP A Comma IYL End | CP IYL End
void Parser::parse_main_action_1638() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFDBD);
	break;
	default:
	error_illegal_ident(); }
}

// CMP A Comma L End | CMP L End | CP A Comma L End | CP L End
void Parser::parse_main_action_1639() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7FBD);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xBD);
	break;
	default:
	error_illegal_ident(); }
}

// CMP A Comma LParen AHL RParen End | CMP LParen AHL RParen End | CP A Comma LParen AHL RParen End | CP LParen AHL RParen End
void Parser::parse_main_action_1640() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xBE);
	break;
	default:
	error_illegal_ident(); }
}

// CMP A Comma LParen AIX RParen End | CMP LParen AIX RParen End | CP A Comma LParen AIX RParen End | CP LParen AIX RParen End
void Parser::parse_main_action_1641() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xDDBE00);
	break;
	default:
	error_illegal_ident(); }
}

// CMP A Comma LParen AIX expr RParen End | CMP LParen AIX expr RParen End | CP A Comma LParen AIX expr RParen End | CP LParen AIX expr RParen End
void Parser::parse_main_action_1642() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xDDBE);
	break;
	default:
	error_illegal_ident(); }
}

// CMP A Comma LParen AIY RParen End | CMP LParen AIY RParen End | CP A Comma LParen AIY RParen End | CP LParen AIY RParen End
void Parser::parse_main_action_1643() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xFDBE00);
	break;
	default:
	error_illegal_ident(); }
}

// CMP A Comma LParen AIY expr RParen End | CMP LParen AIY expr RParen End | CP A Comma LParen AIY expr RParen End | CP LParen AIY expr RParen End
void Parser::parse_main_action_1644() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xFDBE);
	break;
	default:
	error_illegal_ident(); }
}

// CMP A Comma LParen HL Minus RParen End | CMP LParen HL Minus RParen End | CP A Comma LParen HL Minus RParen End | CP LParen HL Minus RParen End
void Parser::parse_main_action_1645() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7FBE);
	add_opcode(0x2B);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xBE);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// CMP A Comma LParen HL Plus RParen End | CMP LParen HL Plus RParen End | CP A Comma LParen HL Plus RParen End | CP LParen HL Plus RParen End
void Parser::parse_main_action_1646() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7FBE);
	add_opcode(0x23);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xBE);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// CMP A Comma LParen HL RParen End | CMP M End | CMP LParen HL RParen End | CP A Comma LParen HL RParen End | CP LParen HL RParen End
void Parser::parse_main_action_1647() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7FBE);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xBE);
	break;
	default:
	error_illegal_ident(); }
}

// CMP A Comma LParen IX RParen End | CMP LParen IX RParen End | CP A Comma LParen IX RParen End | CP LParen IX RParen End
void Parser::parse_main_action_1648() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xDDBE00);
	break;
	default:
	error_illegal_ident(); }
}

// CMP A Comma LParen IX expr RParen End | CMP LParen IX expr RParen End | CP A Comma LParen IX expr RParen End | CP LParen IX expr RParen End
void Parser::parse_main_action_1649() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx(0xDDBE);
	break;
	default:
	error_illegal_ident(); }
}

// CMP A Comma LParen IY RParen End | CMP LParen IY RParen End | CP A Comma LParen IY RParen End | CP LParen IY RParen End
void Parser::parse_main_action_1650() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xFDBE00);
	break;
	default:
	error_illegal_ident(); }
}

// CMP A Comma LParen IY expr RParen End | CMP LParen IY expr RParen End | CP A Comma LParen IY expr RParen End | CP LParen IY expr RParen End
void Parser::parse_main_action_1651() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx(0xFDBE);
	break;
	default:
	error_illegal_ident(); }
}

// CMP A Comma LParen PHL RParen End | CMP LParen PHL RParen End | CP A Comma LParen PHL RParen End | CP LParen PHL RParen End
void Parser::parse_main_action_1652() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xBE);
	break;
	default:
	error_illegal_ident(); }
}

// CMP A Comma LParen PIX RParen End | CMP LParen PIX RParen End | CP A Comma LParen PIX RParen End | CP LParen PIX RParen End
void Parser::parse_main_action_1653() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xDDBE00);
	break;
	default:
	error_illegal_ident(); }
}

// CMP A Comma LParen PIX expr RParen End | CMP LParen PIX expr RParen End | CP A Comma LParen PIX expr RParen End | CP LParen PIX expr RParen End
void Parser::parse_main_action_1654() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xDDBE);
	break;
	default:
	error_illegal_ident(); }
}

// CMP A Comma LParen PIY RParen End | CMP LParen PIY RParen End | CP A Comma LParen PIY RParen End | CP LParen PIY RParen End
void Parser::parse_main_action_1655() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xFDBE00);
	break;
	default:
	error_illegal_ident(); }
}

// CMP A Comma LParen PIY expr RParen End | CMP LParen PIY expr RParen End | CP A Comma LParen PIY expr RParen End | CP LParen PIY expr RParen End
void Parser::parse_main_action_1656() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xFDBE);
	break;
	default:
	error_illegal_ident(); }
}

// CMP A Comma LParen XHL RParen End | CMP LParen XHL RParen End | CP A Comma LParen XHL RParen End | CP LParen XHL RParen End
void Parser::parse_main_action_1657() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xBE);
	break;
	default:
	error_illegal_ident(); }
}

// CMP A Comma LParen XIX RParen End | CMP LParen XIX RParen End | CP A Comma LParen XIX RParen End | CP LParen XIX RParen End
void Parser::parse_main_action_1658() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xDDBE00);
	break;
	default:
	error_illegal_ident(); }
}

// CMP A Comma LParen XIX expr RParen End | CMP LParen XIX expr RParen End | CP A Comma LParen XIX expr RParen End | CP LParen XIX expr RParen End
void Parser::parse_main_action_1659() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xDDBE);
	break;
	default:
	error_illegal_ident(); }
}

// CMP A Comma LParen XIY RParen End | CMP LParen XIY RParen End | CP A Comma LParen XIY RParen End | CP LParen XIY RParen End
void Parser::parse_main_action_1660() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xFDBE00);
	break;
	default:
	error_illegal_ident(); }
}

// CMP A Comma LParen XIY expr RParen End | CMP LParen XIY expr RParen End | CP A Comma LParen XIY expr RParen End | CP LParen XIY expr RParen End
void Parser::parse_main_action_1661() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xFDBE);
	break;
	default:
	error_illegal_ident(); }
}

// CMP A Comma LParen YHL RParen End | CMP LParen YHL RParen End | CP A Comma LParen YHL RParen End | CP LParen YHL RParen End
void Parser::parse_main_action_1662() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xBE);
	break;
	default:
	error_illegal_ident(); }
}

// CMP A Comma LParen YIX RParen End | CMP LParen YIX RParen End | CP A Comma LParen YIX RParen End | CP LParen YIX RParen End
void Parser::parse_main_action_1663() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xDDBE00);
	break;
	default:
	error_illegal_ident(); }
}

// CMP A Comma LParen YIX expr RParen End | CMP LParen YIX expr RParen End | CP A Comma LParen YIX expr RParen End | CP LParen YIX expr RParen End
void Parser::parse_main_action_1664() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xDDBE);
	break;
	default:
	error_illegal_ident(); }
}

// CMP A Comma LParen YIY RParen End | CMP LParen YIY RParen End | CP A Comma LParen YIY RParen End | CP LParen YIY RParen End
void Parser::parse_main_action_1665() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xFDBE00);
	break;
	default:
	error_illegal_ident(); }
}

// CMP A Comma LParen YIY expr RParen End | CMP LParen YIY expr RParen End | CP A Comma LParen YIY expr RParen End | CP LParen YIY expr RParen End
void Parser::parse_main_action_1666() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xFDBE);
	break;
	default:
	error_illegal_ident(); }
}

// CMP A Comma LParen ZHL RParen End | CMP LParen ZHL RParen End | CP A Comma LParen ZHL RParen End | CP LParen ZHL RParen End
void Parser::parse_main_action_1667() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xBE);
	break;
	default:
	error_illegal_ident(); }
}

// CMP A Comma LParen ZIX RParen End | CMP LParen ZIX RParen End | CP A Comma LParen ZIX RParen End | CP LParen ZIX RParen End
void Parser::parse_main_action_1668() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xDDBE00);
	break;
	default:
	error_illegal_ident(); }
}

// CMP A Comma LParen ZIX expr RParen End | CMP LParen ZIX expr RParen End | CP A Comma LParen ZIX expr RParen End | CP LParen ZIX expr RParen End
void Parser::parse_main_action_1669() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xDDBE);
	break;
	default:
	error_illegal_ident(); }
}

// CMP A Comma LParen ZIY RParen End | CMP LParen ZIY RParen End | CP A Comma LParen ZIY RParen End | CP LParen ZIY RParen End
void Parser::parse_main_action_1670() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xFDBE00);
	break;
	default:
	error_illegal_ident(); }
}

// CMP A Comma LParen ZIY expr RParen End | CMP LParen ZIY expr RParen End | CP A Comma LParen ZIY expr RParen End | CP LParen ZIY expr RParen End
void Parser::parse_main_action_1671() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xFDBE);
	break;
	default:
	error_illegal_ident(); }
}

// CMP A Comma expr End | CMP expr End | CP A Comma expr End | CP expr End | CPI expr End
void Parser::parse_main_action_1672() {
	warn_if_expr_in_parens();
	add_opcode_n(0xFE);
}

// CMP HL Comma DE End | CP HL Comma DE End
void Parser::parse_main_action_1673() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xED48);
	break;
	default:
	error_illegal_ident(); }
}

// CMP HL Comma expr End | CP HL Comma expr End
void Parser::parse_main_action_1674() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode_s(0x48);
	break;
	default:
	error_illegal_ident(); }
}

// CMP JKHL Comma BCDE End | CP JKHL Comma BCDE End
void Parser::parse_main_action_1675() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xED58);
	break;
	default:
	error_illegal_ident(); }
}

// CMP Dot L A Comma LParen HL Minus RParen End | CMP Dot L LParen HL Minus RParen End | CMP Dot LIS A Comma LParen HL Minus RParen End | CMP Dot LIS LParen HL Minus RParen End | CP Dot L A Comma LParen HL Minus RParen End | CP Dot L LParen HL Minus RParen End | CP Dot LIS A Comma LParen HL Minus RParen End | CP Dot LIS LParen HL Minus RParen End
void Parser::parse_main_action_1676() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xBE);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// CMP Dot L A Comma LParen HL Plus RParen End | CMP Dot L LParen HL Plus RParen End | CMP Dot LIS A Comma LParen HL Plus RParen End | CMP Dot LIS LParen HL Plus RParen End | CP Dot L A Comma LParen HL Plus RParen End | CP Dot L LParen HL Plus RParen End | CP Dot LIS A Comma LParen HL Plus RParen End | CP Dot LIS LParen HL Plus RParen End
void Parser::parse_main_action_1677() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xBE);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// CMP Dot L A Comma LParen HL RParen End | CMP Dot L LParen HL RParen End | CMP Dot LIS A Comma LParen HL RParen End | CMP Dot LIS LParen HL RParen End | CP Dot L A Comma LParen HL RParen End | CP Dot L LParen HL RParen End | CP Dot LIS A Comma LParen HL RParen End | CP Dot LIS LParen HL RParen End
void Parser::parse_main_action_1678() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xBE);
	break;
	default:
	error_illegal_ident(); }
}

// CMP Dot L A Comma LParen IX RParen End | CMP Dot L LParen IX RParen End | CMP Dot LIS A Comma LParen IX RParen End | CMP Dot LIS LParen IX RParen End | CP Dot L A Comma LParen IX RParen End | CP Dot L LParen IX RParen End | CP Dot LIS A Comma LParen IX RParen End | CP Dot LIS LParen IX RParen End
void Parser::parse_main_action_1679() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xDDBE00);
	break;
	default:
	error_illegal_ident(); }
}

// CMP Dot L A Comma LParen IX expr RParen End | CMP Dot L LParen IX expr RParen End | CMP Dot LIS A Comma LParen IX expr RParen End | CMP Dot LIS LParen IX expr RParen End | CP Dot L A Comma LParen IX expr RParen End | CP Dot L LParen IX expr RParen End | CP Dot LIS A Comma LParen IX expr RParen End | CP Dot LIS LParen IX expr RParen End
void Parser::parse_main_action_1680() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xDDBE);
	break;
	default:
	error_illegal_ident(); }
}

// CMP Dot L A Comma LParen IY RParen End | CMP Dot L LParen IY RParen End | CMP Dot LIS A Comma LParen IY RParen End | CMP Dot LIS LParen IY RParen End | CP Dot L A Comma LParen IY RParen End | CP Dot L LParen IY RParen End | CP Dot LIS A Comma LParen IY RParen End | CP Dot LIS LParen IY RParen End
void Parser::parse_main_action_1681() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xFDBE00);
	break;
	default:
	error_illegal_ident(); }
}

// CMP Dot L A Comma LParen IY expr RParen End | CMP Dot L LParen IY expr RParen End | CMP Dot LIS A Comma LParen IY expr RParen End | CMP Dot LIS LParen IY expr RParen End | CP Dot L A Comma LParen IY expr RParen End | CP Dot L LParen IY expr RParen End | CP Dot LIS A Comma LParen IY expr RParen End | CP Dot LIS LParen IY expr RParen End
void Parser::parse_main_action_1682() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xFDBE);
	break;
	default:
	error_illegal_ident(); }
}

// CMP Dot S A Comma LParen HL Minus RParen End | CMP Dot S LParen HL Minus RParen End | CMP Dot SIL A Comma LParen HL Minus RParen End | CMP Dot SIL LParen HL Minus RParen End | CP Dot S A Comma LParen HL Minus RParen End | CP Dot S LParen HL Minus RParen End | CP Dot SIL A Comma LParen HL Minus RParen End | CP Dot SIL LParen HL Minus RParen End
void Parser::parse_main_action_1683() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xBE);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// CMP Dot S A Comma LParen HL Plus RParen End | CMP Dot S LParen HL Plus RParen End | CMP Dot SIL A Comma LParen HL Plus RParen End | CMP Dot SIL LParen HL Plus RParen End | CP Dot S A Comma LParen HL Plus RParen End | CP Dot S LParen HL Plus RParen End | CP Dot SIL A Comma LParen HL Plus RParen End | CP Dot SIL LParen HL Plus RParen End
void Parser::parse_main_action_1684() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xBE);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// CMP Dot S A Comma LParen HL RParen End | CMP Dot S LParen HL RParen End | CMP Dot SIL A Comma LParen HL RParen End | CMP Dot SIL LParen HL RParen End | CP Dot S A Comma LParen HL RParen End | CP Dot S LParen HL RParen End | CP Dot SIL A Comma LParen HL RParen End | CP Dot SIL LParen HL RParen End
void Parser::parse_main_action_1685() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xBE);
	break;
	default:
	error_illegal_ident(); }
}

// CMP Dot S A Comma LParen IX RParen End | CMP Dot S LParen IX RParen End | CMP Dot SIL A Comma LParen IX RParen End | CMP Dot SIL LParen IX RParen End | CP Dot S A Comma LParen IX RParen End | CP Dot S LParen IX RParen End | CP Dot SIL A Comma LParen IX RParen End | CP Dot SIL LParen IX RParen End
void Parser::parse_main_action_1686() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xDDBE00);
	break;
	default:
	error_illegal_ident(); }
}

// CMP Dot S A Comma LParen IX expr RParen End | CMP Dot S LParen IX expr RParen End | CMP Dot SIL A Comma LParen IX expr RParen End | CMP Dot SIL LParen IX expr RParen End | CP Dot S A Comma LParen IX expr RParen End | CP Dot S LParen IX expr RParen End | CP Dot SIL A Comma LParen IX expr RParen End | CP Dot SIL LParen IX expr RParen End
void Parser::parse_main_action_1687() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xDDBE);
	break;
	default:
	error_illegal_ident(); }
}

// CMP Dot S A Comma LParen IY RParen End | CMP Dot S LParen IY RParen End | CMP Dot SIL A Comma LParen IY RParen End | CMP Dot SIL LParen IY RParen End | CP Dot S A Comma LParen IY RParen End | CP Dot S LParen IY RParen End | CP Dot SIL A Comma LParen IY RParen End | CP Dot SIL LParen IY RParen End
void Parser::parse_main_action_1688() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xFDBE00);
	break;
	default:
	error_illegal_ident(); }
}

// CMP Dot S A Comma LParen IY expr RParen End | CMP Dot S LParen IY expr RParen End | CMP Dot SIL A Comma LParen IY expr RParen End | CMP Dot SIL LParen IY expr RParen End | CP Dot S A Comma LParen IY expr RParen End | CP Dot S LParen IY expr RParen End | CP Dot SIL A Comma LParen IY expr RParen End | CP Dot SIL LParen IY expr RParen End
void Parser::parse_main_action_1689() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xFDBE);
	break;
	default:
	error_illegal_ident(); }
}

// CONVC PW End
void Parser::parse_main_action_1690() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xED0E);
	break;
	default:
	error_illegal_ident(); }
}

// CONVC PX End
void Parser::parse_main_action_1691() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xED1E);
	break;
	default:
	error_illegal_ident(); }
}

// CONVC PY End
void Parser::parse_main_action_1692() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xED2E);
	break;
	default:
	error_illegal_ident(); }
}

// CONVC PZ End
void Parser::parse_main_action_1693() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xED3E);
	break;
	default:
	error_illegal_ident(); }
}

// CONVD PW End
void Parser::parse_main_action_1694() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xED0F);
	break;
	default:
	error_illegal_ident(); }
}

// CONVD PX End
void Parser::parse_main_action_1695() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xED1F);
	break;
	default:
	error_illegal_ident(); }
}

// CONVD PY End
void Parser::parse_main_action_1696() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xED2F);
	break;
	default:
	error_illegal_ident(); }
}

// CONVD PZ End
void Parser::parse_main_action_1697() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xED3F);
	break;
	default:
	error_illegal_ident(); }
}

// COPY End
void Parser::parse_main_action_1698() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xED80);
	break;
	default:
	error_illegal_ident(); }
}

// COPYR End
void Parser::parse_main_action_1699() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xED88);
	break;
	default:
	error_illegal_ident(); }
}

// CPD X End
void Parser::parse_main_action_1700() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xEDE9);
	break;
	default:
	error_illegal_ident(); }
}

// CPD Dot L End | CPD Dot LIS End
void Parser::parse_main_action_1701() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xEDA9);
	break;
	default:
	error_illegal_ident(); }
}

// CPD Dot S End | CPD Dot SIL End
void Parser::parse_main_action_1702() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xEDA9);
	break;
	default:
	error_illegal_ident(); }
}

// CPD End
void Parser::parse_main_action_1703() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_call_function("__z80asm__cpd");
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xEDA9);
	break;
	default:
	error_illegal_ident(); }
}

// CPDR X End
void Parser::parse_main_action_1704() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xEDF9);
	break;
	default:
	error_illegal_ident(); }
}

// CPDR Dot L End | CPDR Dot LIS End
void Parser::parse_main_action_1705() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xEDB9);
	break;
	default:
	error_illegal_ident(); }
}

// CPDR Dot S End | CPDR Dot SIL End
void Parser::parse_main_action_1706() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xEDB9);
	break;
	default:
	error_illegal_ident(); }
}

// CPDR End
void Parser::parse_main_action_1707() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_call_function("__z80asm__cpdr");
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xEDB9);
	break;
	default:
	error_illegal_ident(); }
}

// CPI X End
void Parser::parse_main_action_1708() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xEDE1);
	break;
	default:
	error_illegal_ident(); }
}

// CPI Dot L End | CPI Dot LIS End
void Parser::parse_main_action_1709() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xEDA1);
	break;
	default:
	error_illegal_ident(); }
}

// CPI Dot S End | CPI Dot SIL End
void Parser::parse_main_action_1710() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xEDA1);
	break;
	default:
	error_illegal_ident(); }
}

// CPI End
void Parser::parse_main_action_1711() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_call_function("__z80asm__cpi");
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xEDA1);
	break;
	default:
	error_illegal_ident(); }
}

// CPIR X End
void Parser::parse_main_action_1712() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xEDF1);
	break;
	default:
	error_illegal_ident(); }
}

// CPIR Dot L End | CPIR Dot LIS End
void Parser::parse_main_action_1713() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xEDB1);
	break;
	default:
	error_illegal_ident(); }
}

// CPIR Dot S End | CPIR Dot SIL End
void Parser::parse_main_action_1714() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xEDB1);
	break;
	default:
	error_illegal_ident(); }
}

// CPIR End
void Parser::parse_main_action_1715() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_call_function("__z80asm__cpir");
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xEDB1);
	break;
	default:
	error_illegal_ident(); }
}

// DAA End
void Parser::parse_main_action_1716() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_call_function("__z80asm__daa");
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x27);
	break;
	default:
	error_illegal_ident(); }
}

// DCR A End | DEC A End
void Parser::parse_main_action_1717() {
	add_opcode(0x3D);
}

// DCR B End | DEC B End
void Parser::parse_main_action_1718() {
	add_opcode(0x05);
}

// DCR C End | DEC C End
void Parser::parse_main_action_1719() {
	add_opcode(0x0D);
}

// DCR D End | DEC D End
void Parser::parse_main_action_1720() {
	add_opcode(0x15);
}

// DCR E End | DEC E End
void Parser::parse_main_action_1721() {
	add_opcode(0x1D);
}

// DCR H End | DEC H End
void Parser::parse_main_action_1722() {
	add_opcode(0x25);
}

// DCR L End | DEC L End
void Parser::parse_main_action_1723() {
	add_opcode(0x2D);
}

// DCR M End | DEC LParen HL RParen End
void Parser::parse_main_action_1724() {
	add_opcode(0x35);
}

// DCX B End | DCX BC End | DEC BC End
void Parser::parse_main_action_1725() {
	add_opcode(0x0B);
}

// DCX D End | DCX DE End | DEC DE End
void Parser::parse_main_action_1726() {
	add_opcode(0x1B);
}

// DCX H End | DCX HL End | DEC HL End
void Parser::parse_main_action_1727() {
	add_opcode(0x2B);
}

// DCX SP End | DEC SP End
void Parser::parse_main_action_1728() {
	add_opcode(0x3B);
}

// DDB | DEFDB | WORDBE
void Parser::parse_main_action_1729() {
	parse_int16be_data();
}

// DEC ABC End
void Parser::parse_main_action_1730() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0x0B);
	break;
	default:
	error_illegal_ident(); }
}

// DEC ADE End
void Parser::parse_main_action_1731() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0x1B);
	break;
	default:
	error_illegal_ident(); }
}

// DEC AHL End
void Parser::parse_main_action_1732() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// DEC AIX End
void Parser::parse_main_action_1733() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xDD2B);
	break;
	default:
	error_illegal_ident(); }
}

// DEC AIY End
void Parser::parse_main_action_1734() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xFD2B);
	break;
	default:
	error_illegal_ident(); }
}

// DEC ASP End
void Parser::parse_main_action_1735() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0x3B);
	break;
	default:
	error_illegal_ident(); }
}

// DEC IX End
void Parser::parse_main_action_1736() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xDD2B);
	break;
	default:
	error_illegal_ident(); }
}

// DEC IXH End
void Parser::parse_main_action_1737() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDD25);
	break;
	default:
	error_illegal_ident(); }
}

// DEC IXL End
void Parser::parse_main_action_1738() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDD2D);
	break;
	default:
	error_illegal_ident(); }
}

// DEC IY End
void Parser::parse_main_action_1739() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xFD2B);
	break;
	default:
	error_illegal_ident(); }
}

// DEC IYH End
void Parser::parse_main_action_1740() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFD25);
	break;
	default:
	error_illegal_ident(); }
}

// DEC IYL End
void Parser::parse_main_action_1741() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFD2D);
	break;
	default:
	error_illegal_ident(); }
}

// DEC XBC End
void Parser::parse_main_action_1742() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0x0B);
	break;
	default:
	error_illegal_ident(); }
}

// DEC XDE End
void Parser::parse_main_action_1743() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0x1B);
	break;
	default:
	error_illegal_ident(); }
}

// DEC XHL End
void Parser::parse_main_action_1744() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// DEC XIX End
void Parser::parse_main_action_1745() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xDD2B);
	break;
	default:
	error_illegal_ident(); }
}

// DEC XIY End
void Parser::parse_main_action_1746() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xFD2B);
	break;
	default:
	error_illegal_ident(); }
}

// DEC XSP End
void Parser::parse_main_action_1747() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0x3B);
	break;
	default:
	error_illegal_ident(); }
}

// DEC YBC End
void Parser::parse_main_action_1748() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0x0B);
	break;
	default:
	error_illegal_ident(); }
}

// DEC YDE End
void Parser::parse_main_action_1749() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0x1B);
	break;
	default:
	error_illegal_ident(); }
}

// DEC YHL End
void Parser::parse_main_action_1750() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// DEC YIX End
void Parser::parse_main_action_1751() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xDD2B);
	break;
	default:
	error_illegal_ident(); }
}

// DEC YIY End
void Parser::parse_main_action_1752() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xFD2B);
	break;
	default:
	error_illegal_ident(); }
}

// DEC YSP End
void Parser::parse_main_action_1753() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0x3B);
	break;
	default:
	error_illegal_ident(); }
}

// DEC ZBC End
void Parser::parse_main_action_1754() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0x0B);
	break;
	default:
	error_illegal_ident(); }
}

// DEC ZDE End
void Parser::parse_main_action_1755() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0x1B);
	break;
	default:
	error_illegal_ident(); }
}

// DEC ZHL End
void Parser::parse_main_action_1756() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// DEC ZIX End
void Parser::parse_main_action_1757() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xDD2B);
	break;
	default:
	error_illegal_ident(); }
}

// DEC ZIY End
void Parser::parse_main_action_1758() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xFD2B);
	break;
	default:
	error_illegal_ident(); }
}

// DEC ZSP End
void Parser::parse_main_action_1759() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0x3B);
	break;
	default:
	error_illegal_ident(); }
}

// DEC Dot L BC End | DEC Dot LIS BC End
void Parser::parse_main_action_1760() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x0B);
	break;
	default:
	error_illegal_ident(); }
}

// DEC Dot L DE End | DEC Dot LIS DE End
void Parser::parse_main_action_1761() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x1B);
	break;
	default:
	error_illegal_ident(); }
}

// DEC Dot L HL End | DEC Dot LIS HL End
void Parser::parse_main_action_1762() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// DEC Dot L IX End | DEC Dot LIS IX End
void Parser::parse_main_action_1763() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xDD2B);
	break;
	default:
	error_illegal_ident(); }
}

// DEC Dot L IY End | DEC Dot LIS IY End
void Parser::parse_main_action_1764() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xFD2B);
	break;
	default:
	error_illegal_ident(); }
}

// DEC Dot L SP End | DEC Dot LIS SP End
void Parser::parse_main_action_1765() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x3B);
	break;
	default:
	error_illegal_ident(); }
}

// DEC Dot L LParen HL Minus RParen End | DEC Dot LIS LParen HL Minus RParen End
void Parser::parse_main_action_1766() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x35);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// DEC Dot L LParen HL Plus RParen End | DEC Dot LIS LParen HL Plus RParen End
void Parser::parse_main_action_1767() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x35);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// DEC Dot L LParen HL RParen End | DEC Dot LIS LParen HL RParen End
void Parser::parse_main_action_1768() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x35);
	break;
	default:
	error_illegal_ident(); }
}

// DEC Dot L LParen IX RParen End | DEC Dot LIS LParen IX RParen End
void Parser::parse_main_action_1769() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xDD3500);
	break;
	default:
	error_illegal_ident(); }
}

// DEC Dot L LParen IX expr RParen End | DEC Dot LIS LParen IX expr RParen End
void Parser::parse_main_action_1770() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xDD35);
	break;
	default:
	error_illegal_ident(); }
}

// DEC Dot L LParen IY RParen End | DEC Dot LIS LParen IY RParen End
void Parser::parse_main_action_1771() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xFD3500);
	break;
	default:
	error_illegal_ident(); }
}

// DEC Dot L LParen IY expr RParen End | DEC Dot LIS LParen IY expr RParen End
void Parser::parse_main_action_1772() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xFD35);
	break;
	default:
	error_illegal_ident(); }
}

// DEC Dot S BC End | DEC Dot SIL BC End
void Parser::parse_main_action_1773() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x0B);
	break;
	default:
	error_illegal_ident(); }
}

// DEC Dot S DE End | DEC Dot SIL DE End
void Parser::parse_main_action_1774() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x1B);
	break;
	default:
	error_illegal_ident(); }
}

// DEC Dot S HL End | DEC Dot SIL HL End
void Parser::parse_main_action_1775() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// DEC Dot S IX End | DEC Dot SIL IX End
void Parser::parse_main_action_1776() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xDD2B);
	break;
	default:
	error_illegal_ident(); }
}

// DEC Dot S IY End | DEC Dot SIL IY End
void Parser::parse_main_action_1777() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xFD2B);
	break;
	default:
	error_illegal_ident(); }
}

// DEC Dot S SP End | DEC Dot SIL SP End
void Parser::parse_main_action_1778() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x3B);
	break;
	default:
	error_illegal_ident(); }
}

// DEC Dot S LParen HL Minus RParen End | DEC Dot SIL LParen HL Minus RParen End
void Parser::parse_main_action_1779() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x35);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// DEC Dot S LParen HL Plus RParen End | DEC Dot SIL LParen HL Plus RParen End
void Parser::parse_main_action_1780() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x35);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// DEC Dot S LParen HL RParen End | DEC Dot SIL LParen HL RParen End
void Parser::parse_main_action_1781() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x35);
	break;
	default:
	error_illegal_ident(); }
}

// DEC Dot S LParen IX RParen End | DEC Dot SIL LParen IX RParen End
void Parser::parse_main_action_1782() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xDD3500);
	break;
	default:
	error_illegal_ident(); }
}

// DEC Dot S LParen IX expr RParen End | DEC Dot SIL LParen IX expr RParen End
void Parser::parse_main_action_1783() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xDD35);
	break;
	default:
	error_illegal_ident(); }
}

// DEC Dot S LParen IY RParen End | DEC Dot SIL LParen IY RParen End
void Parser::parse_main_action_1784() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xFD3500);
	break;
	default:
	error_illegal_ident(); }
}

// DEC Dot S LParen IY expr RParen End | DEC Dot SIL LParen IY expr RParen End
void Parser::parse_main_action_1785() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xFD35);
	break;
	default:
	error_illegal_ident(); }
}

// DEC LParen AHL RParen End
void Parser::parse_main_action_1786() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0x35);
	break;
	default:
	error_illegal_ident(); }
}

// DEC LParen AIX RParen End
void Parser::parse_main_action_1787() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xDD3500);
	break;
	default:
	error_illegal_ident(); }
}

// DEC LParen AIX expr RParen End
void Parser::parse_main_action_1788() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xDD35);
	break;
	default:
	error_illegal_ident(); }
}

// DEC LParen AIY RParen End
void Parser::parse_main_action_1789() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xFD3500);
	break;
	default:
	error_illegal_ident(); }
}

// DEC LParen AIY expr RParen End
void Parser::parse_main_action_1790() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xFD35);
	break;
	default:
	error_illegal_ident(); }
}

// DEC LParen HL Minus RParen End
void Parser::parse_main_action_1791() {
	add_opcode(0x35);
	add_opcode(0x2B);
}

// DEC LParen HL Plus RParen End
void Parser::parse_main_action_1792() {
	add_opcode(0x35);
	add_opcode(0x23);
}

// DEC LParen IX RParen End
void Parser::parse_main_action_1793() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xDD3500);
	break;
	default:
	error_illegal_ident(); }
}

// DEC LParen IX expr RParen End
void Parser::parse_main_action_1794() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx(0xDD35);
	break;
	default:
	error_illegal_ident(); }
}

// DEC LParen IY RParen End
void Parser::parse_main_action_1795() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xFD3500);
	break;
	default:
	error_illegal_ident(); }
}

// DEC LParen IY expr RParen End
void Parser::parse_main_action_1796() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx(0xFD35);
	break;
	default:
	error_illegal_ident(); }
}

// DEC LParen PHL RParen End
void Parser::parse_main_action_1797() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0x35);
	break;
	default:
	error_illegal_ident(); }
}

// DEC LParen PIX RParen End
void Parser::parse_main_action_1798() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xDD3500);
	break;
	default:
	error_illegal_ident(); }
}

// DEC LParen PIX expr RParen End
void Parser::parse_main_action_1799() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xDD35);
	break;
	default:
	error_illegal_ident(); }
}

// DEC LParen PIY RParen End
void Parser::parse_main_action_1800() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xFD3500);
	break;
	default:
	error_illegal_ident(); }
}

// DEC LParen PIY expr RParen End
void Parser::parse_main_action_1801() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xFD35);
	break;
	default:
	error_illegal_ident(); }
}

// DEC LParen XHL RParen End
void Parser::parse_main_action_1802() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0x35);
	break;
	default:
	error_illegal_ident(); }
}

// DEC LParen XIX RParen End
void Parser::parse_main_action_1803() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xDD3500);
	break;
	default:
	error_illegal_ident(); }
}

// DEC LParen XIX expr RParen End
void Parser::parse_main_action_1804() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xDD35);
	break;
	default:
	error_illegal_ident(); }
}

// DEC LParen XIY RParen End
void Parser::parse_main_action_1805() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xFD3500);
	break;
	default:
	error_illegal_ident(); }
}

// DEC LParen XIY expr RParen End
void Parser::parse_main_action_1806() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xFD35);
	break;
	default:
	error_illegal_ident(); }
}

// DEC LParen YHL RParen End
void Parser::parse_main_action_1807() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0x35);
	break;
	default:
	error_illegal_ident(); }
}

// DEC LParen YIX RParen End
void Parser::parse_main_action_1808() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xDD3500);
	break;
	default:
	error_illegal_ident(); }
}

// DEC LParen YIX expr RParen End
void Parser::parse_main_action_1809() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xDD35);
	break;
	default:
	error_illegal_ident(); }
}

// DEC LParen YIY RParen End
void Parser::parse_main_action_1810() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xFD3500);
	break;
	default:
	error_illegal_ident(); }
}

// DEC LParen YIY expr RParen End
void Parser::parse_main_action_1811() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xFD35);
	break;
	default:
	error_illegal_ident(); }
}

// DEC LParen ZHL RParen End
void Parser::parse_main_action_1812() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0x35);
	break;
	default:
	error_illegal_ident(); }
}

// DEC LParen ZIX RParen End
void Parser::parse_main_action_1813() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xDD3500);
	break;
	default:
	error_illegal_ident(); }
}

// DEC LParen ZIX expr RParen End
void Parser::parse_main_action_1814() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xDD35);
	break;
	default:
	error_illegal_ident(); }
}

// DEC LParen ZIY RParen End
void Parser::parse_main_action_1815() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xFD3500);
	break;
	default:
	error_illegal_ident(); }
}

// DEC LParen ZIY expr RParen End
void Parser::parse_main_action_1816() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xFD35);
	break;
	default:
	error_illegal_ident(); }
}

// DEFP | DP | PTR
void Parser::parse_main_action_1817() {
	parse_int24_data();
}

// DEFQ | DQ | DWORD
void Parser::parse_main_action_1818() {
	parse_int32_data();
}

// DEFS const_expr Comma String End | DS const_expr Comma String End
void Parser::parse_main_action_1819() {
	do_defs_n_str(m_line.peek(-2).svalue());
}

// DEFS const_expr Comma const_expr End | DS const_expr Comma const_expr End
void Parser::parse_main_action_1820() {
	do_defs_n_n();
}

// DEFS const_expr End | DS const_expr End
void Parser::parse_main_action_1821() {
	do_defs_n();
}

// DEFW | DW | WORD
void Parser::parse_main_action_1822() {
	parse_int16_data();
}

// DI End
void Parser::parse_main_action_1823() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xF3);
	break;
	default:
	error_illegal_ident(); }
}

// DIV DEHL Comma BC End
void Parser::parse_main_action_1824() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xED75);
	break;
	default:
	error_illegal_ident(); }
}

// DIV HL Comma A End
void Parser::parse_main_action_1825() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xED74);
	break;
	default:
	error_illegal_ident(); }
}

// DIVS DEHL Comma BC End
void Parser::parse_main_action_1826() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xED7D);
	break;
	default:
	error_illegal_ident(); }
}

// DIVS HL Comma A End
void Parser::parse_main_action_1827() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xED7C);
	break;
	default:
	error_illegal_ident(); }
}

// DJNZ B Comma expr End | DJNZ expr End
void Parser::parse_main_action_1828() {
	switch (g_args.cpu()) {
	case CPU_GBZ80: 
	warn_if_expr_in_parens();
	add_jump_relative(0x0520);
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_jump_relative(0x10);
	break;
	case CPU_8080: case CPU_8085: 
	warn_if_expr_in_parens();
	add_opcode_nn(0x5C2, 0);
	break;
	default:
	error_illegal_ident(); }
}

// DSUB End | SUB HL Comma BC End
void Parser::parse_main_action_1829() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_call_function("__z80asm__sub_hl_bc");
	break;
	case CPU_8085: 
	add_opcode(0x08);
	break;
	default:
	error_illegal_ident(); }
}

// DWJNZ BC Comma expr End | DWJNZ expr End
void Parser::parse_main_action_1830() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_jump_relative(0xED10);
	break;
	default:
	error_illegal_ident(); }
}

// EI End
void Parser::parse_main_action_1831() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xFB);
	break;
	default:
	error_illegal_ident(); }
}

// EX AF Comma AF End | EX AF Comma AF1 End | EX AF1 Comma AF End
void Parser::parse_main_action_1832() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x08);
	break;
	default:
	error_illegal_ident(); }
}

// EX BC Comma HL End | EX HL Comma BC End
void Parser::parse_main_action_1833() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xB3);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xE5);
	add_opcode(0xC5);
	add_opcode(0xE1);
	add_opcode(0xC1);
	break;
	default:
	error_illegal_ident(); }
}

// EX BC1 Comma HL End | EX HL Comma BC1 End
void Parser::parse_main_action_1834() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xED74);
	break;
	default:
	error_illegal_ident(); }
}

// EX BCDE Comma JKHL End | EX JKHL Comma BCDE End
void Parser::parse_main_action_1835() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xB4);
	break;
	default:
	error_illegal_ident(); }
}

// EX DE Comma HL End | EX HL Comma DE End | XCHG End
void Parser::parse_main_action_1836() {
	switch (g_args.cpu()) {
	case CPU_GBZ80: 
	add_opcode(0xE5);
	add_opcode(0xD5);
	add_opcode(0xE1);
	add_opcode(0xD1);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xEB);
	break;
	default:
	error_illegal_ident(); }
}

// EX DE1 Comma HL End | EX HL Comma DE1 End
void Parser::parse_main_action_1837() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xE3);
	break;
	default:
	error_illegal_ident(); }
}

// EX HL Comma JK End | EX JK Comma HL End
void Parser::parse_main_action_1838() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xB9);
	break;
	default:
	error_illegal_ident(); }
}

// EX HL Comma JK1 End | EX JK1 Comma HL End
void Parser::parse_main_action_1839() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xED7C);
	break;
	default:
	error_illegal_ident(); }
}

// EX Dot L LParen SP RParen Comma HL End | EX Dot LIS LParen SP RParen Comma HL End
void Parser::parse_main_action_1840() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xE3);
	break;
	default:
	error_illegal_ident(); }
}

// EX Dot L LParen SP RParen Comma IX End | EX Dot LIS LParen SP RParen Comma IX End
void Parser::parse_main_action_1841() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xDDE3);
	break;
	default:
	error_illegal_ident(); }
}

// EX Dot L LParen SP RParen Comma IY End | EX Dot LIS LParen SP RParen Comma IY End
void Parser::parse_main_action_1842() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xFDE3);
	break;
	default:
	error_illegal_ident(); }
}

// EX Dot S LParen SP RParen Comma HL End | EX Dot SIL LParen SP RParen Comma HL End
void Parser::parse_main_action_1843() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xE3);
	break;
	default:
	error_illegal_ident(); }
}

// EX Dot S LParen SP RParen Comma IX End | EX Dot SIL LParen SP RParen Comma IX End
void Parser::parse_main_action_1844() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xDDE3);
	break;
	default:
	error_illegal_ident(); }
}

// EX Dot S LParen SP RParen Comma IY End | EX Dot SIL LParen SP RParen Comma IY End
void Parser::parse_main_action_1845() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xFDE3);
	break;
	default:
	error_illegal_ident(); }
}

// EX LParen SP RParen Comma HL End | XTHL End
void Parser::parse_main_action_1846() {
	switch (g_args.cpu()) {
	case CPU_GBZ80: 
	add_call_function("__z80asm__ex_sp_hl");
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xE3);
	break;
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xED54);
	break;
	default:
	error_illegal_ident(); }
}

// EX LParen SP RParen Comma IX End
void Parser::parse_main_action_1847() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xDDE3);
	break;
	default:
	error_illegal_ident(); }
}

// EX LParen SP RParen Comma IY End
void Parser::parse_main_action_1848() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xFDE3);
	break;
	default:
	error_illegal_ident(); }
}

// EXP End
void Parser::parse_main_action_1849() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xEDD9);
	break;
	default:
	error_illegal_ident(); }
}

// EXTERN | LIB | XREF
void Parser::parse_main_action_1850() {
	parse_symbol_declare(Symbol::Scope::Extern);
}

// EXX End
void Parser::parse_main_action_1851() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xD9);
	break;
	default:
	error_illegal_ident(); }
}

// FLAG C Comma HL End
void Parser::parse_main_action_1852() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xEDDC);
	break;
	default:
	error_illegal_ident(); }
}

// FLAG GT Comma HL End
void Parser::parse_main_action_1853() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xEDA4);
	break;
	default:
	error_illegal_ident(); }
}

// FLAG GTU Comma HL End
void Parser::parse_main_action_1854() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xEDAC);
	break;
	default:
	error_illegal_ident(); }
}

// FLAG LT Comma HL End
void Parser::parse_main_action_1855() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xEDB4);
	break;
	default:
	error_illegal_ident(); }
}

// FLAG NC Comma HL End
void Parser::parse_main_action_1856() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xEDD4);
	break;
	default:
	error_illegal_ident(); }
}

// FLAG NZ Comma HL End
void Parser::parse_main_action_1857() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xEDC4);
	break;
	default:
	error_illegal_ident(); }
}

// FLAG V Comma HL End
void Parser::parse_main_action_1858() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xEDBC);
	break;
	default:
	error_illegal_ident(); }
}

// FLAG Z Comma HL End
void Parser::parse_main_action_1859() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xEDCC);
	break;
	default:
	error_illegal_ident(); }
}

// FSYSCALL End
void Parser::parse_main_action_1860() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xED55);
	break;
	default:
	error_illegal_ident(); }
}

// GLOBAL
void Parser::parse_main_action_1861() {
	parse_symbol_declare(Symbol::Scope::Global);
}

// HALT End | HLT End
void Parser::parse_main_action_1862() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x76);
	break;
	default:
	error_illegal_ident(); }
}

// IBOX A End
void Parser::parse_main_action_1863() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xED12);
	break;
	default:
	error_illegal_ident(); }
}

// IDET End
void Parser::parse_main_action_1864() {
	switch (g_args.cpu()) {
	case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0x5B);
	break;
	default:
	error_illegal_ident(); }
}

// IM const_expr End
void Parser::parse_main_action_1865() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: break;
	default: error_int_range(const_expr); }
	add_opcode(0xED00+((const_expr==0?0x46:const_expr==1?0x56:0x5E)));
	}
	break;
	case CPU_KC160: case CPU_KC160_Z80: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: break;
	default: error_int_range(const_expr); }
	add_opcode(0xED00+((const_expr==0?0x46:const_expr==1?0x56:const_expr==2?0x5E:0x4E)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// IN A Comma LParen BC RParen End | IN A Comma LParen C RParen End
void Parser::parse_main_action_1866() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xED78);
	break;
	default:
	error_illegal_ident(); }
}

// IN A Comma expr End
void Parser::parse_main_action_1867() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_n(0xDB);
	break;
	default:
	error_illegal_ident(); }
}

// IN B Comma LParen BC RParen End | IN B Comma LParen C RParen End
void Parser::parse_main_action_1868() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xED40);
	break;
	default:
	error_illegal_ident(); }
}

// IN C Comma LParen BC RParen End | IN C Comma LParen C RParen End
void Parser::parse_main_action_1869() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xED48);
	break;
	default:
	error_illegal_ident(); }
}

// IN D Comma LParen BC RParen End | IN D Comma LParen C RParen End
void Parser::parse_main_action_1870() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xED50);
	break;
	default:
	error_illegal_ident(); }
}

// IN E Comma LParen BC RParen End | IN E Comma LParen C RParen End
void Parser::parse_main_action_1871() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xED58);
	break;
	default:
	error_illegal_ident(); }
}

// IN F Comma LParen BC RParen End | IN F Comma LParen C RParen End
void Parser::parse_main_action_1872() {
	switch (g_args.cpu()) {
	case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xED70);
	break;
	default:
	error_illegal_ident(); }
}

// IN H Comma LParen BC RParen End | IN H Comma LParen C RParen End
void Parser::parse_main_action_1873() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xED60);
	break;
	default:
	error_illegal_ident(); }
}

// IN L Comma LParen BC RParen End | IN L Comma LParen C RParen End
void Parser::parse_main_action_1874() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xED68);
	break;
	default:
	error_illegal_ident(); }
}

// IN LParen BC RParen End | IN LParen C RParen End
void Parser::parse_main_action_1875() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xED70);
	break;
	default:
	error_illegal_ident(); }
}

// IN expr End
void Parser::parse_main_action_1876() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_opcode_n(0xDB);
	break;
	default:
	error_illegal_ident(); }
}

// IN0 A Comma expr End
void Parser::parse_main_action_1877() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_n(0xED38);
	break;
	default:
	error_illegal_ident(); }
}

// IN0 B Comma expr End
void Parser::parse_main_action_1878() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_n(0xED00);
	break;
	default:
	error_illegal_ident(); }
}

// IN0 C Comma expr End
void Parser::parse_main_action_1879() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_n(0xED08);
	break;
	default:
	error_illegal_ident(); }
}

// IN0 D Comma expr End
void Parser::parse_main_action_1880() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_n(0xED10);
	break;
	default:
	error_illegal_ident(); }
}

// IN0 E Comma expr End
void Parser::parse_main_action_1881() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_n(0xED18);
	break;
	default:
	error_illegal_ident(); }
}

// IN0 F Comma expr End | IN0 expr End
void Parser::parse_main_action_1882() {
	switch (g_args.cpu()) {
	case CPU_Z180: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_n(0xED30);
	break;
	default:
	error_illegal_ident(); }
}

// IN0 H Comma expr End
void Parser::parse_main_action_1883() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_n(0xED20);
	break;
	default:
	error_illegal_ident(); }
}

// IN0 L Comma expr End
void Parser::parse_main_action_1884() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_n(0xED28);
	break;
	default:
	error_illegal_ident(); }
}

// INC A End | INR A End
void Parser::parse_main_action_1885() {
	add_opcode(0x3C);
}

// INC ABC End
void Parser::parse_main_action_1886() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0x03);
	break;
	default:
	error_illegal_ident(); }
}

// INC ADE End
void Parser::parse_main_action_1887() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0x13);
	break;
	default:
	error_illegal_ident(); }
}

// INC AHL End
void Parser::parse_main_action_1888() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// INC AIX End
void Parser::parse_main_action_1889() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xDD23);
	break;
	default:
	error_illegal_ident(); }
}

// INC AIY End
void Parser::parse_main_action_1890() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xFD23);
	break;
	default:
	error_illegal_ident(); }
}

// INC ASP End
void Parser::parse_main_action_1891() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0x33);
	break;
	default:
	error_illegal_ident(); }
}

// INC B End | INR B End
void Parser::parse_main_action_1892() {
	add_opcode(0x04);
}

// INC BC End | INX B End | INX BC End
void Parser::parse_main_action_1893() {
	add_opcode(0x03);
}

// INC C End | INR C End
void Parser::parse_main_action_1894() {
	add_opcode(0x0C);
}

// INC D End | INR D End
void Parser::parse_main_action_1895() {
	add_opcode(0x14);
}

// INC DE End | INX D End | INX DE End
void Parser::parse_main_action_1896() {
	add_opcode(0x13);
}

// INC E End | INR E End
void Parser::parse_main_action_1897() {
	add_opcode(0x1C);
}

// INC H End | INR H End
void Parser::parse_main_action_1898() {
	add_opcode(0x24);
}

// INC HL End | INX H End | INX HL End
void Parser::parse_main_action_1899() {
	add_opcode(0x23);
}

// INC IX End
void Parser::parse_main_action_1900() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xDD23);
	break;
	default:
	error_illegal_ident(); }
}

// INC IXH End
void Parser::parse_main_action_1901() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDD24);
	break;
	default:
	error_illegal_ident(); }
}

// INC IXL End
void Parser::parse_main_action_1902() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDD2C);
	break;
	default:
	error_illegal_ident(); }
}

// INC IY End
void Parser::parse_main_action_1903() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xFD23);
	break;
	default:
	error_illegal_ident(); }
}

// INC IYH End
void Parser::parse_main_action_1904() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFD24);
	break;
	default:
	error_illegal_ident(); }
}

// INC IYL End
void Parser::parse_main_action_1905() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFD2C);
	break;
	default:
	error_illegal_ident(); }
}

// INC L End | INR L End
void Parser::parse_main_action_1906() {
	add_opcode(0x2C);
}

// INC SP End | INX SP End
void Parser::parse_main_action_1907() {
	add_opcode(0x33);
}

// INC XBC End
void Parser::parse_main_action_1908() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0x03);
	break;
	default:
	error_illegal_ident(); }
}

// INC XDE End
void Parser::parse_main_action_1909() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0x13);
	break;
	default:
	error_illegal_ident(); }
}

// INC XHL End
void Parser::parse_main_action_1910() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// INC XIX End
void Parser::parse_main_action_1911() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xDD23);
	break;
	default:
	error_illegal_ident(); }
}

// INC XIY End
void Parser::parse_main_action_1912() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xFD23);
	break;
	default:
	error_illegal_ident(); }
}

// INC XSP End
void Parser::parse_main_action_1913() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0x33);
	break;
	default:
	error_illegal_ident(); }
}

// INC YBC End
void Parser::parse_main_action_1914() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0x03);
	break;
	default:
	error_illegal_ident(); }
}

// INC YDE End
void Parser::parse_main_action_1915() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0x13);
	break;
	default:
	error_illegal_ident(); }
}

// INC YHL End
void Parser::parse_main_action_1916() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// INC YIX End
void Parser::parse_main_action_1917() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xDD23);
	break;
	default:
	error_illegal_ident(); }
}

// INC YIY End
void Parser::parse_main_action_1918() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xFD23);
	break;
	default:
	error_illegal_ident(); }
}

// INC YSP End
void Parser::parse_main_action_1919() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0x33);
	break;
	default:
	error_illegal_ident(); }
}

// INC ZBC End
void Parser::parse_main_action_1920() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0x03);
	break;
	default:
	error_illegal_ident(); }
}

// INC ZDE End
void Parser::parse_main_action_1921() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0x13);
	break;
	default:
	error_illegal_ident(); }
}

// INC ZHL End
void Parser::parse_main_action_1922() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// INC ZIX End
void Parser::parse_main_action_1923() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xDD23);
	break;
	default:
	error_illegal_ident(); }
}

// INC ZIY End
void Parser::parse_main_action_1924() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xFD23);
	break;
	default:
	error_illegal_ident(); }
}

// INC ZSP End
void Parser::parse_main_action_1925() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0x33);
	break;
	default:
	error_illegal_ident(); }
}

// INC Dot L BC End | INC Dot LIS BC End
void Parser::parse_main_action_1926() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x03);
	break;
	default:
	error_illegal_ident(); }
}

// INC Dot L DE End | INC Dot LIS DE End
void Parser::parse_main_action_1927() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x13);
	break;
	default:
	error_illegal_ident(); }
}

// INC Dot L HL End | INC Dot LIS HL End
void Parser::parse_main_action_1928() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// INC Dot L IX End | INC Dot LIS IX End
void Parser::parse_main_action_1929() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xDD23);
	break;
	default:
	error_illegal_ident(); }
}

// INC Dot L IY End | INC Dot LIS IY End
void Parser::parse_main_action_1930() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xFD23);
	break;
	default:
	error_illegal_ident(); }
}

// INC Dot L SP End | INC Dot LIS SP End
void Parser::parse_main_action_1931() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x33);
	break;
	default:
	error_illegal_ident(); }
}

// INC Dot L LParen HL Minus RParen End | INC Dot LIS LParen HL Minus RParen End
void Parser::parse_main_action_1932() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x34);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// INC Dot L LParen HL Plus RParen End | INC Dot LIS LParen HL Plus RParen End
void Parser::parse_main_action_1933() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x34);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// INC Dot L LParen HL RParen End | INC Dot LIS LParen HL RParen End
void Parser::parse_main_action_1934() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x34);
	break;
	default:
	error_illegal_ident(); }
}

// INC Dot L LParen IX RParen End | INC Dot LIS LParen IX RParen End
void Parser::parse_main_action_1935() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xDD3400);
	break;
	default:
	error_illegal_ident(); }
}

// INC Dot L LParen IX expr RParen End | INC Dot LIS LParen IX expr RParen End
void Parser::parse_main_action_1936() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xDD34);
	break;
	default:
	error_illegal_ident(); }
}

// INC Dot L LParen IY RParen End | INC Dot LIS LParen IY RParen End
void Parser::parse_main_action_1937() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xFD3400);
	break;
	default:
	error_illegal_ident(); }
}

// INC Dot L LParen IY expr RParen End | INC Dot LIS LParen IY expr RParen End
void Parser::parse_main_action_1938() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xFD34);
	break;
	default:
	error_illegal_ident(); }
}

// INC Dot S BC End | INC Dot SIL BC End
void Parser::parse_main_action_1939() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x03);
	break;
	default:
	error_illegal_ident(); }
}

// INC Dot S DE End | INC Dot SIL DE End
void Parser::parse_main_action_1940() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x13);
	break;
	default:
	error_illegal_ident(); }
}

// INC Dot S HL End | INC Dot SIL HL End
void Parser::parse_main_action_1941() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// INC Dot S IX End | INC Dot SIL IX End
void Parser::parse_main_action_1942() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xDD23);
	break;
	default:
	error_illegal_ident(); }
}

// INC Dot S IY End | INC Dot SIL IY End
void Parser::parse_main_action_1943() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xFD23);
	break;
	default:
	error_illegal_ident(); }
}

// INC Dot S SP End | INC Dot SIL SP End
void Parser::parse_main_action_1944() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x33);
	break;
	default:
	error_illegal_ident(); }
}

// INC Dot S LParen HL Minus RParen End | INC Dot SIL LParen HL Minus RParen End
void Parser::parse_main_action_1945() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x34);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// INC Dot S LParen HL Plus RParen End | INC Dot SIL LParen HL Plus RParen End
void Parser::parse_main_action_1946() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x34);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// INC Dot S LParen HL RParen End | INC Dot SIL LParen HL RParen End
void Parser::parse_main_action_1947() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x34);
	break;
	default:
	error_illegal_ident(); }
}

// INC Dot S LParen IX RParen End | INC Dot SIL LParen IX RParen End
void Parser::parse_main_action_1948() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xDD3400);
	break;
	default:
	error_illegal_ident(); }
}

// INC Dot S LParen IX expr RParen End | INC Dot SIL LParen IX expr RParen End
void Parser::parse_main_action_1949() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xDD34);
	break;
	default:
	error_illegal_ident(); }
}

// INC Dot S LParen IY RParen End | INC Dot SIL LParen IY RParen End
void Parser::parse_main_action_1950() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xFD3400);
	break;
	default:
	error_illegal_ident(); }
}

// INC Dot S LParen IY expr RParen End | INC Dot SIL LParen IY expr RParen End
void Parser::parse_main_action_1951() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xFD34);
	break;
	default:
	error_illegal_ident(); }
}

// INC LParen AHL RParen End
void Parser::parse_main_action_1952() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0x34);
	break;
	default:
	error_illegal_ident(); }
}

// INC LParen AIX RParen End
void Parser::parse_main_action_1953() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xDD3400);
	break;
	default:
	error_illegal_ident(); }
}

// INC LParen AIX expr RParen End
void Parser::parse_main_action_1954() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xDD34);
	break;
	default:
	error_illegal_ident(); }
}

// INC LParen AIY RParen End
void Parser::parse_main_action_1955() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xFD3400);
	break;
	default:
	error_illegal_ident(); }
}

// INC LParen AIY expr RParen End
void Parser::parse_main_action_1956() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xFD34);
	break;
	default:
	error_illegal_ident(); }
}

// INC LParen HL Minus RParen End
void Parser::parse_main_action_1957() {
	add_opcode(0x34);
	add_opcode(0x2B);
}

// INC LParen HL Plus RParen End
void Parser::parse_main_action_1958() {
	add_opcode(0x34);
	add_opcode(0x23);
}

// INC LParen HL RParen End | INR M End
void Parser::parse_main_action_1959() {
	add_opcode(0x34);
}

// INC LParen IX RParen End
void Parser::parse_main_action_1960() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xDD3400);
	break;
	default:
	error_illegal_ident(); }
}

// INC LParen IX expr RParen End
void Parser::parse_main_action_1961() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx(0xDD34);
	break;
	default:
	error_illegal_ident(); }
}

// INC LParen IY RParen End
void Parser::parse_main_action_1962() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xFD3400);
	break;
	default:
	error_illegal_ident(); }
}

// INC LParen IY expr RParen End
void Parser::parse_main_action_1963() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx(0xFD34);
	break;
	default:
	error_illegal_ident(); }
}

// INC LParen PHL RParen End
void Parser::parse_main_action_1964() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0x34);
	break;
	default:
	error_illegal_ident(); }
}

// INC LParen PIX RParen End
void Parser::parse_main_action_1965() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xDD3400);
	break;
	default:
	error_illegal_ident(); }
}

// INC LParen PIX expr RParen End
void Parser::parse_main_action_1966() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xDD34);
	break;
	default:
	error_illegal_ident(); }
}

// INC LParen PIY RParen End
void Parser::parse_main_action_1967() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xFD3400);
	break;
	default:
	error_illegal_ident(); }
}

// INC LParen PIY expr RParen End
void Parser::parse_main_action_1968() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xFD34);
	break;
	default:
	error_illegal_ident(); }
}

// INC LParen XHL RParen End
void Parser::parse_main_action_1969() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0x34);
	break;
	default:
	error_illegal_ident(); }
}

// INC LParen XIX RParen End
void Parser::parse_main_action_1970() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xDD3400);
	break;
	default:
	error_illegal_ident(); }
}

// INC LParen XIX expr RParen End
void Parser::parse_main_action_1971() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xDD34);
	break;
	default:
	error_illegal_ident(); }
}

// INC LParen XIY RParen End
void Parser::parse_main_action_1972() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xFD3400);
	break;
	default:
	error_illegal_ident(); }
}

// INC LParen XIY expr RParen End
void Parser::parse_main_action_1973() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xFD34);
	break;
	default:
	error_illegal_ident(); }
}

// INC LParen YHL RParen End
void Parser::parse_main_action_1974() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0x34);
	break;
	default:
	error_illegal_ident(); }
}

// INC LParen YIX RParen End
void Parser::parse_main_action_1975() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xDD3400);
	break;
	default:
	error_illegal_ident(); }
}

// INC LParen YIX expr RParen End
void Parser::parse_main_action_1976() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xDD34);
	break;
	default:
	error_illegal_ident(); }
}

// INC LParen YIY RParen End
void Parser::parse_main_action_1977() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xFD3400);
	break;
	default:
	error_illegal_ident(); }
}

// INC LParen YIY expr RParen End
void Parser::parse_main_action_1978() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xFD34);
	break;
	default:
	error_illegal_ident(); }
}

// INC LParen ZHL RParen End
void Parser::parse_main_action_1979() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0x34);
	break;
	default:
	error_illegal_ident(); }
}

// INC LParen ZIX RParen End
void Parser::parse_main_action_1980() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xDD3400);
	break;
	default:
	error_illegal_ident(); }
}

// INC LParen ZIX expr RParen End
void Parser::parse_main_action_1981() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xDD34);
	break;
	default:
	error_illegal_ident(); }
}

// INC LParen ZIY RParen End
void Parser::parse_main_action_1982() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xFD3400);
	break;
	default:
	error_illegal_ident(); }
}

// INC LParen ZIY expr RParen End
void Parser::parse_main_action_1983() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xFD34);
	break;
	default:
	error_illegal_ident(); }
}

// IND X End
void Parser::parse_main_action_1984() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xEDEA);
	break;
	default:
	error_illegal_ident(); }
}

// IND Dot L End | IND Dot LIS End
void Parser::parse_main_action_1985() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xEDAA);
	break;
	default:
	error_illegal_ident(); }
}

// IND Dot S End | IND Dot SIL End
void Parser::parse_main_action_1986() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xEDAA);
	break;
	default:
	error_illegal_ident(); }
}

// IND End
void Parser::parse_main_action_1987() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xEDAA);
	break;
	default:
	error_illegal_ident(); }
}

// IND2 Dot L End | IND2 Dot LIS End
void Parser::parse_main_action_1988() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xED8C);
	break;
	default:
	error_illegal_ident(); }
}

// IND2 Dot S End | IND2 Dot SIL End
void Parser::parse_main_action_1989() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xED8C);
	break;
	default:
	error_illegal_ident(); }
}

// IND2 End
void Parser::parse_main_action_1990() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xED8C);
	break;
	default:
	error_illegal_ident(); }
}

// IND2R Dot L End | IND2R Dot LIS End
void Parser::parse_main_action_1991() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xED9C);
	break;
	default:
	error_illegal_ident(); }
}

// IND2R Dot S End | IND2R Dot SIL End
void Parser::parse_main_action_1992() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xED9C);
	break;
	default:
	error_illegal_ident(); }
}

// IND2R End
void Parser::parse_main_action_1993() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xED9C);
	break;
	default:
	error_illegal_ident(); }
}

// INDM Dot L End | INDM Dot LIS End
void Parser::parse_main_action_1994() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xED8A);
	break;
	default:
	error_illegal_ident(); }
}

// INDM Dot S End | INDM Dot SIL End
void Parser::parse_main_action_1995() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xED8A);
	break;
	default:
	error_illegal_ident(); }
}

// INDM End
void Parser::parse_main_action_1996() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xED8A);
	break;
	default:
	error_illegal_ident(); }
}

// INDMR Dot L End | INDMR Dot LIS End
void Parser::parse_main_action_1997() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xED9A);
	break;
	default:
	error_illegal_ident(); }
}

// INDMR Dot S End | INDMR Dot SIL End
void Parser::parse_main_action_1998() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xED9A);
	break;
	default:
	error_illegal_ident(); }
}

// INDMR End
void Parser::parse_main_action_1999() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xED9A);
	break;
	default:
	error_illegal_ident(); }
}

// INDR X End
void Parser::parse_main_action_2000() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xEDFA);
	break;
	default:
	error_illegal_ident(); }
}

// INDR Dot L End | INDR Dot LIS End
void Parser::parse_main_action_2001() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xEDBA);
	break;
	default:
	error_illegal_ident(); }
}

// INDR Dot S End | INDR Dot SIL End
void Parser::parse_main_action_2002() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xEDBA);
	break;
	default:
	error_illegal_ident(); }
}

// INDR End
void Parser::parse_main_action_2003() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xEDBA);
	break;
	default:
	error_illegal_ident(); }
}

// INDRX Dot L End | INDRX Dot LIS End
void Parser::parse_main_action_2004() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xEDCA);
	break;
	default:
	error_illegal_ident(); }
}

// INDRX Dot S End | INDRX Dot SIL End
void Parser::parse_main_action_2005() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xEDCA);
	break;
	default:
	error_illegal_ident(); }
}

// INDRX End
void Parser::parse_main_action_2006() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xEDCA);
	break;
	default:
	error_illegal_ident(); }
}

// INI X End
void Parser::parse_main_action_2007() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xEDE2);
	break;
	default:
	error_illegal_ident(); }
}

// INI Dot L End | INI Dot LIS End
void Parser::parse_main_action_2008() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xEDA2);
	break;
	default:
	error_illegal_ident(); }
}

// INI Dot S End | INI Dot SIL End
void Parser::parse_main_action_2009() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xEDA2);
	break;
	default:
	error_illegal_ident(); }
}

// INI End
void Parser::parse_main_action_2010() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xEDA2);
	break;
	default:
	error_illegal_ident(); }
}

// INI2 Dot L End | INI2 Dot LIS End
void Parser::parse_main_action_2011() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xED84);
	break;
	default:
	error_illegal_ident(); }
}

// INI2 Dot S End | INI2 Dot SIL End
void Parser::parse_main_action_2012() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xED84);
	break;
	default:
	error_illegal_ident(); }
}

// INI2 End
void Parser::parse_main_action_2013() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xED84);
	break;
	default:
	error_illegal_ident(); }
}

// INI2R Dot L End | INI2R Dot LIS End
void Parser::parse_main_action_2014() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xED94);
	break;
	default:
	error_illegal_ident(); }
}

// INI2R Dot S End | INI2R Dot SIL End
void Parser::parse_main_action_2015() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xED94);
	break;
	default:
	error_illegal_ident(); }
}

// INI2R End
void Parser::parse_main_action_2016() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xED94);
	break;
	default:
	error_illegal_ident(); }
}

// INIM Dot L End | INIM Dot LIS End
void Parser::parse_main_action_2017() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xED82);
	break;
	default:
	error_illegal_ident(); }
}

// INIM Dot S End | INIM Dot SIL End
void Parser::parse_main_action_2018() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xED82);
	break;
	default:
	error_illegal_ident(); }
}

// INIM End
void Parser::parse_main_action_2019() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xED82);
	break;
	default:
	error_illegal_ident(); }
}

// INIMR Dot L End | INIMR Dot LIS End
void Parser::parse_main_action_2020() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xED92);
	break;
	default:
	error_illegal_ident(); }
}

// INIMR Dot S End | INIMR Dot SIL End
void Parser::parse_main_action_2021() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xED92);
	break;
	default:
	error_illegal_ident(); }
}

// INIMR End
void Parser::parse_main_action_2022() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xED92);
	break;
	default:
	error_illegal_ident(); }
}

// INIR X End
void Parser::parse_main_action_2023() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xEDF2);
	break;
	default:
	error_illegal_ident(); }
}

// INIR Dot L End | INIR Dot LIS End
void Parser::parse_main_action_2024() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xEDB2);
	break;
	default:
	error_illegal_ident(); }
}

// INIR Dot S End | INIR Dot SIL End
void Parser::parse_main_action_2025() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xEDB2);
	break;
	default:
	error_illegal_ident(); }
}

// INIR End
void Parser::parse_main_action_2026() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xEDB2);
	break;
	default:
	error_illegal_ident(); }
}

// INIRX Dot L End | INIRX Dot LIS End
void Parser::parse_main_action_2027() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xEDC2);
	break;
	default:
	error_illegal_ident(); }
}

// INIRX Dot S End | INIRX Dot SIL End
void Parser::parse_main_action_2028() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xEDC2);
	break;
	default:
	error_illegal_ident(); }
}

// INIRX End
void Parser::parse_main_action_2029() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xEDC2);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ADC A Comma LParen HL Minus RParen End | IOE ADC LParen HL Minus RParen End
void Parser::parse_main_action_2030() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x7F8E);
	add_opcode(0x2B);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xDB);
	add_opcode(0x8E);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ADC A Comma LParen HL Plus RParen End | IOE ADC LParen HL Plus RParen End
void Parser::parse_main_action_2031() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x7F8E);
	add_opcode(0x23);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xDB);
	add_opcode(0x8E);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ADC A Comma LParen HL RParen End | IOE ADC LParen HL RParen End
void Parser::parse_main_action_2032() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x7F8E);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xDB);
	add_opcode(0x8E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ADC A Comma LParen IX RParen End | IOE ADC LParen IX RParen End
void Parser::parse_main_action_2033() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xDD8E00);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ADC A Comma LParen IX expr RParen End | IOE ADC LParen IX expr RParen End
void Parser::parse_main_action_2034() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xDD8E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ADC A Comma LParen IY RParen End | IOE ADC LParen IY RParen End
void Parser::parse_main_action_2035() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xFD8E00);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ADC A Comma LParen IY expr RParen End | IOE ADC LParen IY expr RParen End
void Parser::parse_main_action_2036() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xFD8E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ADC A1 Comma LParen HL Minus RParen End | IOE ALTD ADC A Comma LParen HL Minus RParen End | IOE ALTD ADC LParen HL Minus RParen End
void Parser::parse_main_action_2037() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0x7F8E);
	add_opcode(0x2B);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0x8E);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ADC A1 Comma LParen HL Plus RParen End | IOE ALTD ADC A Comma LParen HL Plus RParen End | IOE ALTD ADC LParen HL Plus RParen End
void Parser::parse_main_action_2038() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0x7F8E);
	add_opcode(0x23);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0x8E);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ADC A1 Comma LParen HL RParen End | IOE ALTD ADC A Comma LParen HL RParen End | IOE ALTD ADC LParen HL RParen End
void Parser::parse_main_action_2039() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0x7F8E);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0x8E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ADC A1 Comma LParen IX RParen End | IOE ALTD ADC A Comma LParen IX RParen End | IOE ALTD ADC LParen IX RParen End
void Parser::parse_main_action_2040() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xDD8E00);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ADC A1 Comma LParen IX expr RParen End | IOE ALTD ADC A Comma LParen IX expr RParen End | IOE ALTD ADC LParen IX expr RParen End
void Parser::parse_main_action_2041() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode_idx(0xDD8E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ADC A1 Comma LParen IY RParen End | IOE ALTD ADC A Comma LParen IY RParen End | IOE ALTD ADC LParen IY RParen End
void Parser::parse_main_action_2042() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xFD8E00);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ADC A1 Comma LParen IY expr RParen End | IOE ALTD ADC A Comma LParen IY expr RParen End | IOE ALTD ADC LParen IY expr RParen End
void Parser::parse_main_action_2043() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode_idx(0xFD8E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ADD A Comma LParen HL Minus RParen End | IOE ADD LParen HL Minus RParen End
void Parser::parse_main_action_2044() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x7F86);
	add_opcode(0x2B);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xDB);
	add_opcode(0x86);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ADD A Comma LParen HL Plus RParen End | IOE ADD LParen HL Plus RParen End
void Parser::parse_main_action_2045() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x7F86);
	add_opcode(0x23);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xDB);
	add_opcode(0x86);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ADD A Comma LParen HL RParen End | IOE ADD LParen HL RParen End
void Parser::parse_main_action_2046() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x7F86);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xDB);
	add_opcode(0x86);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ADD A Comma LParen IX RParen End | IOE ADD LParen IX RParen End
void Parser::parse_main_action_2047() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xDD8600);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ADD A Comma LParen IX expr RParen End | IOE ADD LParen IX expr RParen End
void Parser::parse_main_action_2048() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xDD86);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ADD A Comma LParen IY RParen End | IOE ADD LParen IY RParen End
void Parser::parse_main_action_2049() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xFD8600);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ADD A Comma LParen IY expr RParen End | IOE ADD LParen IY expr RParen End
void Parser::parse_main_action_2050() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xFD86);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ADD A1 Comma LParen HL Minus RParen End | IOE ALTD ADD A Comma LParen HL Minus RParen End | IOE ALTD ADD LParen HL Minus RParen End
void Parser::parse_main_action_2051() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0x7F86);
	add_opcode(0x2B);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0x86);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ADD A1 Comma LParen HL Plus RParen End | IOE ALTD ADD A Comma LParen HL Plus RParen End | IOE ALTD ADD LParen HL Plus RParen End
void Parser::parse_main_action_2052() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0x7F86);
	add_opcode(0x23);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0x86);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ADD A1 Comma LParen HL RParen End | IOE ALTD ADD A Comma LParen HL RParen End | IOE ALTD ADD LParen HL RParen End
void Parser::parse_main_action_2053() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0x7F86);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0x86);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ADD A1 Comma LParen IX RParen End | IOE ALTD ADD A Comma LParen IX RParen End | IOE ALTD ADD LParen IX RParen End
void Parser::parse_main_action_2054() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xDD8600);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ADD A1 Comma LParen IX expr RParen End | IOE ALTD ADD A Comma LParen IX expr RParen End | IOE ALTD ADD LParen IX expr RParen End
void Parser::parse_main_action_2055() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode_idx(0xDD86);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ADD A1 Comma LParen IY RParen End | IOE ALTD ADD A Comma LParen IY RParen End | IOE ALTD ADD LParen IY RParen End
void Parser::parse_main_action_2056() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xFD8600);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ADD A1 Comma LParen IY expr RParen End | IOE ALTD ADD A Comma LParen IY expr RParen End | IOE ALTD ADD LParen IY expr RParen End
void Parser::parse_main_action_2057() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode_idx(0xFD86);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD AND A Comma LParen HL Minus RParen End | IOE ALTD AND LParen HL Minus RParen End | IOE AND A1 Comma LParen HL Minus RParen End
void Parser::parse_main_action_2058() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0x7FA6);
	add_opcode(0x2B);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xA6);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD AND A Comma LParen HL Plus RParen End | IOE ALTD AND LParen HL Plus RParen End | IOE AND A1 Comma LParen HL Plus RParen End
void Parser::parse_main_action_2059() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0x7FA6);
	add_opcode(0x23);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xA6);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD AND A Comma LParen HL RParen End | IOE ALTD AND LParen HL RParen End | IOE AND A1 Comma LParen HL RParen End
void Parser::parse_main_action_2060() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0x7FA6);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xA6);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD AND A Comma LParen IX RParen End | IOE ALTD AND LParen IX RParen End | IOE AND A1 Comma LParen IX RParen End
void Parser::parse_main_action_2061() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xDDA600);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD AND A Comma LParen IX expr RParen End | IOE ALTD AND LParen IX expr RParen End | IOE AND A1 Comma LParen IX expr RParen End
void Parser::parse_main_action_2062() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode_idx(0xDDA6);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD AND A Comma LParen IY RParen End | IOE ALTD AND LParen IY RParen End | IOE AND A1 Comma LParen IY RParen End
void Parser::parse_main_action_2063() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xFDA600);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD AND A Comma LParen IY expr RParen End | IOE ALTD AND LParen IY expr RParen End | IOE AND A1 Comma LParen IY expr RParen End
void Parser::parse_main_action_2064() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode_idx(0xFDA6);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD BIT const_expr Comma LParen HL RParen End
void Parser::parse_main_action_2065() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0xDB);
	add_opcode(0x76);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCB46+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD BIT const_expr Comma LParen IX RParen End
void Parser::parse_main_action_2066() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0xDB);
	add_opcode(0x76);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xDDCB0046+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD BIT const_expr Comma LParen IX expr RParen End
void Parser::parse_main_action_2067() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0xDB);
	add_opcode(0x76);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xDDCB46+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD BIT const_expr Comma LParen IY RParen End
void Parser::parse_main_action_2068() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0xDB);
	add_opcode(0x76);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xFDCB0046+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD BIT const_expr Comma LParen IY expr RParen End
void Parser::parse_main_action_2069() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0xDB);
	add_opcode(0x76);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xFDCB46+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD CMP A Comma LParen HL Minus RParen End | IOE ALTD CMP LParen HL Minus RParen End | IOE ALTD CP A Comma LParen HL Minus RParen End | IOE ALTD CP LParen HL Minus RParen End
void Parser::parse_main_action_2070() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0x7FBE);
	add_opcode(0x2B);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xBE);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD CMP A Comma LParen HL Plus RParen End | IOE ALTD CMP LParen HL Plus RParen End | IOE ALTD CP A Comma LParen HL Plus RParen End | IOE ALTD CP LParen HL Plus RParen End
void Parser::parse_main_action_2071() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0x7FBE);
	add_opcode(0x23);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xBE);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD CMP A Comma LParen HL RParen End | IOE ALTD CMP LParen HL RParen End | IOE ALTD CP A Comma LParen HL RParen End | IOE ALTD CP LParen HL RParen End
void Parser::parse_main_action_2072() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0x7FBE);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xBE);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD CMP A Comma LParen IX RParen End | IOE ALTD CMP LParen IX RParen End | IOE ALTD CP A Comma LParen IX RParen End | IOE ALTD CP LParen IX RParen End
void Parser::parse_main_action_2073() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xDDBE00);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD CMP A Comma LParen IX expr RParen End | IOE ALTD CMP LParen IX expr RParen End | IOE ALTD CP A Comma LParen IX expr RParen End | IOE ALTD CP LParen IX expr RParen End
void Parser::parse_main_action_2074() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode_idx(0xDDBE);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD CMP A Comma LParen IY RParen End | IOE ALTD CMP LParen IY RParen End | IOE ALTD CP A Comma LParen IY RParen End | IOE ALTD CP LParen IY RParen End
void Parser::parse_main_action_2075() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xFDBE00);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD CMP A Comma LParen IY expr RParen End | IOE ALTD CMP LParen IY expr RParen End | IOE ALTD CP A Comma LParen IY expr RParen End | IOE ALTD CP LParen IY expr RParen End
void Parser::parse_main_action_2076() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode_idx(0xFDBE);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD DEC LParen HL Minus RParen End
void Parser::parse_main_action_2077() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0x35);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD DEC LParen HL Plus RParen End
void Parser::parse_main_action_2078() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0x35);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD DEC LParen HL RParen End
void Parser::parse_main_action_2079() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0x35);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD DEC LParen IX RParen End
void Parser::parse_main_action_2080() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xDD3500);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD DEC LParen IX expr RParen End
void Parser::parse_main_action_2081() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode_idx(0xDD35);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD DEC LParen IY RParen End
void Parser::parse_main_action_2082() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xFD3500);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD DEC LParen IY expr RParen End
void Parser::parse_main_action_2083() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode_idx(0xFD35);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD INC LParen HL Minus RParen End
void Parser::parse_main_action_2084() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0x34);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD INC LParen HL Plus RParen End
void Parser::parse_main_action_2085() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0x34);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD INC LParen HL RParen End
void Parser::parse_main_action_2086() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0x34);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD INC LParen IX RParen End
void Parser::parse_main_action_2087() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xDD3400);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD INC LParen IX expr RParen End
void Parser::parse_main_action_2088() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode_idx(0xDD34);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD INC LParen IY RParen End
void Parser::parse_main_action_2089() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xFD3400);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD INC LParen IY expr RParen End
void Parser::parse_main_action_2090() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode_idx(0xFD34);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD A Comma LParen BC Minus RParen End | IOE LD A1 Comma LParen BC Minus RParen End
void Parser::parse_main_action_2091() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0x0A);
	add_opcode(0x0B);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD A Comma LParen BC Plus RParen End | IOE LD A1 Comma LParen BC Plus RParen End
void Parser::parse_main_action_2092() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0x0A);
	add_opcode(0x03);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD A Comma LParen BC RParen End | IOE LD A1 Comma LParen BC RParen End
void Parser::parse_main_action_2093() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0x0A);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD A Comma LParen DE Minus RParen End | IOE LD A1 Comma LParen DE Minus RParen End
void Parser::parse_main_action_2094() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0x1A);
	add_opcode(0x1B);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD A Comma LParen DE Plus RParen End | IOE LD A1 Comma LParen DE Plus RParen End
void Parser::parse_main_action_2095() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0x1A);
	add_opcode(0x13);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD A Comma LParen DE RParen End | IOE LD A1 Comma LParen DE RParen End
void Parser::parse_main_action_2096() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0x1A);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD A Comma LParen HL Minus RParen End | IOE ALTD LD A Comma LParen HLD RParen End | IOE LD A1 Comma LParen HL Minus RParen End | IOE LD A1 Comma LParen HLD RParen End
void Parser::parse_main_action_2097() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0x7E);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD A Comma LParen HL Plus RParen End | IOE ALTD LD A Comma LParen HLI RParen End | IOE LD A1 Comma LParen HL Plus RParen End | IOE LD A1 Comma LParen HLI RParen End
void Parser::parse_main_action_2098() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0x7E);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD A Comma LParen HL RParen End | IOE LD A1 Comma LParen HL RParen End
void Parser::parse_main_action_2099() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0x7E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD A Comma LParen IX Plus A RParen End | IOE LD A1 Comma LParen IX Plus A RParen End
void Parser::parse_main_action_2100() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xDD06);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD A Comma LParen IX RParen End | IOE LD A1 Comma LParen IX RParen End
void Parser::parse_main_action_2101() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xDD7E00);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD A Comma LParen IX expr RParen End | IOE LD A1 Comma LParen IX expr RParen End
void Parser::parse_main_action_2102() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode_idx(0xDD7E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD A Comma LParen IY Plus A RParen End | IOE LD A1 Comma LParen IY Plus A RParen End
void Parser::parse_main_action_2103() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xFD06);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD A Comma LParen IY RParen End | IOE LD A1 Comma LParen IY RParen End
void Parser::parse_main_action_2104() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xFD7E00);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD A Comma LParen IY expr RParen End | IOE LD A1 Comma LParen IY expr RParen End
void Parser::parse_main_action_2105() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode_idx(0xFD7E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD A Comma expr End | IOE LD A1 Comma expr End
void Parser::parse_main_action_2106() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode_nn(0x3A, 0);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD B Comma LParen HL Minus RParen End | IOE ALTD LD B Comma LParen HLD RParen End | IOE LD B1 Comma LParen HL Minus RParen End | IOE LD B1 Comma LParen HLD RParen End
void Parser::parse_main_action_2107() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0x46);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD B Comma LParen HL Plus RParen End | IOE ALTD LD B Comma LParen HLI RParen End | IOE LD B1 Comma LParen HL Plus RParen End | IOE LD B1 Comma LParen HLI RParen End
void Parser::parse_main_action_2108() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0x46);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD B Comma LParen HL RParen End | IOE LD B1 Comma LParen HL RParen End
void Parser::parse_main_action_2109() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0x46);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD B Comma LParen IX RParen End | IOE LD B1 Comma LParen IX RParen End
void Parser::parse_main_action_2110() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xDD4600);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD B Comma LParen IX expr RParen End | IOE LD B1 Comma LParen IX expr RParen End
void Parser::parse_main_action_2111() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode_idx(0xDD46);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD B Comma LParen IY RParen End | IOE LD B1 Comma LParen IY RParen End
void Parser::parse_main_action_2112() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xFD4600);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD B Comma LParen IY expr RParen End | IOE LD B1 Comma LParen IY expr RParen End
void Parser::parse_main_action_2113() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode_idx(0xFD46);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD BC Comma expr End | IOE LD BC1 Comma expr End
void Parser::parse_main_action_2114() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode_nn(0xED4B, 0);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD BCDE Comma LParen HL RParen End | IOE LD BCDE1 Comma LParen HL RParen End
void Parser::parse_main_action_2115() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xDD1A);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD BCDE Comma LParen IX RParen End | IOE LD BCDE1 Comma LParen IX RParen End
void Parser::parse_main_action_2116() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xDDCE00);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD BCDE Comma LParen IX expr RParen End | IOE LD BCDE1 Comma LParen IX expr RParen End
void Parser::parse_main_action_2117() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode_idx(0xDDCE);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD BCDE Comma LParen IY RParen End | IOE LD BCDE1 Comma LParen IY RParen End
void Parser::parse_main_action_2118() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xDDDE00);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD BCDE Comma LParen IY expr RParen End | IOE LD BCDE1 Comma LParen IY expr RParen End
void Parser::parse_main_action_2119() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode_idx(0xDDDE);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD BCDE Comma expr End | IOE LD BCDE1 Comma expr End
void Parser::parse_main_action_2120() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode_nn(0x93, 0);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD C Comma LParen HL Minus RParen End | IOE ALTD LD C Comma LParen HLD RParen End | IOE LD C1 Comma LParen HL Minus RParen End | IOE LD C1 Comma LParen HLD RParen End
void Parser::parse_main_action_2121() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0x4E);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD C Comma LParen HL Plus RParen End | IOE ALTD LD C Comma LParen HLI RParen End | IOE LD C1 Comma LParen HL Plus RParen End | IOE LD C1 Comma LParen HLI RParen End
void Parser::parse_main_action_2122() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0x4E);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD C Comma LParen HL RParen End | IOE LD C1 Comma LParen HL RParen End
void Parser::parse_main_action_2123() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0x4E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD C Comma LParen IX RParen End | IOE LD C1 Comma LParen IX RParen End
void Parser::parse_main_action_2124() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xDD4E00);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD C Comma LParen IX expr RParen End | IOE LD C1 Comma LParen IX expr RParen End
void Parser::parse_main_action_2125() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode_idx(0xDD4E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD C Comma LParen IY RParen End | IOE LD C1 Comma LParen IY RParen End
void Parser::parse_main_action_2126() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xFD4E00);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD C Comma LParen IY expr RParen End | IOE LD C1 Comma LParen IY expr RParen End
void Parser::parse_main_action_2127() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode_idx(0xFD4E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD D Comma LParen HL Minus RParen End | IOE ALTD LD D Comma LParen HLD RParen End | IOE LD D1 Comma LParen HL Minus RParen End | IOE LD D1 Comma LParen HLD RParen End
void Parser::parse_main_action_2128() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0x56);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD D Comma LParen HL Plus RParen End | IOE ALTD LD D Comma LParen HLI RParen End | IOE LD D1 Comma LParen HL Plus RParen End | IOE LD D1 Comma LParen HLI RParen End
void Parser::parse_main_action_2129() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0x56);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD D Comma LParen HL RParen End | IOE LD D1 Comma LParen HL RParen End
void Parser::parse_main_action_2130() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0x56);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD D Comma LParen IX RParen End | IOE LD D1 Comma LParen IX RParen End
void Parser::parse_main_action_2131() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xDD5600);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD D Comma LParen IX expr RParen End | IOE LD D1 Comma LParen IX expr RParen End
void Parser::parse_main_action_2132() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode_idx(0xDD56);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD D Comma LParen IY RParen End | IOE LD D1 Comma LParen IY RParen End
void Parser::parse_main_action_2133() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xFD5600);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD D Comma LParen IY expr RParen End | IOE LD D1 Comma LParen IY expr RParen End
void Parser::parse_main_action_2134() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode_idx(0xFD56);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD DE Comma expr End | IOE LD DE1 Comma expr End
void Parser::parse_main_action_2135() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode_nn(0xED5B, 0);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD E Comma LParen HL Minus RParen End | IOE ALTD LD E Comma LParen HLD RParen End | IOE LD E1 Comma LParen HL Minus RParen End | IOE LD E1 Comma LParen HLD RParen End
void Parser::parse_main_action_2136() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0x5E);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD E Comma LParen HL Plus RParen End | IOE ALTD LD E Comma LParen HLI RParen End | IOE LD E1 Comma LParen HL Plus RParen End | IOE LD E1 Comma LParen HLI RParen End
void Parser::parse_main_action_2137() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0x5E);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD E Comma LParen HL RParen End | IOE LD E1 Comma LParen HL RParen End
void Parser::parse_main_action_2138() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0x5E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD E Comma LParen IX RParen End | IOE LD E1 Comma LParen IX RParen End
void Parser::parse_main_action_2139() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xDD5E00);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD E Comma LParen IX expr RParen End | IOE LD E1 Comma LParen IX expr RParen End
void Parser::parse_main_action_2140() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode_idx(0xDD5E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD E Comma LParen IY RParen End | IOE LD E1 Comma LParen IY RParen End
void Parser::parse_main_action_2141() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xFD5E00);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD E Comma LParen IY expr RParen End | IOE LD E1 Comma LParen IY expr RParen End
void Parser::parse_main_action_2142() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode_idx(0xFD5E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD H Comma LParen HL Minus RParen End | IOE ALTD LD H Comma LParen HLD RParen End | IOE LD H1 Comma LParen HL Minus RParen End | IOE LD H1 Comma LParen HLD RParen End
void Parser::parse_main_action_2143() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0x66);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD H Comma LParen HL Plus RParen End | IOE ALTD LD H Comma LParen HLI RParen End | IOE LD H1 Comma LParen HL Plus RParen End | IOE LD H1 Comma LParen HLI RParen End
void Parser::parse_main_action_2144() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0x66);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD H Comma LParen HL RParen End | IOE LD H1 Comma LParen HL RParen End
void Parser::parse_main_action_2145() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0x66);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD H Comma LParen IX RParen End | IOE LD H1 Comma LParen IX RParen End
void Parser::parse_main_action_2146() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xDD6600);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD H Comma LParen IX expr RParen End | IOE LD H1 Comma LParen IX expr RParen End
void Parser::parse_main_action_2147() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode_idx(0xDD66);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD H Comma LParen IY RParen End | IOE LD H1 Comma LParen IY RParen End
void Parser::parse_main_action_2148() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xFD6600);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD H Comma LParen IY expr RParen End | IOE LD H1 Comma LParen IY expr RParen End
void Parser::parse_main_action_2149() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode_idx(0xFD66);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD HL Comma LParen HL RParen End | IOE LD HL1 Comma LParen HL RParen End
void Parser::parse_main_action_2150() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xDDE400);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD HL Comma LParen HL expr RParen End | IOE LD HL1 Comma LParen HL expr RParen End
void Parser::parse_main_action_2151() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode_idx(0xDDE4);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD HL Comma LParen IX RParen End | IOE LD HL1 Comma LParen IX RParen End
void Parser::parse_main_action_2152() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xE400);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD HL Comma LParen IX expr RParen End | IOE LD HL1 Comma LParen IX expr RParen End
void Parser::parse_main_action_2153() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode_idx(0xE4);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD HL Comma LParen IY RParen End | IOE LD HL1 Comma LParen IY RParen End
void Parser::parse_main_action_2154() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xFDE400);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD HL Comma LParen IY expr RParen End | IOE LD HL1 Comma LParen IY expr RParen End
void Parser::parse_main_action_2155() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode_idx(0xFDE4);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD HL Comma expr End | IOE LD HL1 Comma expr End
void Parser::parse_main_action_2156() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode_nn(0x2A, 0);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD JK Comma expr End | IOE LD JK1 Comma expr End
void Parser::parse_main_action_2157() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode_nn(0x99, 0);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD JKHL Comma LParen HL RParen End | IOE LD JKHL1 Comma LParen HL RParen End
void Parser::parse_main_action_2158() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xFD1A);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD JKHL Comma LParen IX RParen End | IOE LD JKHL1 Comma LParen IX RParen End
void Parser::parse_main_action_2159() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xFDCE00);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD JKHL Comma LParen IX expr RParen End | IOE LD JKHL1 Comma LParen IX expr RParen End
void Parser::parse_main_action_2160() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode_idx(0xFDCE);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD JKHL Comma LParen IY RParen End | IOE LD JKHL1 Comma LParen IY RParen End
void Parser::parse_main_action_2161() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xFDDE00);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD JKHL Comma LParen IY expr RParen End | IOE LD JKHL1 Comma LParen IY expr RParen End
void Parser::parse_main_action_2162() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode_idx(0xFDDE);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD JKHL Comma expr End | IOE LD JKHL1 Comma expr End
void Parser::parse_main_action_2163() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode_nn(0x94, 0);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD L Comma LParen HL Minus RParen End | IOE ALTD LD L Comma LParen HLD RParen End | IOE LD L1 Comma LParen HL Minus RParen End | IOE LD L1 Comma LParen HLD RParen End
void Parser::parse_main_action_2164() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0x6E);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD L Comma LParen HL Plus RParen End | IOE ALTD LD L Comma LParen HLI RParen End | IOE LD L1 Comma LParen HL Plus RParen End | IOE LD L1 Comma LParen HLI RParen End
void Parser::parse_main_action_2165() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0x6E);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD L Comma LParen HL RParen End | IOE LD L1 Comma LParen HL RParen End
void Parser::parse_main_action_2166() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0x6E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD L Comma LParen IX RParen End | IOE LD L1 Comma LParen IX RParen End
void Parser::parse_main_action_2167() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xDD6E00);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD L Comma LParen IX expr RParen End | IOE LD L1 Comma LParen IX expr RParen End
void Parser::parse_main_action_2168() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode_idx(0xDD6E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD L Comma LParen IY RParen End | IOE LD L1 Comma LParen IY RParen End
void Parser::parse_main_action_2169() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xFD6E00);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD LD L Comma LParen IY expr RParen End | IOE LD L1 Comma LParen IY expr RParen End
void Parser::parse_main_action_2170() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode_idx(0xFD6E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD OR A Comma LParen HL Minus RParen End | IOE ALTD OR LParen HL Minus RParen End | IOE OR A1 Comma LParen HL Minus RParen End
void Parser::parse_main_action_2171() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0x7FB6);
	add_opcode(0x2B);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xB6);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD OR A Comma LParen HL Plus RParen End | IOE ALTD OR LParen HL Plus RParen End | IOE OR A1 Comma LParen HL Plus RParen End
void Parser::parse_main_action_2172() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0x7FB6);
	add_opcode(0x23);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xB6);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD OR A Comma LParen HL RParen End | IOE ALTD OR LParen HL RParen End | IOE OR A1 Comma LParen HL RParen End
void Parser::parse_main_action_2173() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0x7FB6);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xB6);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD OR A Comma LParen IX RParen End | IOE ALTD OR LParen IX RParen End | IOE OR A1 Comma LParen IX RParen End
void Parser::parse_main_action_2174() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xDDB600);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD OR A Comma LParen IX expr RParen End | IOE ALTD OR LParen IX expr RParen End | IOE OR A1 Comma LParen IX expr RParen End
void Parser::parse_main_action_2175() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode_idx(0xDDB6);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD OR A Comma LParen IY RParen End | IOE ALTD OR LParen IY RParen End | IOE OR A1 Comma LParen IY RParen End
void Parser::parse_main_action_2176() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xFDB600);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD OR A Comma LParen IY expr RParen End | IOE ALTD OR LParen IY expr RParen End | IOE OR A1 Comma LParen IY expr RParen End
void Parser::parse_main_action_2177() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode_idx(0xFDB6);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD RL LParen HL RParen End
void Parser::parse_main_action_2178() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xCB16);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD RL LParen IX RParen End
void Parser::parse_main_action_2179() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xDDCB0016);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD RL LParen IX expr RParen End
void Parser::parse_main_action_2180() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode_idx(0xDDCB16);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD RL LParen IY RParen End
void Parser::parse_main_action_2181() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xFDCB0016);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD RL LParen IY expr RParen End
void Parser::parse_main_action_2182() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode_idx(0xFDCB16);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD RLC LParen HL RParen End
void Parser::parse_main_action_2183() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xCB06);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD RLC LParen IX RParen End
void Parser::parse_main_action_2184() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xDDCB0006);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD RLC LParen IX expr RParen End
void Parser::parse_main_action_2185() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode_idx(0xDDCB06);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD RLC LParen IY RParen End
void Parser::parse_main_action_2186() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xFDCB0006);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD RLC LParen IY expr RParen End
void Parser::parse_main_action_2187() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode_idx(0xFDCB06);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD RR LParen HL RParen End
void Parser::parse_main_action_2188() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xCB1E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD RR LParen IX RParen End
void Parser::parse_main_action_2189() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xDDCB001E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD RR LParen IX expr RParen End
void Parser::parse_main_action_2190() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode_idx(0xDDCB1E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD RR LParen IY RParen End
void Parser::parse_main_action_2191() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xFDCB001E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD RR LParen IY expr RParen End
void Parser::parse_main_action_2192() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode_idx(0xFDCB1E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD RRC LParen HL RParen End
void Parser::parse_main_action_2193() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xCB0E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD RRC LParen IX RParen End
void Parser::parse_main_action_2194() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xDDCB000E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD RRC LParen IX expr RParen End
void Parser::parse_main_action_2195() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode_idx(0xDDCB0E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD RRC LParen IY RParen End
void Parser::parse_main_action_2196() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xFDCB000E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD RRC LParen IY expr RParen End
void Parser::parse_main_action_2197() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode_idx(0xFDCB0E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD SBC A Comma LParen HL Minus RParen End | IOE ALTD SBC LParen HL Minus RParen End | IOE SBC A1 Comma LParen HL Minus RParen End
void Parser::parse_main_action_2198() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0x7F9E);
	add_opcode(0x2B);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0x9E);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD SBC A Comma LParen HL Plus RParen End | IOE ALTD SBC LParen HL Plus RParen End | IOE SBC A1 Comma LParen HL Plus RParen End
void Parser::parse_main_action_2199() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0x7F9E);
	add_opcode(0x23);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0x9E);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD SBC A Comma LParen HL RParen End | IOE ALTD SBC LParen HL RParen End | IOE SBC A1 Comma LParen HL RParen End
void Parser::parse_main_action_2200() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0x7F9E);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0x9E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD SBC A Comma LParen IX RParen End | IOE ALTD SBC LParen IX RParen End | IOE SBC A1 Comma LParen IX RParen End
void Parser::parse_main_action_2201() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xDD9E00);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD SBC A Comma LParen IX expr RParen End | IOE ALTD SBC LParen IX expr RParen End | IOE SBC A1 Comma LParen IX expr RParen End
void Parser::parse_main_action_2202() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode_idx(0xDD9E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD SBC A Comma LParen IY RParen End | IOE ALTD SBC LParen IY RParen End | IOE SBC A1 Comma LParen IY RParen End
void Parser::parse_main_action_2203() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xFD9E00);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD SBC A Comma LParen IY expr RParen End | IOE ALTD SBC LParen IY expr RParen End | IOE SBC A1 Comma LParen IY expr RParen End
void Parser::parse_main_action_2204() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode_idx(0xFD9E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD SLA LParen HL RParen End
void Parser::parse_main_action_2205() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xCB26);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD SLA LParen IX RParen End
void Parser::parse_main_action_2206() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xDDCB0026);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD SLA LParen IX expr RParen End
void Parser::parse_main_action_2207() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode_idx(0xDDCB26);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD SLA LParen IY RParen End
void Parser::parse_main_action_2208() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xFDCB0026);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD SLA LParen IY expr RParen End
void Parser::parse_main_action_2209() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode_idx(0xFDCB26);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD SRA LParen HL RParen End
void Parser::parse_main_action_2210() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xCB2E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD SRA LParen IX RParen End
void Parser::parse_main_action_2211() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xDDCB002E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD SRA LParen IX expr RParen End
void Parser::parse_main_action_2212() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode_idx(0xDDCB2E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD SRA LParen IY RParen End
void Parser::parse_main_action_2213() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xFDCB002E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD SRA LParen IY expr RParen End
void Parser::parse_main_action_2214() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode_idx(0xFDCB2E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD SRL LParen HL RParen End
void Parser::parse_main_action_2215() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xCB3E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD SRL LParen IX RParen End
void Parser::parse_main_action_2216() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xDDCB003E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD SRL LParen IX expr RParen End
void Parser::parse_main_action_2217() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode_idx(0xDDCB3E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD SRL LParen IY RParen End
void Parser::parse_main_action_2218() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xFDCB003E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD SRL LParen IY expr RParen End
void Parser::parse_main_action_2219() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode_idx(0xFDCB3E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD SUB A Comma LParen HL Minus RParen End | IOE ALTD SUB LParen HL Minus RParen End | IOE SUB A1 Comma LParen HL Minus RParen End
void Parser::parse_main_action_2220() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0x7F96);
	add_opcode(0x2B);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0x96);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD SUB A Comma LParen HL Plus RParen End | IOE ALTD SUB LParen HL Plus RParen End | IOE SUB A1 Comma LParen HL Plus RParen End
void Parser::parse_main_action_2221() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0x7F96);
	add_opcode(0x23);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0x96);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD SUB A Comma LParen HL RParen End | IOE ALTD SUB LParen HL RParen End | IOE SUB A1 Comma LParen HL RParen End
void Parser::parse_main_action_2222() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0x7F96);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0x96);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD SUB A Comma LParen IX RParen End | IOE ALTD SUB LParen IX RParen End | IOE SUB A1 Comma LParen IX RParen End
void Parser::parse_main_action_2223() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xDD9600);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD SUB A Comma LParen IX expr RParen End | IOE ALTD SUB LParen IX expr RParen End | IOE SUB A1 Comma LParen IX expr RParen End
void Parser::parse_main_action_2224() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode_idx(0xDD96);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD SUB A Comma LParen IY RParen End | IOE ALTD SUB LParen IY RParen End | IOE SUB A1 Comma LParen IY RParen End
void Parser::parse_main_action_2225() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xFD9600);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD SUB A Comma LParen IY expr RParen End | IOE ALTD SUB LParen IY expr RParen End | IOE SUB A1 Comma LParen IY expr RParen End
void Parser::parse_main_action_2226() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode_idx(0xFD96);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD XOR A Comma LParen HL Minus RParen End | IOE ALTD XOR LParen HL Minus RParen End | IOE XOR A1 Comma LParen HL Minus RParen End
void Parser::parse_main_action_2227() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0x7FAE);
	add_opcode(0x2B);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xAE);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD XOR A Comma LParen HL Plus RParen End | IOE ALTD XOR LParen HL Plus RParen End | IOE XOR A1 Comma LParen HL Plus RParen End
void Parser::parse_main_action_2228() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0x7FAE);
	add_opcode(0x23);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xAE);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD XOR A Comma LParen HL RParen End | IOE ALTD XOR LParen HL RParen End | IOE XOR A1 Comma LParen HL RParen End
void Parser::parse_main_action_2229() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0x7FAE);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xAE);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD XOR A Comma LParen IX RParen End | IOE ALTD XOR LParen IX RParen End | IOE XOR A1 Comma LParen IX RParen End
void Parser::parse_main_action_2230() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xDDAE00);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD XOR A Comma LParen IX expr RParen End | IOE ALTD XOR LParen IX expr RParen End | IOE XOR A1 Comma LParen IX expr RParen End
void Parser::parse_main_action_2231() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode_idx(0xDDAE);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD XOR A Comma LParen IY RParen End | IOE ALTD XOR LParen IY RParen End | IOE XOR A1 Comma LParen IY RParen End
void Parser::parse_main_action_2232() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode(0xFDAE00);
	break;
	default:
	error_illegal_ident(); }
}

// IOE ALTD XOR A Comma LParen IY expr RParen End | IOE ALTD XOR LParen IY expr RParen End | IOE XOR A1 Comma LParen IY expr RParen End
void Parser::parse_main_action_2233() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x76);
	add_opcode_idx(0xFDAE);
	break;
	default:
	error_illegal_ident(); }
}

// IOE AND A Comma LParen HL Minus RParen End | IOE AND LParen HL Minus RParen End
void Parser::parse_main_action_2234() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x7FA6);
	add_opcode(0x2B);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xDB);
	add_opcode(0xA6);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOE AND A Comma LParen HL Plus RParen End | IOE AND LParen HL Plus RParen End
void Parser::parse_main_action_2235() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x7FA6);
	add_opcode(0x23);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xDB);
	add_opcode(0xA6);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOE AND A Comma LParen HL RParen End | IOE AND LParen HL RParen End
void Parser::parse_main_action_2236() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x7FA6);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xDB);
	add_opcode(0xA6);
	break;
	default:
	error_illegal_ident(); }
}

// IOE AND A Comma LParen IX RParen End | IOE AND LParen IX RParen End
void Parser::parse_main_action_2237() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xDDA600);
	break;
	default:
	error_illegal_ident(); }
}

// IOE AND A Comma LParen IX expr RParen End | IOE AND LParen IX expr RParen End
void Parser::parse_main_action_2238() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xDDA6);
	break;
	default:
	error_illegal_ident(); }
}

// IOE AND A Comma LParen IY RParen End | IOE AND LParen IY RParen End
void Parser::parse_main_action_2239() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xFDA600);
	break;
	default:
	error_illegal_ident(); }
}

// IOE AND A Comma LParen IY expr RParen End | IOE AND LParen IY expr RParen End
void Parser::parse_main_action_2240() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xFDA6);
	break;
	default:
	error_illegal_ident(); }
}

// IOE BIT const_expr Comma LParen HL RParen End
void Parser::parse_main_action_2241() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0xDB);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCB46+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// IOE BIT const_expr Comma LParen IX RParen End
void Parser::parse_main_action_2242() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0xDB);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xDDCB0046+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// IOE BIT const_expr Comma LParen IX expr RParen End
void Parser::parse_main_action_2243() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0xDB);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xDDCB46+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// IOE BIT const_expr Comma LParen IY RParen End
void Parser::parse_main_action_2244() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0xDB);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xFDCB0046+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// IOE BIT const_expr Comma LParen IY expr RParen End
void Parser::parse_main_action_2245() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0xDB);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xFDCB46+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// IOE CBM expr End
void Parser::parse_main_action_2246() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0xDB);
	add_opcode_n(0xED00);
	break;
	default:
	error_illegal_ident(); }
}

// IOE CLR LParen HL RParen End
void Parser::parse_main_action_2247() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x3600);
	break;
	default:
	error_illegal_ident(); }
}

// IOE CLR LParen IX RParen End
void Parser::parse_main_action_2248() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xDD360000);
	break;
	default:
	error_illegal_ident(); }
}

// IOE CLR LParen IX expr RParen End
void Parser::parse_main_action_2249() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xDD3600);
	break;
	default:
	error_illegal_ident(); }
}

// IOE CLR LParen IY RParen End
void Parser::parse_main_action_2250() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xFD360000);
	break;
	default:
	error_illegal_ident(); }
}

// IOE CLR LParen IY expr RParen End
void Parser::parse_main_action_2251() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xFD3600);
	break;
	default:
	error_illegal_ident(); }
}

// IOE CMP A Comma LParen HL Minus RParen End | IOE CMP LParen HL Minus RParen End | IOE CP A Comma LParen HL Minus RParen End | IOE CP LParen HL Minus RParen End
void Parser::parse_main_action_2252() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x7FBE);
	add_opcode(0x2B);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xDB);
	add_opcode(0xBE);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOE CMP A Comma LParen HL Plus RParen End | IOE CMP LParen HL Plus RParen End | IOE CP A Comma LParen HL Plus RParen End | IOE CP LParen HL Plus RParen End
void Parser::parse_main_action_2253() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x7FBE);
	add_opcode(0x23);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xDB);
	add_opcode(0xBE);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOE CMP A Comma LParen HL RParen End | IOE CMP LParen HL RParen End | IOE CP A Comma LParen HL RParen End | IOE CP LParen HL RParen End
void Parser::parse_main_action_2254() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x7FBE);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xDB);
	add_opcode(0xBE);
	break;
	default:
	error_illegal_ident(); }
}

// IOE CMP A Comma LParen IX RParen End | IOE CMP LParen IX RParen End | IOE CP A Comma LParen IX RParen End | IOE CP LParen IX RParen End
void Parser::parse_main_action_2255() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xDDBE00);
	break;
	default:
	error_illegal_ident(); }
}

// IOE CMP A Comma LParen IX expr RParen End | IOE CMP LParen IX expr RParen End | IOE CP A Comma LParen IX expr RParen End | IOE CP LParen IX expr RParen End
void Parser::parse_main_action_2256() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xDDBE);
	break;
	default:
	error_illegal_ident(); }
}

// IOE CMP A Comma LParen IY RParen End | IOE CMP LParen IY RParen End | IOE CP A Comma LParen IY RParen End | IOE CP LParen IY RParen End
void Parser::parse_main_action_2257() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xFDBE00);
	break;
	default:
	error_illegal_ident(); }
}

// IOE CMP A Comma LParen IY expr RParen End | IOE CMP LParen IY expr RParen End | IOE CP A Comma LParen IY expr RParen End | IOE CP LParen IY expr RParen End
void Parser::parse_main_action_2258() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xFDBE);
	break;
	default:
	error_illegal_ident(); }
}

// IOE DEC LParen HL Minus RParen End
void Parser::parse_main_action_2259() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x35);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOE DEC LParen HL Plus RParen End
void Parser::parse_main_action_2260() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x35);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOE DEC LParen HL RParen End
void Parser::parse_main_action_2261() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x35);
	break;
	default:
	error_illegal_ident(); }
}

// IOE DEC LParen IX RParen End
void Parser::parse_main_action_2262() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xDD3500);
	break;
	default:
	error_illegal_ident(); }
}

// IOE DEC LParen IX expr RParen End
void Parser::parse_main_action_2263() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xDD35);
	break;
	default:
	error_illegal_ident(); }
}

// IOE DEC LParen IY RParen End
void Parser::parse_main_action_2264() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xFD3500);
	break;
	default:
	error_illegal_ident(); }
}

// IOE DEC LParen IY expr RParen End
void Parser::parse_main_action_2265() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xFD35);
	break;
	default:
	error_illegal_ident(); }
}

// IOE INC LParen HL Minus RParen End
void Parser::parse_main_action_2266() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x34);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOE INC LParen HL Plus RParen End
void Parser::parse_main_action_2267() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x34);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOE INC LParen HL RParen End
void Parser::parse_main_action_2268() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x34);
	break;
	default:
	error_illegal_ident(); }
}

// IOE INC LParen IX RParen End
void Parser::parse_main_action_2269() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xDD3400);
	break;
	default:
	error_illegal_ident(); }
}

// IOE INC LParen IX expr RParen End
void Parser::parse_main_action_2270() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xDD34);
	break;
	default:
	error_illegal_ident(); }
}

// IOE INC LParen IY RParen End
void Parser::parse_main_action_2271() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xFD3400);
	break;
	default:
	error_illegal_ident(); }
}

// IOE INC LParen IY expr RParen End
void Parser::parse_main_action_2272() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xFD34);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD A Comma LParen BC Minus RParen End | IOE LDD A Comma LParen BC RParen End
void Parser::parse_main_action_2273() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x0A);
	add_opcode(0x0B);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD A Comma LParen BC Plus RParen End | IOE LDI A Comma LParen BC RParen End
void Parser::parse_main_action_2274() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x0A);
	add_opcode(0x03);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD A Comma LParen BC RParen End
void Parser::parse_main_action_2275() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x0A);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD A Comma LParen DE Minus RParen End | IOE LDD A Comma LParen DE RParen End
void Parser::parse_main_action_2276() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x1A);
	add_opcode(0x1B);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD A Comma LParen DE Plus RParen End | IOE LDI A Comma LParen DE RParen End
void Parser::parse_main_action_2277() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x1A);
	add_opcode(0x13);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD A Comma LParen DE RParen End
void Parser::parse_main_action_2278() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x1A);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD A Comma LParen HL Minus RParen End | IOE LD A Comma LParen HLD RParen End | IOE LDD A Comma LParen HL RParen End
void Parser::parse_main_action_2279() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x7E);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD A Comma LParen HL Plus RParen End | IOE LD A Comma LParen HLI RParen End | IOE LDI A Comma LParen HL RParen End
void Parser::parse_main_action_2280() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x7E);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD A Comma LParen HL RParen End
void Parser::parse_main_action_2281() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x7E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD A Comma LParen IX Plus A RParen End
void Parser::parse_main_action_2282() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xDD06);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD A Comma LParen IX RParen End
void Parser::parse_main_action_2283() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xDD7E00);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD A Comma LParen IX expr RParen End
void Parser::parse_main_action_2284() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xDD7E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD A Comma LParen IY Plus A RParen End
void Parser::parse_main_action_2285() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xFD06);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD A Comma LParen IY RParen End
void Parser::parse_main_action_2286() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xFD7E00);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD A Comma LParen IY expr RParen End
void Parser::parse_main_action_2287() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xFD7E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD A Comma expr End
void Parser::parse_main_action_2288() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0xDB);
	add_opcode_nn(0x3A, 0);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD B Comma LParen HL Minus RParen End | IOE LD B Comma LParen HLD RParen End | IOE LDD B Comma LParen HL RParen End
void Parser::parse_main_action_2289() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x46);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD B Comma LParen HL Plus RParen End | IOE LD B Comma LParen HLI RParen End | IOE LDI B Comma LParen HL RParen End
void Parser::parse_main_action_2290() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x46);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD B Comma LParen HL RParen End
void Parser::parse_main_action_2291() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x46);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD B Comma LParen IX RParen End
void Parser::parse_main_action_2292() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xDD4600);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD B Comma LParen IX expr RParen End
void Parser::parse_main_action_2293() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xDD46);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD B Comma LParen IY RParen End
void Parser::parse_main_action_2294() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xFD4600);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD B Comma LParen IY expr RParen End
void Parser::parse_main_action_2295() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xFD46);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD BC Comma expr End
void Parser::parse_main_action_2296() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0xDB);
	add_opcode_nn(0xED4B, 0);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD BCDE Comma LParen HL RParen End
void Parser::parse_main_action_2297() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xDD1A);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD BCDE Comma LParen IX RParen End
void Parser::parse_main_action_2298() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xDDCE00);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD BCDE Comma LParen IX expr RParen End
void Parser::parse_main_action_2299() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xDDCE);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD BCDE Comma LParen IY RParen End
void Parser::parse_main_action_2300() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xDDDE00);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD BCDE Comma LParen IY expr RParen End
void Parser::parse_main_action_2301() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xDDDE);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD BCDE Comma expr End
void Parser::parse_main_action_2302() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0xDB);
	add_opcode_nn(0x93, 0);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD C Comma LParen HL Minus RParen End | IOE LD C Comma LParen HLD RParen End | IOE LDD C Comma LParen HL RParen End
void Parser::parse_main_action_2303() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x4E);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD C Comma LParen HL Plus RParen End | IOE LD C Comma LParen HLI RParen End | IOE LDI C Comma LParen HL RParen End
void Parser::parse_main_action_2304() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x4E);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD C Comma LParen HL RParen End
void Parser::parse_main_action_2305() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x4E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD C Comma LParen IX RParen End
void Parser::parse_main_action_2306() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xDD4E00);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD C Comma LParen IX expr RParen End
void Parser::parse_main_action_2307() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xDD4E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD C Comma LParen IY RParen End
void Parser::parse_main_action_2308() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xFD4E00);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD C Comma LParen IY expr RParen End
void Parser::parse_main_action_2309() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xFD4E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD D Comma LParen HL Minus RParen End | IOE LD D Comma LParen HLD RParen End | IOE LDD D Comma LParen HL RParen End
void Parser::parse_main_action_2310() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x56);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD D Comma LParen HL Plus RParen End | IOE LD D Comma LParen HLI RParen End | IOE LDI D Comma LParen HL RParen End
void Parser::parse_main_action_2311() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x56);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD D Comma LParen HL RParen End
void Parser::parse_main_action_2312() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x56);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD D Comma LParen IX RParen End
void Parser::parse_main_action_2313() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xDD5600);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD D Comma LParen IX expr RParen End
void Parser::parse_main_action_2314() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xDD56);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD D Comma LParen IY RParen End
void Parser::parse_main_action_2315() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xFD5600);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD D Comma LParen IY expr RParen End
void Parser::parse_main_action_2316() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xFD56);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD DE Comma expr End
void Parser::parse_main_action_2317() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0xDB);
	add_opcode_nn(0xED5B, 0);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD E Comma LParen HL Minus RParen End | IOE LD E Comma LParen HLD RParen End | IOE LDD E Comma LParen HL RParen End
void Parser::parse_main_action_2318() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x5E);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD E Comma LParen HL Plus RParen End | IOE LD E Comma LParen HLI RParen End | IOE LDI E Comma LParen HL RParen End
void Parser::parse_main_action_2319() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x5E);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD E Comma LParen HL RParen End
void Parser::parse_main_action_2320() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x5E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD E Comma LParen IX RParen End
void Parser::parse_main_action_2321() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xDD5E00);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD E Comma LParen IX expr RParen End
void Parser::parse_main_action_2322() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xDD5E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD E Comma LParen IY RParen End
void Parser::parse_main_action_2323() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xFD5E00);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD E Comma LParen IY expr RParen End
void Parser::parse_main_action_2324() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xFD5E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD H Comma LParen HL Minus RParen End | IOE LD H Comma LParen HLD RParen End | IOE LDD H Comma LParen HL RParen End
void Parser::parse_main_action_2325() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x66);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD H Comma LParen HL Plus RParen End | IOE LD H Comma LParen HLI RParen End | IOE LDI H Comma LParen HL RParen End
void Parser::parse_main_action_2326() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x66);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD H Comma LParen HL RParen End
void Parser::parse_main_action_2327() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x66);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD H Comma LParen IX RParen End
void Parser::parse_main_action_2328() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xDD6600);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD H Comma LParen IX expr RParen End
void Parser::parse_main_action_2329() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xDD66);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD H Comma LParen IY RParen End
void Parser::parse_main_action_2330() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xFD6600);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD H Comma LParen IY expr RParen End
void Parser::parse_main_action_2331() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xFD66);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD HL Comma LParen HL RParen End
void Parser::parse_main_action_2332() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xDDE400);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD HL Comma LParen HL expr RParen End
void Parser::parse_main_action_2333() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xDDE4);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD HL Comma LParen IX RParen End
void Parser::parse_main_action_2334() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xE400);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD HL Comma LParen IX expr RParen End
void Parser::parse_main_action_2335() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xE4);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD HL Comma LParen IY RParen End
void Parser::parse_main_action_2336() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xFDE400);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD HL Comma LParen IY expr RParen End
void Parser::parse_main_action_2337() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xFDE4);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD HL Comma expr End
void Parser::parse_main_action_2338() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0xDB);
	add_opcode_nn(0x2A, 0);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD IX Comma expr End
void Parser::parse_main_action_2339() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0xDB);
	add_opcode_nn(0xDD2A, 0);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD IY Comma expr End
void Parser::parse_main_action_2340() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0xDB);
	add_opcode_nn(0xFD2A, 0);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD JK Comma expr End
void Parser::parse_main_action_2341() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0xDB);
	add_opcode_nn(0x99, 0);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD JKHL Comma LParen HL RParen End
void Parser::parse_main_action_2342() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xFD1A);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD JKHL Comma LParen IX RParen End
void Parser::parse_main_action_2343() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xFDCE00);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD JKHL Comma LParen IX expr RParen End
void Parser::parse_main_action_2344() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xFDCE);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD JKHL Comma LParen IY RParen End
void Parser::parse_main_action_2345() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xFDDE00);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD JKHL Comma LParen IY expr RParen End
void Parser::parse_main_action_2346() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xFDDE);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD JKHL Comma expr End
void Parser::parse_main_action_2347() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0xDB);
	add_opcode_nn(0x94, 0);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD L Comma LParen HL Minus RParen End | IOE LD L Comma LParen HLD RParen End | IOE LDD L Comma LParen HL RParen End
void Parser::parse_main_action_2348() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x6E);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD L Comma LParen HL Plus RParen End | IOE LD L Comma LParen HLI RParen End | IOE LDI L Comma LParen HL RParen End
void Parser::parse_main_action_2349() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x6E);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD L Comma LParen HL RParen End
void Parser::parse_main_action_2350() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x6E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD L Comma LParen IX RParen End
void Parser::parse_main_action_2351() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xDD6E00);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD L Comma LParen IX expr RParen End
void Parser::parse_main_action_2352() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xDD6E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD L Comma LParen IY RParen End
void Parser::parse_main_action_2353() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xFD6E00);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD L Comma LParen IY expr RParen End
void Parser::parse_main_action_2354() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xFD6E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD SP Comma expr End
void Parser::parse_main_action_2355() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0xDB);
	add_opcode_nn(0xED7B, 0);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen BC Minus RParen Comma A End | IOE LDD LParen BC RParen Comma A End
void Parser::parse_main_action_2356() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x02);
	add_opcode(0x0B);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen BC Plus RParen Comma A End | IOE LDI LParen BC RParen Comma A End
void Parser::parse_main_action_2357() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x02);
	add_opcode(0x03);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen BC RParen Comma A End
void Parser::parse_main_action_2358() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x02);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen DE Minus RParen Comma A End | IOE LDD LParen DE RParen Comma A End
void Parser::parse_main_action_2359() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x12);
	add_opcode(0x1B);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen DE Plus RParen Comma A End | IOE LDI LParen DE RParen Comma A End
void Parser::parse_main_action_2360() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x12);
	add_opcode(0x13);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen DE RParen Comma A End
void Parser::parse_main_action_2361() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x12);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen HL Minus RParen Comma A End | IOE LD LParen HLD RParen Comma A End | IOE LDD LParen HL RParen Comma A End
void Parser::parse_main_action_2362() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x77);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen HL Minus RParen Comma B End | IOE LD LParen HLD RParen Comma B End | IOE LDD LParen HL RParen Comma B End
void Parser::parse_main_action_2363() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x70);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen HL Minus RParen Comma C End | IOE LD LParen HLD RParen Comma C End | IOE LDD LParen HL RParen Comma C End
void Parser::parse_main_action_2364() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x71);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen HL Minus RParen Comma D End | IOE LD LParen HLD RParen Comma D End | IOE LDD LParen HL RParen Comma D End
void Parser::parse_main_action_2365() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x72);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen HL Minus RParen Comma E End | IOE LD LParen HLD RParen Comma E End | IOE LDD LParen HL RParen Comma E End
void Parser::parse_main_action_2366() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x73);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen HL Minus RParen Comma H End | IOE LD LParen HLD RParen Comma H End | IOE LDD LParen HL RParen Comma H End
void Parser::parse_main_action_2367() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x74);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen HL Minus RParen Comma L End | IOE LD LParen HLD RParen Comma L End | IOE LDD LParen HL RParen Comma L End
void Parser::parse_main_action_2368() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x75);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen HL Minus RParen Comma expr End | IOE LDD LParen HL RParen Comma expr End
void Parser::parse_main_action_2369() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0xDB);
	add_opcode_n(0x36);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen HL Plus RParen Comma A End | IOE LD LParen HLI RParen Comma A End | IOE LDI LParen HL RParen Comma A End
void Parser::parse_main_action_2370() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x77);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen HL Plus RParen Comma B End | IOE LD LParen HLI RParen Comma B End | IOE LDI LParen HL RParen Comma B End
void Parser::parse_main_action_2371() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x70);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen HL Plus RParen Comma C End | IOE LD LParen HLI RParen Comma C End | IOE LDI LParen HL RParen Comma C End
void Parser::parse_main_action_2372() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x71);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen HL Plus RParen Comma D End | IOE LD LParen HLI RParen Comma D End | IOE LDI LParen HL RParen Comma D End
void Parser::parse_main_action_2373() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x72);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen HL Plus RParen Comma E End | IOE LD LParen HLI RParen Comma E End | IOE LDI LParen HL RParen Comma E End
void Parser::parse_main_action_2374() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x73);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen HL Plus RParen Comma H End | IOE LD LParen HLI RParen Comma H End | IOE LDI LParen HL RParen Comma H End
void Parser::parse_main_action_2375() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x74);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen HL Plus RParen Comma L End | IOE LD LParen HLI RParen Comma L End | IOE LDI LParen HL RParen Comma L End
void Parser::parse_main_action_2376() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x75);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen HL Plus RParen Comma expr End | IOE LDI LParen HL RParen Comma expr End
void Parser::parse_main_action_2377() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0xDB);
	add_opcode_n(0x36);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen HL RParen Comma A End
void Parser::parse_main_action_2378() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x77);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen HL RParen Comma B End
void Parser::parse_main_action_2379() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x70);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen HL RParen Comma BCDE End
void Parser::parse_main_action_2380() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xDD1B);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen HL RParen Comma C End
void Parser::parse_main_action_2381() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x71);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen HL RParen Comma D End
void Parser::parse_main_action_2382() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x72);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen HL RParen Comma E End
void Parser::parse_main_action_2383() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x73);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen HL RParen Comma H End
void Parser::parse_main_action_2384() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x74);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen HL RParen Comma HL End
void Parser::parse_main_action_2385() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xDDF400);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen HL RParen Comma JKHL End
void Parser::parse_main_action_2386() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xFD1B);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen HL RParen Comma L End
void Parser::parse_main_action_2387() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x75);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen HL RParen Comma expr End
void Parser::parse_main_action_2388() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0xDB);
	add_opcode_n(0x36);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen HL expr RParen Comma HL End
void Parser::parse_main_action_2389() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xDDF4);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen IX RParen Comma A End
void Parser::parse_main_action_2390() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xDD7700);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen IX RParen Comma B End
void Parser::parse_main_action_2391() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xDD7000);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen IX RParen Comma BCDE End
void Parser::parse_main_action_2392() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xDDCF00);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen IX RParen Comma C End
void Parser::parse_main_action_2393() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xDD7100);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen IX RParen Comma D End
void Parser::parse_main_action_2394() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xDD7200);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen IX RParen Comma E End
void Parser::parse_main_action_2395() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xDD7300);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen IX RParen Comma H End
void Parser::parse_main_action_2396() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xDD7400);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen IX RParen Comma HL End
void Parser::parse_main_action_2397() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xF400);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen IX RParen Comma JKHL End
void Parser::parse_main_action_2398() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xFDCF00);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen IX RParen Comma L End
void Parser::parse_main_action_2399() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xDD7500);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen IX RParen Comma expr End
void Parser::parse_main_action_2400() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0xDB);
	add_opcode_n(0xDD3600);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen IX expr RParen Comma A End
void Parser::parse_main_action_2401() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xDD77);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen IX expr RParen Comma B End
void Parser::parse_main_action_2402() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xDD70);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen IX expr RParen Comma BCDE End
void Parser::parse_main_action_2403() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xDDCF);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen IX expr RParen Comma C End
void Parser::parse_main_action_2404() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xDD71);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen IX expr RParen Comma D End
void Parser::parse_main_action_2405() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xDD72);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen IX expr RParen Comma E End
void Parser::parse_main_action_2406() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xDD73);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen IX expr RParen Comma H End
void Parser::parse_main_action_2407() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xDD74);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen IX expr RParen Comma HL End
void Parser::parse_main_action_2408() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xF4);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen IX expr RParen Comma JKHL End
void Parser::parse_main_action_2409() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xFDCF);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen IX expr RParen Comma L End
void Parser::parse_main_action_2410() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xDD75);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen IX expr RParen Comma expr End
void Parser::parse_main_action_2411() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0xDB);
	add_opcode_idx_n(0xDD36);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen IY RParen Comma A End
void Parser::parse_main_action_2412() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xFD7700);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen IY RParen Comma B End
void Parser::parse_main_action_2413() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xFD7000);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen IY RParen Comma BCDE End
void Parser::parse_main_action_2414() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xDDDF00);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen IY RParen Comma C End
void Parser::parse_main_action_2415() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xFD7100);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen IY RParen Comma D End
void Parser::parse_main_action_2416() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xFD7200);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen IY RParen Comma E End
void Parser::parse_main_action_2417() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xFD7300);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen IY RParen Comma H End
void Parser::parse_main_action_2418() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xFD7400);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen IY RParen Comma HL End
void Parser::parse_main_action_2419() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xFDF400);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen IY RParen Comma JKHL End
void Parser::parse_main_action_2420() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xFDDF00);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen IY RParen Comma L End
void Parser::parse_main_action_2421() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xFD7500);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen IY RParen Comma expr End
void Parser::parse_main_action_2422() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0xDB);
	add_opcode_n(0xFD3600);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen IY expr RParen Comma A End
void Parser::parse_main_action_2423() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xFD77);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen IY expr RParen Comma B End
void Parser::parse_main_action_2424() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xFD70);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen IY expr RParen Comma BCDE End
void Parser::parse_main_action_2425() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xDDDF);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen IY expr RParen Comma C End
void Parser::parse_main_action_2426() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xFD71);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen IY expr RParen Comma D End
void Parser::parse_main_action_2427() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xFD72);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen IY expr RParen Comma E End
void Parser::parse_main_action_2428() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xFD73);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen IY expr RParen Comma H End
void Parser::parse_main_action_2429() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xFD74);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen IY expr RParen Comma HL End
void Parser::parse_main_action_2430() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xFDF4);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen IY expr RParen Comma JKHL End
void Parser::parse_main_action_2431() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xFDDF);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen IY expr RParen Comma L End
void Parser::parse_main_action_2432() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xFD75);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD LParen IY expr RParen Comma expr End
void Parser::parse_main_action_2433() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0xDB);
	add_opcode_idx_n(0xFD36);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD expr Comma A End
void Parser::parse_main_action_2434() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0xDB);
	add_opcode_nn(0x32, 0);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD expr Comma BC End
void Parser::parse_main_action_2435() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0xDB);
	add_opcode_nn(0xED43, 0);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD expr Comma BCDE End
void Parser::parse_main_action_2436() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0xDB);
	add_opcode_nn(0x83, 0);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD expr Comma DE End
void Parser::parse_main_action_2437() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0xDB);
	add_opcode_nn(0xED53, 0);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD expr Comma HL End
void Parser::parse_main_action_2438() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0xDB);
	add_opcode_nn(0x22, 0);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD expr Comma IX End
void Parser::parse_main_action_2439() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0xDB);
	add_opcode_nn(0xDD22, 0);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD expr Comma IY End
void Parser::parse_main_action_2440() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0xDB);
	add_opcode_nn(0xFD22, 0);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD expr Comma JK End
void Parser::parse_main_action_2441() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0xDB);
	add_opcode_nn(0x89, 0);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD expr Comma JKHL End
void Parser::parse_main_action_2442() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0xDB);
	add_opcode_nn(0x84, 0);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LD expr Comma SP End
void Parser::parse_main_action_2443() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0xDB);
	add_opcode_nn(0xED73, 0);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LDD End
void Parser::parse_main_action_2444() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xEDA8);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LDDR End
void Parser::parse_main_action_2445() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xEDB8);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LDDSR End
void Parser::parse_main_action_2446() {
	switch (g_args.cpu()) {
	case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xED98);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LDI End
void Parser::parse_main_action_2447() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xEDA0);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LDIR End
void Parser::parse_main_action_2448() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xEDB0);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LDISR End
void Parser::parse_main_action_2449() {
	switch (g_args.cpu()) {
	case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xED90);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LSDDR End
void Parser::parse_main_action_2450() {
	switch (g_args.cpu()) {
	case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xEDD8);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LSDR End
void Parser::parse_main_action_2451() {
	switch (g_args.cpu()) {
	case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xEDF8);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LSIDR End
void Parser::parse_main_action_2452() {
	switch (g_args.cpu()) {
	case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xEDD0);
	break;
	default:
	error_illegal_ident(); }
}

// IOE LSIR End
void Parser::parse_main_action_2453() {
	switch (g_args.cpu()) {
	case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xEDF0);
	break;
	default:
	error_illegal_ident(); }
}

// IOE OR A Comma LParen HL Minus RParen End | IOE OR LParen HL Minus RParen End
void Parser::parse_main_action_2454() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x7FB6);
	add_opcode(0x2B);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xDB);
	add_opcode(0xB6);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOE OR A Comma LParen HL Plus RParen End | IOE OR LParen HL Plus RParen End
void Parser::parse_main_action_2455() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x7FB6);
	add_opcode(0x23);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xDB);
	add_opcode(0xB6);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOE OR A Comma LParen HL RParen End | IOE OR LParen HL RParen End
void Parser::parse_main_action_2456() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x7FB6);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xDB);
	add_opcode(0xB6);
	break;
	default:
	error_illegal_ident(); }
}

// IOE OR A Comma LParen IX RParen End | IOE OR LParen IX RParen End
void Parser::parse_main_action_2457() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xDDB600);
	break;
	default:
	error_illegal_ident(); }
}

// IOE OR A Comma LParen IX expr RParen End | IOE OR LParen IX expr RParen End
void Parser::parse_main_action_2458() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xDDB6);
	break;
	default:
	error_illegal_ident(); }
}

// IOE OR A Comma LParen IY RParen End | IOE OR LParen IY RParen End
void Parser::parse_main_action_2459() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xFDB600);
	break;
	default:
	error_illegal_ident(); }
}

// IOE OR A Comma LParen IY expr RParen End | IOE OR LParen IY expr RParen End
void Parser::parse_main_action_2460() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xFDB6);
	break;
	default:
	error_illegal_ident(); }
}

// IOE RES const_expr Comma LParen HL RParen End
void Parser::parse_main_action_2461() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0xDB);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCB86+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// IOE RES const_expr Comma LParen IX RParen End
void Parser::parse_main_action_2462() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0xDB);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xDDCB0086+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// IOE RES const_expr Comma LParen IX expr RParen End
void Parser::parse_main_action_2463() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0xDB);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xDDCB86+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// IOE RES const_expr Comma LParen IY RParen End
void Parser::parse_main_action_2464() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0xDB);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xFDCB0086+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// IOE RES const_expr Comma LParen IY expr RParen End
void Parser::parse_main_action_2465() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0xDB);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xFDCB86+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// IOE RL LParen HL RParen End
void Parser::parse_main_action_2466() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xCB16);
	break;
	default:
	error_illegal_ident(); }
}

// IOE RL LParen IX RParen End
void Parser::parse_main_action_2467() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xDDCB0016);
	break;
	default:
	error_illegal_ident(); }
}

// IOE RL LParen IX expr RParen End
void Parser::parse_main_action_2468() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xDDCB16);
	break;
	default:
	error_illegal_ident(); }
}

// IOE RL LParen IY RParen End
void Parser::parse_main_action_2469() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xFDCB0016);
	break;
	default:
	error_illegal_ident(); }
}

// IOE RL LParen IY expr RParen End
void Parser::parse_main_action_2470() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xFDCB16);
	break;
	default:
	error_illegal_ident(); }
}

// IOE RLC LParen HL RParen End
void Parser::parse_main_action_2471() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xCB06);
	break;
	default:
	error_illegal_ident(); }
}

// IOE RLC LParen IX RParen End
void Parser::parse_main_action_2472() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xDDCB0006);
	break;
	default:
	error_illegal_ident(); }
}

// IOE RLC LParen IX expr RParen End
void Parser::parse_main_action_2473() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xDDCB06);
	break;
	default:
	error_illegal_ident(); }
}

// IOE RLC LParen IY RParen End
void Parser::parse_main_action_2474() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xFDCB0006);
	break;
	default:
	error_illegal_ident(); }
}

// IOE RLC LParen IY expr RParen End
void Parser::parse_main_action_2475() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xFDCB06);
	break;
	default:
	error_illegal_ident(); }
}

// IOE RR LParen HL RParen End
void Parser::parse_main_action_2476() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xCB1E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE RR LParen IX RParen End
void Parser::parse_main_action_2477() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xDDCB001E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE RR LParen IX expr RParen End
void Parser::parse_main_action_2478() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xDDCB1E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE RR LParen IY RParen End
void Parser::parse_main_action_2479() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xFDCB001E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE RR LParen IY expr RParen End
void Parser::parse_main_action_2480() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xFDCB1E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE RRC LParen HL RParen End
void Parser::parse_main_action_2481() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xCB0E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE RRC LParen IX RParen End
void Parser::parse_main_action_2482() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xDDCB000E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE RRC LParen IX expr RParen End
void Parser::parse_main_action_2483() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xDDCB0E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE RRC LParen IY RParen End
void Parser::parse_main_action_2484() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xFDCB000E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE RRC LParen IY expr RParen End
void Parser::parse_main_action_2485() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xFDCB0E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE SBC A Comma LParen HL Minus RParen End | IOE SBC LParen HL Minus RParen End
void Parser::parse_main_action_2486() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x7F9E);
	add_opcode(0x2B);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xDB);
	add_opcode(0x9E);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOE SBC A Comma LParen HL Plus RParen End | IOE SBC LParen HL Plus RParen End
void Parser::parse_main_action_2487() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x7F9E);
	add_opcode(0x23);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xDB);
	add_opcode(0x9E);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOE SBC A Comma LParen HL RParen End | IOE SBC LParen HL RParen End
void Parser::parse_main_action_2488() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x7F9E);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xDB);
	add_opcode(0x9E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE SBC A Comma LParen IX RParen End | IOE SBC LParen IX RParen End
void Parser::parse_main_action_2489() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xDD9E00);
	break;
	default:
	error_illegal_ident(); }
}

// IOE SBC A Comma LParen IX expr RParen End | IOE SBC LParen IX expr RParen End
void Parser::parse_main_action_2490() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xDD9E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE SBC A Comma LParen IY RParen End | IOE SBC LParen IY RParen End
void Parser::parse_main_action_2491() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xFD9E00);
	break;
	default:
	error_illegal_ident(); }
}

// IOE SBC A Comma LParen IY expr RParen End | IOE SBC LParen IY expr RParen End
void Parser::parse_main_action_2492() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xFD9E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE SET const_expr Comma LParen HL RParen End
void Parser::parse_main_action_2493() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0xDB);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCBC6+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// IOE SET const_expr Comma LParen IX RParen End
void Parser::parse_main_action_2494() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0xDB);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xDDCB00C6+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// IOE SET const_expr Comma LParen IX expr RParen End
void Parser::parse_main_action_2495() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0xDB);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xDDCBC6+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// IOE SET const_expr Comma LParen IY RParen End
void Parser::parse_main_action_2496() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0xDB);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xFDCB00C6+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// IOE SET const_expr Comma LParen IY expr RParen End
void Parser::parse_main_action_2497() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0xDB);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xFDCBC6+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// IOE SLA LParen HL RParen End
void Parser::parse_main_action_2498() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xCB26);
	break;
	default:
	error_illegal_ident(); }
}

// IOE SLA LParen IX RParen End
void Parser::parse_main_action_2499() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xDDCB0026);
	break;
	default:
	error_illegal_ident(); }
}

// IOE SLA LParen IX expr RParen End
void Parser::parse_main_action_2500() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xDDCB26);
	break;
	default:
	error_illegal_ident(); }
}

// IOE SLA LParen IY RParen End
void Parser::parse_main_action_2501() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xFDCB0026);
	break;
	default:
	error_illegal_ident(); }
}

// IOE SLA LParen IY expr RParen End
void Parser::parse_main_action_2502() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xFDCB26);
	break;
	default:
	error_illegal_ident(); }
}

// IOE SRA LParen HL RParen End
void Parser::parse_main_action_2503() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xCB2E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE SRA LParen IX RParen End
void Parser::parse_main_action_2504() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xDDCB002E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE SRA LParen IX expr RParen End
void Parser::parse_main_action_2505() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xDDCB2E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE SRA LParen IY RParen End
void Parser::parse_main_action_2506() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xFDCB002E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE SRA LParen IY expr RParen End
void Parser::parse_main_action_2507() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xFDCB2E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE SRL LParen HL RParen End
void Parser::parse_main_action_2508() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xCB3E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE SRL LParen IX RParen End
void Parser::parse_main_action_2509() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xDDCB003E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE SRL LParen IX expr RParen End
void Parser::parse_main_action_2510() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xDDCB3E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE SRL LParen IY RParen End
void Parser::parse_main_action_2511() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xFDCB003E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE SRL LParen IY expr RParen End
void Parser::parse_main_action_2512() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xFDCB3E);
	break;
	default:
	error_illegal_ident(); }
}

// IOE SUB A Comma LParen HL Minus RParen End | IOE SUB LParen HL Minus RParen End
void Parser::parse_main_action_2513() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x7F96);
	add_opcode(0x2B);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xDB);
	add_opcode(0x96);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOE SUB A Comma LParen HL Plus RParen End | IOE SUB LParen HL Plus RParen End
void Parser::parse_main_action_2514() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x7F96);
	add_opcode(0x23);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xDB);
	add_opcode(0x96);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOE SUB A Comma LParen HL RParen End | IOE SUB LParen HL RParen End
void Parser::parse_main_action_2515() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x7F96);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xDB);
	add_opcode(0x96);
	break;
	default:
	error_illegal_ident(); }
}

// IOE SUB A Comma LParen IX RParen End | IOE SUB LParen IX RParen End
void Parser::parse_main_action_2516() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xDD9600);
	break;
	default:
	error_illegal_ident(); }
}

// IOE SUB A Comma LParen IX expr RParen End | IOE SUB LParen IX expr RParen End
void Parser::parse_main_action_2517() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xDD96);
	break;
	default:
	error_illegal_ident(); }
}

// IOE SUB A Comma LParen IY RParen End | IOE SUB LParen IY RParen End
void Parser::parse_main_action_2518() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xFD9600);
	break;
	default:
	error_illegal_ident(); }
}

// IOE SUB A Comma LParen IY expr RParen End | IOE SUB LParen IY expr RParen End
void Parser::parse_main_action_2519() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xFD96);
	break;
	default:
	error_illegal_ident(); }
}

// IOE XOR A Comma LParen HL Minus RParen End | IOE XOR LParen HL Minus RParen End
void Parser::parse_main_action_2520() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x7FAE);
	add_opcode(0x2B);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xDB);
	add_opcode(0xAE);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOE XOR A Comma LParen HL Plus RParen End | IOE XOR LParen HL Plus RParen End
void Parser::parse_main_action_2521() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x7FAE);
	add_opcode(0x23);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xDB);
	add_opcode(0xAE);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOE XOR A Comma LParen HL RParen End | IOE XOR LParen HL RParen End
void Parser::parse_main_action_2522() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0x7FAE);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xDB);
	add_opcode(0xAE);
	break;
	default:
	error_illegal_ident(); }
}

// IOE XOR A Comma LParen IX RParen End | IOE XOR LParen IX RParen End
void Parser::parse_main_action_2523() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xDDAE00);
	break;
	default:
	error_illegal_ident(); }
}

// IOE XOR A Comma LParen IX expr RParen End | IOE XOR LParen IX expr RParen End
void Parser::parse_main_action_2524() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xDDAE);
	break;
	default:
	error_illegal_ident(); }
}

// IOE XOR A Comma LParen IY RParen End | IOE XOR LParen IY RParen End
void Parser::parse_main_action_2525() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode(0xFDAE00);
	break;
	default:
	error_illegal_ident(); }
}

// IOE XOR A Comma LParen IY expr RParen End | IOE XOR LParen IY expr RParen End
void Parser::parse_main_action_2526() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDB);
	add_opcode_idx(0xFDAE);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ADC A Comma LParen HL Minus RParen End | IOI ADC LParen HL Minus RParen End
void Parser::parse_main_action_2527() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x7F8E);
	add_opcode(0x2B);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xD3);
	add_opcode(0x8E);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ADC A Comma LParen HL Plus RParen End | IOI ADC LParen HL Plus RParen End
void Parser::parse_main_action_2528() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x7F8E);
	add_opcode(0x23);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xD3);
	add_opcode(0x8E);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ADC A Comma LParen HL RParen End | IOI ADC LParen HL RParen End
void Parser::parse_main_action_2529() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x7F8E);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xD3);
	add_opcode(0x8E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ADC A Comma LParen IX RParen End | IOI ADC LParen IX RParen End
void Parser::parse_main_action_2530() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xDD8E00);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ADC A Comma LParen IX expr RParen End | IOI ADC LParen IX expr RParen End
void Parser::parse_main_action_2531() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xDD8E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ADC A Comma LParen IY RParen End | IOI ADC LParen IY RParen End
void Parser::parse_main_action_2532() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xFD8E00);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ADC A Comma LParen IY expr RParen End | IOI ADC LParen IY expr RParen End
void Parser::parse_main_action_2533() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xFD8E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ADC A1 Comma LParen HL Minus RParen End | IOI ALTD ADC A Comma LParen HL Minus RParen End | IOI ALTD ADC LParen HL Minus RParen End
void Parser::parse_main_action_2534() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0x7F8E);
	add_opcode(0x2B);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0x8E);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ADC A1 Comma LParen HL Plus RParen End | IOI ALTD ADC A Comma LParen HL Plus RParen End | IOI ALTD ADC LParen HL Plus RParen End
void Parser::parse_main_action_2535() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0x7F8E);
	add_opcode(0x23);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0x8E);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ADC A1 Comma LParen HL RParen End | IOI ALTD ADC A Comma LParen HL RParen End | IOI ALTD ADC LParen HL RParen End
void Parser::parse_main_action_2536() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0x7F8E);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0x8E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ADC A1 Comma LParen IX RParen End | IOI ALTD ADC A Comma LParen IX RParen End | IOI ALTD ADC LParen IX RParen End
void Parser::parse_main_action_2537() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xDD8E00);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ADC A1 Comma LParen IX expr RParen End | IOI ALTD ADC A Comma LParen IX expr RParen End | IOI ALTD ADC LParen IX expr RParen End
void Parser::parse_main_action_2538() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode_idx(0xDD8E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ADC A1 Comma LParen IY RParen End | IOI ALTD ADC A Comma LParen IY RParen End | IOI ALTD ADC LParen IY RParen End
void Parser::parse_main_action_2539() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xFD8E00);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ADC A1 Comma LParen IY expr RParen End | IOI ALTD ADC A Comma LParen IY expr RParen End | IOI ALTD ADC LParen IY expr RParen End
void Parser::parse_main_action_2540() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode_idx(0xFD8E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ADD A Comma LParen HL Minus RParen End | IOI ADD LParen HL Minus RParen End
void Parser::parse_main_action_2541() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x7F86);
	add_opcode(0x2B);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xD3);
	add_opcode(0x86);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ADD A Comma LParen HL Plus RParen End | IOI ADD LParen HL Plus RParen End
void Parser::parse_main_action_2542() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x7F86);
	add_opcode(0x23);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xD3);
	add_opcode(0x86);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ADD A Comma LParen HL RParen End | IOI ADD LParen HL RParen End
void Parser::parse_main_action_2543() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x7F86);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xD3);
	add_opcode(0x86);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ADD A Comma LParen IX RParen End | IOI ADD LParen IX RParen End
void Parser::parse_main_action_2544() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xDD8600);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ADD A Comma LParen IX expr RParen End | IOI ADD LParen IX expr RParen End
void Parser::parse_main_action_2545() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xDD86);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ADD A Comma LParen IY RParen End | IOI ADD LParen IY RParen End
void Parser::parse_main_action_2546() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xFD8600);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ADD A Comma LParen IY expr RParen End | IOI ADD LParen IY expr RParen End
void Parser::parse_main_action_2547() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xFD86);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ADD A1 Comma LParen HL Minus RParen End | IOI ALTD ADD A Comma LParen HL Minus RParen End | IOI ALTD ADD LParen HL Minus RParen End
void Parser::parse_main_action_2548() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0x7F86);
	add_opcode(0x2B);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0x86);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ADD A1 Comma LParen HL Plus RParen End | IOI ALTD ADD A Comma LParen HL Plus RParen End | IOI ALTD ADD LParen HL Plus RParen End
void Parser::parse_main_action_2549() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0x7F86);
	add_opcode(0x23);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0x86);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ADD A1 Comma LParen HL RParen End | IOI ALTD ADD A Comma LParen HL RParen End | IOI ALTD ADD LParen HL RParen End
void Parser::parse_main_action_2550() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0x7F86);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0x86);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ADD A1 Comma LParen IX RParen End | IOI ALTD ADD A Comma LParen IX RParen End | IOI ALTD ADD LParen IX RParen End
void Parser::parse_main_action_2551() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xDD8600);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ADD A1 Comma LParen IX expr RParen End | IOI ALTD ADD A Comma LParen IX expr RParen End | IOI ALTD ADD LParen IX expr RParen End
void Parser::parse_main_action_2552() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode_idx(0xDD86);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ADD A1 Comma LParen IY RParen End | IOI ALTD ADD A Comma LParen IY RParen End | IOI ALTD ADD LParen IY RParen End
void Parser::parse_main_action_2553() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xFD8600);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ADD A1 Comma LParen IY expr RParen End | IOI ALTD ADD A Comma LParen IY expr RParen End | IOI ALTD ADD LParen IY expr RParen End
void Parser::parse_main_action_2554() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode_idx(0xFD86);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD AND A Comma LParen HL Minus RParen End | IOI ALTD AND LParen HL Minus RParen End | IOI AND A1 Comma LParen HL Minus RParen End
void Parser::parse_main_action_2555() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0x7FA6);
	add_opcode(0x2B);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xA6);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD AND A Comma LParen HL Plus RParen End | IOI ALTD AND LParen HL Plus RParen End | IOI AND A1 Comma LParen HL Plus RParen End
void Parser::parse_main_action_2556() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0x7FA6);
	add_opcode(0x23);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xA6);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD AND A Comma LParen HL RParen End | IOI ALTD AND LParen HL RParen End | IOI AND A1 Comma LParen HL RParen End
void Parser::parse_main_action_2557() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0x7FA6);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xA6);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD AND A Comma LParen IX RParen End | IOI ALTD AND LParen IX RParen End | IOI AND A1 Comma LParen IX RParen End
void Parser::parse_main_action_2558() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xDDA600);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD AND A Comma LParen IX expr RParen End | IOI ALTD AND LParen IX expr RParen End | IOI AND A1 Comma LParen IX expr RParen End
void Parser::parse_main_action_2559() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode_idx(0xDDA6);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD AND A Comma LParen IY RParen End | IOI ALTD AND LParen IY RParen End | IOI AND A1 Comma LParen IY RParen End
void Parser::parse_main_action_2560() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xFDA600);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD AND A Comma LParen IY expr RParen End | IOI ALTD AND LParen IY expr RParen End | IOI AND A1 Comma LParen IY expr RParen End
void Parser::parse_main_action_2561() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode_idx(0xFDA6);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD BIT const_expr Comma LParen HL RParen End
void Parser::parse_main_action_2562() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0xD3);
	add_opcode(0x76);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCB46+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD BIT const_expr Comma LParen IX RParen End
void Parser::parse_main_action_2563() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0xD3);
	add_opcode(0x76);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xDDCB0046+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD BIT const_expr Comma LParen IX expr RParen End
void Parser::parse_main_action_2564() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0xD3);
	add_opcode(0x76);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xDDCB46+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD BIT const_expr Comma LParen IY RParen End
void Parser::parse_main_action_2565() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0xD3);
	add_opcode(0x76);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xFDCB0046+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD BIT const_expr Comma LParen IY expr RParen End
void Parser::parse_main_action_2566() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0xD3);
	add_opcode(0x76);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xFDCB46+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD CMP A Comma LParen HL Minus RParen End | IOI ALTD CMP LParen HL Minus RParen End | IOI ALTD CP A Comma LParen HL Minus RParen End | IOI ALTD CP LParen HL Minus RParen End
void Parser::parse_main_action_2567() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0x7FBE);
	add_opcode(0x2B);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xBE);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD CMP A Comma LParen HL Plus RParen End | IOI ALTD CMP LParen HL Plus RParen End | IOI ALTD CP A Comma LParen HL Plus RParen End | IOI ALTD CP LParen HL Plus RParen End
void Parser::parse_main_action_2568() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0x7FBE);
	add_opcode(0x23);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xBE);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD CMP A Comma LParen HL RParen End | IOI ALTD CMP LParen HL RParen End | IOI ALTD CP A Comma LParen HL RParen End | IOI ALTD CP LParen HL RParen End
void Parser::parse_main_action_2569() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0x7FBE);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xBE);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD CMP A Comma LParen IX RParen End | IOI ALTD CMP LParen IX RParen End | IOI ALTD CP A Comma LParen IX RParen End | IOI ALTD CP LParen IX RParen End
void Parser::parse_main_action_2570() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xDDBE00);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD CMP A Comma LParen IX expr RParen End | IOI ALTD CMP LParen IX expr RParen End | IOI ALTD CP A Comma LParen IX expr RParen End | IOI ALTD CP LParen IX expr RParen End
void Parser::parse_main_action_2571() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode_idx(0xDDBE);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD CMP A Comma LParen IY RParen End | IOI ALTD CMP LParen IY RParen End | IOI ALTD CP A Comma LParen IY RParen End | IOI ALTD CP LParen IY RParen End
void Parser::parse_main_action_2572() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xFDBE00);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD CMP A Comma LParen IY expr RParen End | IOI ALTD CMP LParen IY expr RParen End | IOI ALTD CP A Comma LParen IY expr RParen End | IOI ALTD CP LParen IY expr RParen End
void Parser::parse_main_action_2573() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode_idx(0xFDBE);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD DEC LParen HL Minus RParen End
void Parser::parse_main_action_2574() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0x35);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD DEC LParen HL Plus RParen End
void Parser::parse_main_action_2575() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0x35);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD DEC LParen HL RParen End
void Parser::parse_main_action_2576() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0x35);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD DEC LParen IX RParen End
void Parser::parse_main_action_2577() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xDD3500);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD DEC LParen IX expr RParen End
void Parser::parse_main_action_2578() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode_idx(0xDD35);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD DEC LParen IY RParen End
void Parser::parse_main_action_2579() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xFD3500);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD DEC LParen IY expr RParen End
void Parser::parse_main_action_2580() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode_idx(0xFD35);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD INC LParen HL Minus RParen End
void Parser::parse_main_action_2581() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0x34);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD INC LParen HL Plus RParen End
void Parser::parse_main_action_2582() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0x34);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD INC LParen HL RParen End
void Parser::parse_main_action_2583() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0x34);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD INC LParen IX RParen End
void Parser::parse_main_action_2584() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xDD3400);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD INC LParen IX expr RParen End
void Parser::parse_main_action_2585() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode_idx(0xDD34);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD INC LParen IY RParen End
void Parser::parse_main_action_2586() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xFD3400);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD INC LParen IY expr RParen End
void Parser::parse_main_action_2587() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode_idx(0xFD34);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD A Comma LParen BC Minus RParen End | IOI LD A1 Comma LParen BC Minus RParen End
void Parser::parse_main_action_2588() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0x0A);
	add_opcode(0x0B);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD A Comma LParen BC Plus RParen End | IOI LD A1 Comma LParen BC Plus RParen End
void Parser::parse_main_action_2589() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0x0A);
	add_opcode(0x03);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD A Comma LParen BC RParen End | IOI LD A1 Comma LParen BC RParen End
void Parser::parse_main_action_2590() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0x0A);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD A Comma LParen DE Minus RParen End | IOI LD A1 Comma LParen DE Minus RParen End
void Parser::parse_main_action_2591() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0x1A);
	add_opcode(0x1B);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD A Comma LParen DE Plus RParen End | IOI LD A1 Comma LParen DE Plus RParen End
void Parser::parse_main_action_2592() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0x1A);
	add_opcode(0x13);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD A Comma LParen DE RParen End | IOI LD A1 Comma LParen DE RParen End
void Parser::parse_main_action_2593() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0x1A);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD A Comma LParen HL Minus RParen End | IOI ALTD LD A Comma LParen HLD RParen End | IOI LD A1 Comma LParen HL Minus RParen End | IOI LD A1 Comma LParen HLD RParen End
void Parser::parse_main_action_2594() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0x7E);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD A Comma LParen HL Plus RParen End | IOI ALTD LD A Comma LParen HLI RParen End | IOI LD A1 Comma LParen HL Plus RParen End | IOI LD A1 Comma LParen HLI RParen End
void Parser::parse_main_action_2595() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0x7E);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD A Comma LParen HL RParen End | IOI LD A1 Comma LParen HL RParen End
void Parser::parse_main_action_2596() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0x7E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD A Comma LParen IX Plus A RParen End | IOI LD A1 Comma LParen IX Plus A RParen End
void Parser::parse_main_action_2597() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xDD06);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD A Comma LParen IX RParen End | IOI LD A1 Comma LParen IX RParen End
void Parser::parse_main_action_2598() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xDD7E00);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD A Comma LParen IX expr RParen End | IOI LD A1 Comma LParen IX expr RParen End
void Parser::parse_main_action_2599() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode_idx(0xDD7E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD A Comma LParen IY Plus A RParen End | IOI LD A1 Comma LParen IY Plus A RParen End
void Parser::parse_main_action_2600() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xFD06);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD A Comma LParen IY RParen End | IOI LD A1 Comma LParen IY RParen End
void Parser::parse_main_action_2601() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xFD7E00);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD A Comma LParen IY expr RParen End | IOI LD A1 Comma LParen IY expr RParen End
void Parser::parse_main_action_2602() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode_idx(0xFD7E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD A Comma expr End | IOI LD A1 Comma expr End
void Parser::parse_main_action_2603() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode_nn(0x3A, 0);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD B Comma LParen HL Minus RParen End | IOI ALTD LD B Comma LParen HLD RParen End | IOI LD B1 Comma LParen HL Minus RParen End | IOI LD B1 Comma LParen HLD RParen End
void Parser::parse_main_action_2604() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0x46);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD B Comma LParen HL Plus RParen End | IOI ALTD LD B Comma LParen HLI RParen End | IOI LD B1 Comma LParen HL Plus RParen End | IOI LD B1 Comma LParen HLI RParen End
void Parser::parse_main_action_2605() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0x46);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD B Comma LParen HL RParen End | IOI LD B1 Comma LParen HL RParen End
void Parser::parse_main_action_2606() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0x46);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD B Comma LParen IX RParen End | IOI LD B1 Comma LParen IX RParen End
void Parser::parse_main_action_2607() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xDD4600);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD B Comma LParen IX expr RParen End | IOI LD B1 Comma LParen IX expr RParen End
void Parser::parse_main_action_2608() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode_idx(0xDD46);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD B Comma LParen IY RParen End | IOI LD B1 Comma LParen IY RParen End
void Parser::parse_main_action_2609() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xFD4600);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD B Comma LParen IY expr RParen End | IOI LD B1 Comma LParen IY expr RParen End
void Parser::parse_main_action_2610() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode_idx(0xFD46);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD BC Comma expr End | IOI LD BC1 Comma expr End
void Parser::parse_main_action_2611() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode_nn(0xED4B, 0);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD BCDE Comma LParen HL RParen End | IOI LD BCDE1 Comma LParen HL RParen End
void Parser::parse_main_action_2612() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xDD1A);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD BCDE Comma LParen IX RParen End | IOI LD BCDE1 Comma LParen IX RParen End
void Parser::parse_main_action_2613() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xDDCE00);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD BCDE Comma LParen IX expr RParen End | IOI LD BCDE1 Comma LParen IX expr RParen End
void Parser::parse_main_action_2614() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode_idx(0xDDCE);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD BCDE Comma LParen IY RParen End | IOI LD BCDE1 Comma LParen IY RParen End
void Parser::parse_main_action_2615() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xDDDE00);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD BCDE Comma LParen IY expr RParen End | IOI LD BCDE1 Comma LParen IY expr RParen End
void Parser::parse_main_action_2616() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode_idx(0xDDDE);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD BCDE Comma expr End | IOI LD BCDE1 Comma expr End
void Parser::parse_main_action_2617() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode_nn(0x93, 0);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD C Comma LParen HL Minus RParen End | IOI ALTD LD C Comma LParen HLD RParen End | IOI LD C1 Comma LParen HL Minus RParen End | IOI LD C1 Comma LParen HLD RParen End
void Parser::parse_main_action_2618() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0x4E);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD C Comma LParen HL Plus RParen End | IOI ALTD LD C Comma LParen HLI RParen End | IOI LD C1 Comma LParen HL Plus RParen End | IOI LD C1 Comma LParen HLI RParen End
void Parser::parse_main_action_2619() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0x4E);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD C Comma LParen HL RParen End | IOI LD C1 Comma LParen HL RParen End
void Parser::parse_main_action_2620() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0x4E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD C Comma LParen IX RParen End | IOI LD C1 Comma LParen IX RParen End
void Parser::parse_main_action_2621() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xDD4E00);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD C Comma LParen IX expr RParen End | IOI LD C1 Comma LParen IX expr RParen End
void Parser::parse_main_action_2622() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode_idx(0xDD4E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD C Comma LParen IY RParen End | IOI LD C1 Comma LParen IY RParen End
void Parser::parse_main_action_2623() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xFD4E00);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD C Comma LParen IY expr RParen End | IOI LD C1 Comma LParen IY expr RParen End
void Parser::parse_main_action_2624() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode_idx(0xFD4E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD D Comma LParen HL Minus RParen End | IOI ALTD LD D Comma LParen HLD RParen End | IOI LD D1 Comma LParen HL Minus RParen End | IOI LD D1 Comma LParen HLD RParen End
void Parser::parse_main_action_2625() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0x56);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD D Comma LParen HL Plus RParen End | IOI ALTD LD D Comma LParen HLI RParen End | IOI LD D1 Comma LParen HL Plus RParen End | IOI LD D1 Comma LParen HLI RParen End
void Parser::parse_main_action_2626() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0x56);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD D Comma LParen HL RParen End | IOI LD D1 Comma LParen HL RParen End
void Parser::parse_main_action_2627() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0x56);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD D Comma LParen IX RParen End | IOI LD D1 Comma LParen IX RParen End
void Parser::parse_main_action_2628() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xDD5600);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD D Comma LParen IX expr RParen End | IOI LD D1 Comma LParen IX expr RParen End
void Parser::parse_main_action_2629() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode_idx(0xDD56);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD D Comma LParen IY RParen End | IOI LD D1 Comma LParen IY RParen End
void Parser::parse_main_action_2630() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xFD5600);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD D Comma LParen IY expr RParen End | IOI LD D1 Comma LParen IY expr RParen End
void Parser::parse_main_action_2631() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode_idx(0xFD56);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD DE Comma expr End | IOI LD DE1 Comma expr End
void Parser::parse_main_action_2632() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode_nn(0xED5B, 0);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD E Comma LParen HL Minus RParen End | IOI ALTD LD E Comma LParen HLD RParen End | IOI LD E1 Comma LParen HL Minus RParen End | IOI LD E1 Comma LParen HLD RParen End
void Parser::parse_main_action_2633() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0x5E);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD E Comma LParen HL Plus RParen End | IOI ALTD LD E Comma LParen HLI RParen End | IOI LD E1 Comma LParen HL Plus RParen End | IOI LD E1 Comma LParen HLI RParen End
void Parser::parse_main_action_2634() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0x5E);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD E Comma LParen HL RParen End | IOI LD E1 Comma LParen HL RParen End
void Parser::parse_main_action_2635() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0x5E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD E Comma LParen IX RParen End | IOI LD E1 Comma LParen IX RParen End
void Parser::parse_main_action_2636() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xDD5E00);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD E Comma LParen IX expr RParen End | IOI LD E1 Comma LParen IX expr RParen End
void Parser::parse_main_action_2637() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode_idx(0xDD5E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD E Comma LParen IY RParen End | IOI LD E1 Comma LParen IY RParen End
void Parser::parse_main_action_2638() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xFD5E00);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD E Comma LParen IY expr RParen End | IOI LD E1 Comma LParen IY expr RParen End
void Parser::parse_main_action_2639() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode_idx(0xFD5E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD H Comma LParen HL Minus RParen End | IOI ALTD LD H Comma LParen HLD RParen End | IOI LD H1 Comma LParen HL Minus RParen End | IOI LD H1 Comma LParen HLD RParen End
void Parser::parse_main_action_2640() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0x66);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD H Comma LParen HL Plus RParen End | IOI ALTD LD H Comma LParen HLI RParen End | IOI LD H1 Comma LParen HL Plus RParen End | IOI LD H1 Comma LParen HLI RParen End
void Parser::parse_main_action_2641() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0x66);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD H Comma LParen HL RParen End | IOI LD H1 Comma LParen HL RParen End
void Parser::parse_main_action_2642() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0x66);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD H Comma LParen IX RParen End | IOI LD H1 Comma LParen IX RParen End
void Parser::parse_main_action_2643() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xDD6600);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD H Comma LParen IX expr RParen End | IOI LD H1 Comma LParen IX expr RParen End
void Parser::parse_main_action_2644() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode_idx(0xDD66);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD H Comma LParen IY RParen End | IOI LD H1 Comma LParen IY RParen End
void Parser::parse_main_action_2645() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xFD6600);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD H Comma LParen IY expr RParen End | IOI LD H1 Comma LParen IY expr RParen End
void Parser::parse_main_action_2646() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode_idx(0xFD66);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD HL Comma LParen HL RParen End | IOI LD HL1 Comma LParen HL RParen End
void Parser::parse_main_action_2647() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xDDE400);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD HL Comma LParen HL expr RParen End | IOI LD HL1 Comma LParen HL expr RParen End
void Parser::parse_main_action_2648() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode_idx(0xDDE4);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD HL Comma LParen IX RParen End | IOI LD HL1 Comma LParen IX RParen End
void Parser::parse_main_action_2649() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xE400);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD HL Comma LParen IX expr RParen End | IOI LD HL1 Comma LParen IX expr RParen End
void Parser::parse_main_action_2650() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode_idx(0xE4);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD HL Comma LParen IY RParen End | IOI LD HL1 Comma LParen IY RParen End
void Parser::parse_main_action_2651() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xFDE400);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD HL Comma LParen IY expr RParen End | IOI LD HL1 Comma LParen IY expr RParen End
void Parser::parse_main_action_2652() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode_idx(0xFDE4);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD HL Comma expr End | IOI LD HL1 Comma expr End
void Parser::parse_main_action_2653() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode_nn(0x2A, 0);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD JK Comma expr End | IOI LD JK1 Comma expr End
void Parser::parse_main_action_2654() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode_nn(0x99, 0);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD JKHL Comma LParen HL RParen End | IOI LD JKHL1 Comma LParen HL RParen End
void Parser::parse_main_action_2655() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xFD1A);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD JKHL Comma LParen IX RParen End | IOI LD JKHL1 Comma LParen IX RParen End
void Parser::parse_main_action_2656() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xFDCE00);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD JKHL Comma LParen IX expr RParen End | IOI LD JKHL1 Comma LParen IX expr RParen End
void Parser::parse_main_action_2657() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode_idx(0xFDCE);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD JKHL Comma LParen IY RParen End | IOI LD JKHL1 Comma LParen IY RParen End
void Parser::parse_main_action_2658() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xFDDE00);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD JKHL Comma LParen IY expr RParen End | IOI LD JKHL1 Comma LParen IY expr RParen End
void Parser::parse_main_action_2659() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode_idx(0xFDDE);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD JKHL Comma expr End | IOI LD JKHL1 Comma expr End
void Parser::parse_main_action_2660() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode_nn(0x94, 0);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD L Comma LParen HL Minus RParen End | IOI ALTD LD L Comma LParen HLD RParen End | IOI LD L1 Comma LParen HL Minus RParen End | IOI LD L1 Comma LParen HLD RParen End
void Parser::parse_main_action_2661() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0x6E);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD L Comma LParen HL Plus RParen End | IOI ALTD LD L Comma LParen HLI RParen End | IOI LD L1 Comma LParen HL Plus RParen End | IOI LD L1 Comma LParen HLI RParen End
void Parser::parse_main_action_2662() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0x6E);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD L Comma LParen HL RParen End | IOI LD L1 Comma LParen HL RParen End
void Parser::parse_main_action_2663() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0x6E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD L Comma LParen IX RParen End | IOI LD L1 Comma LParen IX RParen End
void Parser::parse_main_action_2664() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xDD6E00);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD L Comma LParen IX expr RParen End | IOI LD L1 Comma LParen IX expr RParen End
void Parser::parse_main_action_2665() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode_idx(0xDD6E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD L Comma LParen IY RParen End | IOI LD L1 Comma LParen IY RParen End
void Parser::parse_main_action_2666() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xFD6E00);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD LD L Comma LParen IY expr RParen End | IOI LD L1 Comma LParen IY expr RParen End
void Parser::parse_main_action_2667() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode_idx(0xFD6E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD OR A Comma LParen HL Minus RParen End | IOI ALTD OR LParen HL Minus RParen End | IOI OR A1 Comma LParen HL Minus RParen End
void Parser::parse_main_action_2668() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0x7FB6);
	add_opcode(0x2B);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xB6);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD OR A Comma LParen HL Plus RParen End | IOI ALTD OR LParen HL Plus RParen End | IOI OR A1 Comma LParen HL Plus RParen End
void Parser::parse_main_action_2669() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0x7FB6);
	add_opcode(0x23);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xB6);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD OR A Comma LParen HL RParen End | IOI ALTD OR LParen HL RParen End | IOI OR A1 Comma LParen HL RParen End
void Parser::parse_main_action_2670() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0x7FB6);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xB6);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD OR A Comma LParen IX RParen End | IOI ALTD OR LParen IX RParen End | IOI OR A1 Comma LParen IX RParen End
void Parser::parse_main_action_2671() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xDDB600);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD OR A Comma LParen IX expr RParen End | IOI ALTD OR LParen IX expr RParen End | IOI OR A1 Comma LParen IX expr RParen End
void Parser::parse_main_action_2672() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode_idx(0xDDB6);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD OR A Comma LParen IY RParen End | IOI ALTD OR LParen IY RParen End | IOI OR A1 Comma LParen IY RParen End
void Parser::parse_main_action_2673() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xFDB600);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD OR A Comma LParen IY expr RParen End | IOI ALTD OR LParen IY expr RParen End | IOI OR A1 Comma LParen IY expr RParen End
void Parser::parse_main_action_2674() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode_idx(0xFDB6);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD RL LParen HL RParen End
void Parser::parse_main_action_2675() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xCB16);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD RL LParen IX RParen End
void Parser::parse_main_action_2676() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xDDCB0016);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD RL LParen IX expr RParen End
void Parser::parse_main_action_2677() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode_idx(0xDDCB16);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD RL LParen IY RParen End
void Parser::parse_main_action_2678() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xFDCB0016);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD RL LParen IY expr RParen End
void Parser::parse_main_action_2679() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode_idx(0xFDCB16);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD RLC LParen HL RParen End
void Parser::parse_main_action_2680() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xCB06);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD RLC LParen IX RParen End
void Parser::parse_main_action_2681() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xDDCB0006);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD RLC LParen IX expr RParen End
void Parser::parse_main_action_2682() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode_idx(0xDDCB06);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD RLC LParen IY RParen End
void Parser::parse_main_action_2683() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xFDCB0006);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD RLC LParen IY expr RParen End
void Parser::parse_main_action_2684() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode_idx(0xFDCB06);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD RR LParen HL RParen End
void Parser::parse_main_action_2685() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xCB1E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD RR LParen IX RParen End
void Parser::parse_main_action_2686() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xDDCB001E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD RR LParen IX expr RParen End
void Parser::parse_main_action_2687() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode_idx(0xDDCB1E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD RR LParen IY RParen End
void Parser::parse_main_action_2688() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xFDCB001E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD RR LParen IY expr RParen End
void Parser::parse_main_action_2689() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode_idx(0xFDCB1E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD RRC LParen HL RParen End
void Parser::parse_main_action_2690() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xCB0E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD RRC LParen IX RParen End
void Parser::parse_main_action_2691() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xDDCB000E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD RRC LParen IX expr RParen End
void Parser::parse_main_action_2692() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode_idx(0xDDCB0E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD RRC LParen IY RParen End
void Parser::parse_main_action_2693() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xFDCB000E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD RRC LParen IY expr RParen End
void Parser::parse_main_action_2694() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode_idx(0xFDCB0E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD SBC A Comma LParen HL Minus RParen End | IOI ALTD SBC LParen HL Minus RParen End | IOI SBC A1 Comma LParen HL Minus RParen End
void Parser::parse_main_action_2695() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0x7F9E);
	add_opcode(0x2B);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0x9E);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD SBC A Comma LParen HL Plus RParen End | IOI ALTD SBC LParen HL Plus RParen End | IOI SBC A1 Comma LParen HL Plus RParen End
void Parser::parse_main_action_2696() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0x7F9E);
	add_opcode(0x23);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0x9E);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD SBC A Comma LParen HL RParen End | IOI ALTD SBC LParen HL RParen End | IOI SBC A1 Comma LParen HL RParen End
void Parser::parse_main_action_2697() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0x7F9E);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0x9E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD SBC A Comma LParen IX RParen End | IOI ALTD SBC LParen IX RParen End | IOI SBC A1 Comma LParen IX RParen End
void Parser::parse_main_action_2698() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xDD9E00);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD SBC A Comma LParen IX expr RParen End | IOI ALTD SBC LParen IX expr RParen End | IOI SBC A1 Comma LParen IX expr RParen End
void Parser::parse_main_action_2699() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode_idx(0xDD9E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD SBC A Comma LParen IY RParen End | IOI ALTD SBC LParen IY RParen End | IOI SBC A1 Comma LParen IY RParen End
void Parser::parse_main_action_2700() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xFD9E00);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD SBC A Comma LParen IY expr RParen End | IOI ALTD SBC LParen IY expr RParen End | IOI SBC A1 Comma LParen IY expr RParen End
void Parser::parse_main_action_2701() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode_idx(0xFD9E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD SLA LParen HL RParen End
void Parser::parse_main_action_2702() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xCB26);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD SLA LParen IX RParen End
void Parser::parse_main_action_2703() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xDDCB0026);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD SLA LParen IX expr RParen End
void Parser::parse_main_action_2704() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode_idx(0xDDCB26);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD SLA LParen IY RParen End
void Parser::parse_main_action_2705() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xFDCB0026);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD SLA LParen IY expr RParen End
void Parser::parse_main_action_2706() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode_idx(0xFDCB26);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD SRA LParen HL RParen End
void Parser::parse_main_action_2707() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xCB2E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD SRA LParen IX RParen End
void Parser::parse_main_action_2708() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xDDCB002E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD SRA LParen IX expr RParen End
void Parser::parse_main_action_2709() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode_idx(0xDDCB2E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD SRA LParen IY RParen End
void Parser::parse_main_action_2710() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xFDCB002E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD SRA LParen IY expr RParen End
void Parser::parse_main_action_2711() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode_idx(0xFDCB2E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD SRL LParen HL RParen End
void Parser::parse_main_action_2712() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xCB3E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD SRL LParen IX RParen End
void Parser::parse_main_action_2713() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xDDCB003E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD SRL LParen IX expr RParen End
void Parser::parse_main_action_2714() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode_idx(0xDDCB3E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD SRL LParen IY RParen End
void Parser::parse_main_action_2715() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xFDCB003E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD SRL LParen IY expr RParen End
void Parser::parse_main_action_2716() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode_idx(0xFDCB3E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD SUB A Comma LParen HL Minus RParen End | IOI ALTD SUB LParen HL Minus RParen End | IOI SUB A1 Comma LParen HL Minus RParen End
void Parser::parse_main_action_2717() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0x7F96);
	add_opcode(0x2B);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0x96);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD SUB A Comma LParen HL Plus RParen End | IOI ALTD SUB LParen HL Plus RParen End | IOI SUB A1 Comma LParen HL Plus RParen End
void Parser::parse_main_action_2718() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0x7F96);
	add_opcode(0x23);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0x96);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD SUB A Comma LParen HL RParen End | IOI ALTD SUB LParen HL RParen End | IOI SUB A1 Comma LParen HL RParen End
void Parser::parse_main_action_2719() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0x7F96);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0x96);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD SUB A Comma LParen IX RParen End | IOI ALTD SUB LParen IX RParen End | IOI SUB A1 Comma LParen IX RParen End
void Parser::parse_main_action_2720() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xDD9600);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD SUB A Comma LParen IX expr RParen End | IOI ALTD SUB LParen IX expr RParen End | IOI SUB A1 Comma LParen IX expr RParen End
void Parser::parse_main_action_2721() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode_idx(0xDD96);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD SUB A Comma LParen IY RParen End | IOI ALTD SUB LParen IY RParen End | IOI SUB A1 Comma LParen IY RParen End
void Parser::parse_main_action_2722() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xFD9600);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD SUB A Comma LParen IY expr RParen End | IOI ALTD SUB LParen IY expr RParen End | IOI SUB A1 Comma LParen IY expr RParen End
void Parser::parse_main_action_2723() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode_idx(0xFD96);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD XOR A Comma LParen HL Minus RParen End | IOI ALTD XOR LParen HL Minus RParen End | IOI XOR A1 Comma LParen HL Minus RParen End
void Parser::parse_main_action_2724() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0x7FAE);
	add_opcode(0x2B);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xAE);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD XOR A Comma LParen HL Plus RParen End | IOI ALTD XOR LParen HL Plus RParen End | IOI XOR A1 Comma LParen HL Plus RParen End
void Parser::parse_main_action_2725() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0x7FAE);
	add_opcode(0x23);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xAE);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD XOR A Comma LParen HL RParen End | IOI ALTD XOR LParen HL RParen End | IOI XOR A1 Comma LParen HL RParen End
void Parser::parse_main_action_2726() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0x7FAE);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xAE);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD XOR A Comma LParen IX RParen End | IOI ALTD XOR LParen IX RParen End | IOI XOR A1 Comma LParen IX RParen End
void Parser::parse_main_action_2727() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xDDAE00);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD XOR A Comma LParen IX expr RParen End | IOI ALTD XOR LParen IX expr RParen End | IOI XOR A1 Comma LParen IX expr RParen End
void Parser::parse_main_action_2728() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode_idx(0xDDAE);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD XOR A Comma LParen IY RParen End | IOI ALTD XOR LParen IY RParen End | IOI XOR A1 Comma LParen IY RParen End
void Parser::parse_main_action_2729() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode(0xFDAE00);
	break;
	default:
	error_illegal_ident(); }
}

// IOI ALTD XOR A Comma LParen IY expr RParen End | IOI ALTD XOR LParen IY expr RParen End | IOI XOR A1 Comma LParen IY expr RParen End
void Parser::parse_main_action_2730() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x76);
	add_opcode_idx(0xFDAE);
	break;
	default:
	error_illegal_ident(); }
}

// IOI AND A Comma LParen HL Minus RParen End | IOI AND LParen HL Minus RParen End
void Parser::parse_main_action_2731() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x7FA6);
	add_opcode(0x2B);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xD3);
	add_opcode(0xA6);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOI AND A Comma LParen HL Plus RParen End | IOI AND LParen HL Plus RParen End
void Parser::parse_main_action_2732() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x7FA6);
	add_opcode(0x23);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xD3);
	add_opcode(0xA6);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOI AND A Comma LParen HL RParen End | IOI AND LParen HL RParen End
void Parser::parse_main_action_2733() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x7FA6);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xD3);
	add_opcode(0xA6);
	break;
	default:
	error_illegal_ident(); }
}

// IOI AND A Comma LParen IX RParen End | IOI AND LParen IX RParen End
void Parser::parse_main_action_2734() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xDDA600);
	break;
	default:
	error_illegal_ident(); }
}

// IOI AND A Comma LParen IX expr RParen End | IOI AND LParen IX expr RParen End
void Parser::parse_main_action_2735() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xDDA6);
	break;
	default:
	error_illegal_ident(); }
}

// IOI AND A Comma LParen IY RParen End | IOI AND LParen IY RParen End
void Parser::parse_main_action_2736() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xFDA600);
	break;
	default:
	error_illegal_ident(); }
}

// IOI AND A Comma LParen IY expr RParen End | IOI AND LParen IY expr RParen End
void Parser::parse_main_action_2737() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xFDA6);
	break;
	default:
	error_illegal_ident(); }
}

// IOI BIT const_expr Comma LParen HL RParen End
void Parser::parse_main_action_2738() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0xD3);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCB46+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// IOI BIT const_expr Comma LParen IX RParen End
void Parser::parse_main_action_2739() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0xD3);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xDDCB0046+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// IOI BIT const_expr Comma LParen IX expr RParen End
void Parser::parse_main_action_2740() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0xD3);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xDDCB46+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// IOI BIT const_expr Comma LParen IY RParen End
void Parser::parse_main_action_2741() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0xD3);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xFDCB0046+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// IOI BIT const_expr Comma LParen IY expr RParen End
void Parser::parse_main_action_2742() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0xD3);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xFDCB46+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// IOI CBM expr End
void Parser::parse_main_action_2743() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0xD3);
	add_opcode_n(0xED00);
	break;
	default:
	error_illegal_ident(); }
}

// IOI CLR LParen HL RParen End
void Parser::parse_main_action_2744() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x3600);
	break;
	default:
	error_illegal_ident(); }
}

// IOI CLR LParen IX RParen End
void Parser::parse_main_action_2745() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xDD360000);
	break;
	default:
	error_illegal_ident(); }
}

// IOI CLR LParen IX expr RParen End
void Parser::parse_main_action_2746() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xDD3600);
	break;
	default:
	error_illegal_ident(); }
}

// IOI CLR LParen IY RParen End
void Parser::parse_main_action_2747() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xFD360000);
	break;
	default:
	error_illegal_ident(); }
}

// IOI CLR LParen IY expr RParen End
void Parser::parse_main_action_2748() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xFD3600);
	break;
	default:
	error_illegal_ident(); }
}

// IOI CMP A Comma LParen HL Minus RParen End | IOI CMP LParen HL Minus RParen End | IOI CP A Comma LParen HL Minus RParen End | IOI CP LParen HL Minus RParen End
void Parser::parse_main_action_2749() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x7FBE);
	add_opcode(0x2B);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xD3);
	add_opcode(0xBE);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOI CMP A Comma LParen HL Plus RParen End | IOI CMP LParen HL Plus RParen End | IOI CP A Comma LParen HL Plus RParen End | IOI CP LParen HL Plus RParen End
void Parser::parse_main_action_2750() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x7FBE);
	add_opcode(0x23);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xD3);
	add_opcode(0xBE);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOI CMP A Comma LParen HL RParen End | IOI CMP LParen HL RParen End | IOI CP A Comma LParen HL RParen End | IOI CP LParen HL RParen End
void Parser::parse_main_action_2751() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x7FBE);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xD3);
	add_opcode(0xBE);
	break;
	default:
	error_illegal_ident(); }
}

// IOI CMP A Comma LParen IX RParen End | IOI CMP LParen IX RParen End | IOI CP A Comma LParen IX RParen End | IOI CP LParen IX RParen End
void Parser::parse_main_action_2752() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xDDBE00);
	break;
	default:
	error_illegal_ident(); }
}

// IOI CMP A Comma LParen IX expr RParen End | IOI CMP LParen IX expr RParen End | IOI CP A Comma LParen IX expr RParen End | IOI CP LParen IX expr RParen End
void Parser::parse_main_action_2753() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xDDBE);
	break;
	default:
	error_illegal_ident(); }
}

// IOI CMP A Comma LParen IY RParen End | IOI CMP LParen IY RParen End | IOI CP A Comma LParen IY RParen End | IOI CP LParen IY RParen End
void Parser::parse_main_action_2754() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xFDBE00);
	break;
	default:
	error_illegal_ident(); }
}

// IOI CMP A Comma LParen IY expr RParen End | IOI CMP LParen IY expr RParen End | IOI CP A Comma LParen IY expr RParen End | IOI CP LParen IY expr RParen End
void Parser::parse_main_action_2755() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xFDBE);
	break;
	default:
	error_illegal_ident(); }
}

// IOI DEC LParen HL Minus RParen End
void Parser::parse_main_action_2756() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x35);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOI DEC LParen HL Plus RParen End
void Parser::parse_main_action_2757() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x35);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOI DEC LParen HL RParen End
void Parser::parse_main_action_2758() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x35);
	break;
	default:
	error_illegal_ident(); }
}

// IOI DEC LParen IX RParen End
void Parser::parse_main_action_2759() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xDD3500);
	break;
	default:
	error_illegal_ident(); }
}

// IOI DEC LParen IX expr RParen End
void Parser::parse_main_action_2760() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xDD35);
	break;
	default:
	error_illegal_ident(); }
}

// IOI DEC LParen IY RParen End
void Parser::parse_main_action_2761() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xFD3500);
	break;
	default:
	error_illegal_ident(); }
}

// IOI DEC LParen IY expr RParen End
void Parser::parse_main_action_2762() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xFD35);
	break;
	default:
	error_illegal_ident(); }
}

// IOI INC LParen HL Minus RParen End
void Parser::parse_main_action_2763() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x34);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOI INC LParen HL Plus RParen End
void Parser::parse_main_action_2764() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x34);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOI INC LParen HL RParen End
void Parser::parse_main_action_2765() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x34);
	break;
	default:
	error_illegal_ident(); }
}

// IOI INC LParen IX RParen End
void Parser::parse_main_action_2766() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xDD3400);
	break;
	default:
	error_illegal_ident(); }
}

// IOI INC LParen IX expr RParen End
void Parser::parse_main_action_2767() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xDD34);
	break;
	default:
	error_illegal_ident(); }
}

// IOI INC LParen IY RParen End
void Parser::parse_main_action_2768() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xFD3400);
	break;
	default:
	error_illegal_ident(); }
}

// IOI INC LParen IY expr RParen End
void Parser::parse_main_action_2769() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xFD34);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD A Comma LParen BC Minus RParen End | IOI LDD A Comma LParen BC RParen End
void Parser::parse_main_action_2770() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x0A);
	add_opcode(0x0B);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD A Comma LParen BC Plus RParen End | IOI LDI A Comma LParen BC RParen End
void Parser::parse_main_action_2771() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x0A);
	add_opcode(0x03);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD A Comma LParen BC RParen End
void Parser::parse_main_action_2772() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x0A);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD A Comma LParen DE Minus RParen End | IOI LDD A Comma LParen DE RParen End
void Parser::parse_main_action_2773() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x1A);
	add_opcode(0x1B);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD A Comma LParen DE Plus RParen End | IOI LDI A Comma LParen DE RParen End
void Parser::parse_main_action_2774() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x1A);
	add_opcode(0x13);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD A Comma LParen DE RParen End
void Parser::parse_main_action_2775() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x1A);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD A Comma LParen HL Minus RParen End | IOI LD A Comma LParen HLD RParen End | IOI LDD A Comma LParen HL RParen End
void Parser::parse_main_action_2776() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x7E);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD A Comma LParen HL Plus RParen End | IOI LD A Comma LParen HLI RParen End | IOI LDI A Comma LParen HL RParen End
void Parser::parse_main_action_2777() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x7E);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD A Comma LParen HL RParen End
void Parser::parse_main_action_2778() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x7E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD A Comma LParen IX Plus A RParen End
void Parser::parse_main_action_2779() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xDD06);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD A Comma LParen IX RParen End
void Parser::parse_main_action_2780() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xDD7E00);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD A Comma LParen IX expr RParen End
void Parser::parse_main_action_2781() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xDD7E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD A Comma LParen IY Plus A RParen End
void Parser::parse_main_action_2782() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xFD06);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD A Comma LParen IY RParen End
void Parser::parse_main_action_2783() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xFD7E00);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD A Comma LParen IY expr RParen End
void Parser::parse_main_action_2784() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xFD7E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD A Comma expr End
void Parser::parse_main_action_2785() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0xD3);
	add_opcode_nn(0x3A, 0);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD B Comma LParen HL Minus RParen End | IOI LD B Comma LParen HLD RParen End | IOI LDD B Comma LParen HL RParen End
void Parser::parse_main_action_2786() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x46);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD B Comma LParen HL Plus RParen End | IOI LD B Comma LParen HLI RParen End | IOI LDI B Comma LParen HL RParen End
void Parser::parse_main_action_2787() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x46);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD B Comma LParen HL RParen End
void Parser::parse_main_action_2788() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x46);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD B Comma LParen IX RParen End
void Parser::parse_main_action_2789() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xDD4600);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD B Comma LParen IX expr RParen End
void Parser::parse_main_action_2790() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xDD46);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD B Comma LParen IY RParen End
void Parser::parse_main_action_2791() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xFD4600);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD B Comma LParen IY expr RParen End
void Parser::parse_main_action_2792() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xFD46);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD BC Comma expr End
void Parser::parse_main_action_2793() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0xD3);
	add_opcode_nn(0xED4B, 0);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD BCDE Comma LParen HL RParen End
void Parser::parse_main_action_2794() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xDD1A);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD BCDE Comma LParen IX RParen End
void Parser::parse_main_action_2795() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xDDCE00);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD BCDE Comma LParen IX expr RParen End
void Parser::parse_main_action_2796() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xDDCE);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD BCDE Comma LParen IY RParen End
void Parser::parse_main_action_2797() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xDDDE00);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD BCDE Comma LParen IY expr RParen End
void Parser::parse_main_action_2798() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xDDDE);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD BCDE Comma expr End
void Parser::parse_main_action_2799() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0xD3);
	add_opcode_nn(0x93, 0);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD C Comma LParen HL Minus RParen End | IOI LD C Comma LParen HLD RParen End | IOI LDD C Comma LParen HL RParen End
void Parser::parse_main_action_2800() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x4E);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD C Comma LParen HL Plus RParen End | IOI LD C Comma LParen HLI RParen End | IOI LDI C Comma LParen HL RParen End
void Parser::parse_main_action_2801() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x4E);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD C Comma LParen HL RParen End
void Parser::parse_main_action_2802() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x4E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD C Comma LParen IX RParen End
void Parser::parse_main_action_2803() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xDD4E00);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD C Comma LParen IX expr RParen End
void Parser::parse_main_action_2804() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xDD4E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD C Comma LParen IY RParen End
void Parser::parse_main_action_2805() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xFD4E00);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD C Comma LParen IY expr RParen End
void Parser::parse_main_action_2806() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xFD4E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD D Comma LParen HL Minus RParen End | IOI LD D Comma LParen HLD RParen End | IOI LDD D Comma LParen HL RParen End
void Parser::parse_main_action_2807() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x56);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD D Comma LParen HL Plus RParen End | IOI LD D Comma LParen HLI RParen End | IOI LDI D Comma LParen HL RParen End
void Parser::parse_main_action_2808() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x56);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD D Comma LParen HL RParen End
void Parser::parse_main_action_2809() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x56);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD D Comma LParen IX RParen End
void Parser::parse_main_action_2810() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xDD5600);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD D Comma LParen IX expr RParen End
void Parser::parse_main_action_2811() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xDD56);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD D Comma LParen IY RParen End
void Parser::parse_main_action_2812() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xFD5600);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD D Comma LParen IY expr RParen End
void Parser::parse_main_action_2813() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xFD56);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD DE Comma expr End
void Parser::parse_main_action_2814() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0xD3);
	add_opcode_nn(0xED5B, 0);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD E Comma LParen HL Minus RParen End | IOI LD E Comma LParen HLD RParen End | IOI LDD E Comma LParen HL RParen End
void Parser::parse_main_action_2815() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x5E);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD E Comma LParen HL Plus RParen End | IOI LD E Comma LParen HLI RParen End | IOI LDI E Comma LParen HL RParen End
void Parser::parse_main_action_2816() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x5E);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD E Comma LParen HL RParen End
void Parser::parse_main_action_2817() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x5E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD E Comma LParen IX RParen End
void Parser::parse_main_action_2818() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xDD5E00);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD E Comma LParen IX expr RParen End
void Parser::parse_main_action_2819() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xDD5E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD E Comma LParen IY RParen End
void Parser::parse_main_action_2820() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xFD5E00);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD E Comma LParen IY expr RParen End
void Parser::parse_main_action_2821() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xFD5E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD H Comma LParen HL Minus RParen End | IOI LD H Comma LParen HLD RParen End | IOI LDD H Comma LParen HL RParen End
void Parser::parse_main_action_2822() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x66);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD H Comma LParen HL Plus RParen End | IOI LD H Comma LParen HLI RParen End | IOI LDI H Comma LParen HL RParen End
void Parser::parse_main_action_2823() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x66);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD H Comma LParen HL RParen End
void Parser::parse_main_action_2824() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x66);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD H Comma LParen IX RParen End
void Parser::parse_main_action_2825() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xDD6600);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD H Comma LParen IX expr RParen End
void Parser::parse_main_action_2826() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xDD66);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD H Comma LParen IY RParen End
void Parser::parse_main_action_2827() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xFD6600);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD H Comma LParen IY expr RParen End
void Parser::parse_main_action_2828() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xFD66);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD HL Comma LParen HL RParen End
void Parser::parse_main_action_2829() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xDDE400);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD HL Comma LParen HL expr RParen End
void Parser::parse_main_action_2830() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xDDE4);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD HL Comma LParen IX RParen End
void Parser::parse_main_action_2831() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xE400);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD HL Comma LParen IX expr RParen End
void Parser::parse_main_action_2832() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xE4);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD HL Comma LParen IY RParen End
void Parser::parse_main_action_2833() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xFDE400);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD HL Comma LParen IY expr RParen End
void Parser::parse_main_action_2834() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xFDE4);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD HL Comma expr End
void Parser::parse_main_action_2835() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0xD3);
	add_opcode_nn(0x2A, 0);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD IX Comma expr End
void Parser::parse_main_action_2836() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0xD3);
	add_opcode_nn(0xDD2A, 0);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD IY Comma expr End
void Parser::parse_main_action_2837() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0xD3);
	add_opcode_nn(0xFD2A, 0);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD JK Comma expr End
void Parser::parse_main_action_2838() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0xD3);
	add_opcode_nn(0x99, 0);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD JKHL Comma LParen HL RParen End
void Parser::parse_main_action_2839() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xFD1A);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD JKHL Comma LParen IX RParen End
void Parser::parse_main_action_2840() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xFDCE00);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD JKHL Comma LParen IX expr RParen End
void Parser::parse_main_action_2841() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xFDCE);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD JKHL Comma LParen IY RParen End
void Parser::parse_main_action_2842() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xFDDE00);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD JKHL Comma LParen IY expr RParen End
void Parser::parse_main_action_2843() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xFDDE);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD JKHL Comma expr End
void Parser::parse_main_action_2844() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0xD3);
	add_opcode_nn(0x94, 0);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD L Comma LParen HL Minus RParen End | IOI LD L Comma LParen HLD RParen End | IOI LDD L Comma LParen HL RParen End
void Parser::parse_main_action_2845() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x6E);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD L Comma LParen HL Plus RParen End | IOI LD L Comma LParen HLI RParen End | IOI LDI L Comma LParen HL RParen End
void Parser::parse_main_action_2846() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x6E);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD L Comma LParen HL RParen End
void Parser::parse_main_action_2847() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x6E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD L Comma LParen IX RParen End
void Parser::parse_main_action_2848() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xDD6E00);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD L Comma LParen IX expr RParen End
void Parser::parse_main_action_2849() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xDD6E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD L Comma LParen IY RParen End
void Parser::parse_main_action_2850() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xFD6E00);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD L Comma LParen IY expr RParen End
void Parser::parse_main_action_2851() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xFD6E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD SP Comma expr End
void Parser::parse_main_action_2852() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0xD3);
	add_opcode_nn(0xED7B, 0);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen BC Minus RParen Comma A End | IOI LDD LParen BC RParen Comma A End
void Parser::parse_main_action_2853() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x02);
	add_opcode(0x0B);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen BC Plus RParen Comma A End | IOI LDI LParen BC RParen Comma A End
void Parser::parse_main_action_2854() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x02);
	add_opcode(0x03);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen BC RParen Comma A End
void Parser::parse_main_action_2855() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x02);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen DE Minus RParen Comma A End | IOI LDD LParen DE RParen Comma A End
void Parser::parse_main_action_2856() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x12);
	add_opcode(0x1B);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen DE Plus RParen Comma A End | IOI LDI LParen DE RParen Comma A End
void Parser::parse_main_action_2857() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x12);
	add_opcode(0x13);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen DE RParen Comma A End
void Parser::parse_main_action_2858() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x12);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen HL Minus RParen Comma A End | IOI LD LParen HLD RParen Comma A End | IOI LDD LParen HL RParen Comma A End
void Parser::parse_main_action_2859() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x77);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen HL Minus RParen Comma B End | IOI LD LParen HLD RParen Comma B End | IOI LDD LParen HL RParen Comma B End
void Parser::parse_main_action_2860() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x70);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen HL Minus RParen Comma C End | IOI LD LParen HLD RParen Comma C End | IOI LDD LParen HL RParen Comma C End
void Parser::parse_main_action_2861() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x71);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen HL Minus RParen Comma D End | IOI LD LParen HLD RParen Comma D End | IOI LDD LParen HL RParen Comma D End
void Parser::parse_main_action_2862() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x72);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen HL Minus RParen Comma E End | IOI LD LParen HLD RParen Comma E End | IOI LDD LParen HL RParen Comma E End
void Parser::parse_main_action_2863() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x73);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen HL Minus RParen Comma H End | IOI LD LParen HLD RParen Comma H End | IOI LDD LParen HL RParen Comma H End
void Parser::parse_main_action_2864() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x74);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen HL Minus RParen Comma L End | IOI LD LParen HLD RParen Comma L End | IOI LDD LParen HL RParen Comma L End
void Parser::parse_main_action_2865() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x75);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen HL Minus RParen Comma expr End | IOI LDD LParen HL RParen Comma expr End
void Parser::parse_main_action_2866() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0xD3);
	add_opcode_n(0x36);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen HL Plus RParen Comma A End | IOI LD LParen HLI RParen Comma A End | IOI LDI LParen HL RParen Comma A End
void Parser::parse_main_action_2867() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x77);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen HL Plus RParen Comma B End | IOI LD LParen HLI RParen Comma B End | IOI LDI LParen HL RParen Comma B End
void Parser::parse_main_action_2868() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x70);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen HL Plus RParen Comma C End | IOI LD LParen HLI RParen Comma C End | IOI LDI LParen HL RParen Comma C End
void Parser::parse_main_action_2869() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x71);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen HL Plus RParen Comma D End | IOI LD LParen HLI RParen Comma D End | IOI LDI LParen HL RParen Comma D End
void Parser::parse_main_action_2870() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x72);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen HL Plus RParen Comma E End | IOI LD LParen HLI RParen Comma E End | IOI LDI LParen HL RParen Comma E End
void Parser::parse_main_action_2871() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x73);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen HL Plus RParen Comma H End | IOI LD LParen HLI RParen Comma H End | IOI LDI LParen HL RParen Comma H End
void Parser::parse_main_action_2872() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x74);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen HL Plus RParen Comma L End | IOI LD LParen HLI RParen Comma L End | IOI LDI LParen HL RParen Comma L End
void Parser::parse_main_action_2873() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x75);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen HL Plus RParen Comma expr End | IOI LDI LParen HL RParen Comma expr End
void Parser::parse_main_action_2874() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0xD3);
	add_opcode_n(0x36);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen HL RParen Comma A End
void Parser::parse_main_action_2875() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x77);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen HL RParen Comma B End
void Parser::parse_main_action_2876() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x70);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen HL RParen Comma BCDE End
void Parser::parse_main_action_2877() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xDD1B);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen HL RParen Comma C End
void Parser::parse_main_action_2878() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x71);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen HL RParen Comma D End
void Parser::parse_main_action_2879() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x72);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen HL RParen Comma E End
void Parser::parse_main_action_2880() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x73);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen HL RParen Comma H End
void Parser::parse_main_action_2881() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x74);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen HL RParen Comma HL End
void Parser::parse_main_action_2882() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xDDF400);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen HL RParen Comma JKHL End
void Parser::parse_main_action_2883() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xFD1B);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen HL RParen Comma L End
void Parser::parse_main_action_2884() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x75);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen HL RParen Comma expr End
void Parser::parse_main_action_2885() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0xD3);
	add_opcode_n(0x36);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen HL expr RParen Comma HL End
void Parser::parse_main_action_2886() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xDDF4);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen IX RParen Comma A End
void Parser::parse_main_action_2887() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xDD7700);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen IX RParen Comma B End
void Parser::parse_main_action_2888() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xDD7000);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen IX RParen Comma BCDE End
void Parser::parse_main_action_2889() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xDDCF00);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen IX RParen Comma C End
void Parser::parse_main_action_2890() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xDD7100);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen IX RParen Comma D End
void Parser::parse_main_action_2891() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xDD7200);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen IX RParen Comma E End
void Parser::parse_main_action_2892() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xDD7300);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen IX RParen Comma H End
void Parser::parse_main_action_2893() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xDD7400);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen IX RParen Comma HL End
void Parser::parse_main_action_2894() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xF400);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen IX RParen Comma JKHL End
void Parser::parse_main_action_2895() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xFDCF00);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen IX RParen Comma L End
void Parser::parse_main_action_2896() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xDD7500);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen IX RParen Comma expr End
void Parser::parse_main_action_2897() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0xD3);
	add_opcode_n(0xDD3600);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen IX expr RParen Comma A End
void Parser::parse_main_action_2898() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xDD77);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen IX expr RParen Comma B End
void Parser::parse_main_action_2899() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xDD70);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen IX expr RParen Comma BCDE End
void Parser::parse_main_action_2900() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xDDCF);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen IX expr RParen Comma C End
void Parser::parse_main_action_2901() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xDD71);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen IX expr RParen Comma D End
void Parser::parse_main_action_2902() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xDD72);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen IX expr RParen Comma E End
void Parser::parse_main_action_2903() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xDD73);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen IX expr RParen Comma H End
void Parser::parse_main_action_2904() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xDD74);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen IX expr RParen Comma HL End
void Parser::parse_main_action_2905() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xF4);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen IX expr RParen Comma JKHL End
void Parser::parse_main_action_2906() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xFDCF);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen IX expr RParen Comma L End
void Parser::parse_main_action_2907() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xDD75);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen IX expr RParen Comma expr End
void Parser::parse_main_action_2908() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0xD3);
	add_opcode_idx_n(0xDD36);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen IY RParen Comma A End
void Parser::parse_main_action_2909() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xFD7700);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen IY RParen Comma B End
void Parser::parse_main_action_2910() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xFD7000);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen IY RParen Comma BCDE End
void Parser::parse_main_action_2911() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xDDDF00);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen IY RParen Comma C End
void Parser::parse_main_action_2912() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xFD7100);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen IY RParen Comma D End
void Parser::parse_main_action_2913() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xFD7200);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen IY RParen Comma E End
void Parser::parse_main_action_2914() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xFD7300);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen IY RParen Comma H End
void Parser::parse_main_action_2915() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xFD7400);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen IY RParen Comma HL End
void Parser::parse_main_action_2916() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xFDF400);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen IY RParen Comma JKHL End
void Parser::parse_main_action_2917() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xFDDF00);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen IY RParen Comma L End
void Parser::parse_main_action_2918() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xFD7500);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen IY RParen Comma expr End
void Parser::parse_main_action_2919() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0xD3);
	add_opcode_n(0xFD3600);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen IY expr RParen Comma A End
void Parser::parse_main_action_2920() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xFD77);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen IY expr RParen Comma B End
void Parser::parse_main_action_2921() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xFD70);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen IY expr RParen Comma BCDE End
void Parser::parse_main_action_2922() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xDDDF);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen IY expr RParen Comma C End
void Parser::parse_main_action_2923() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xFD71);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen IY expr RParen Comma D End
void Parser::parse_main_action_2924() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xFD72);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen IY expr RParen Comma E End
void Parser::parse_main_action_2925() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xFD73);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen IY expr RParen Comma H End
void Parser::parse_main_action_2926() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xFD74);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen IY expr RParen Comma HL End
void Parser::parse_main_action_2927() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xFDF4);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen IY expr RParen Comma JKHL End
void Parser::parse_main_action_2928() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xFDDF);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen IY expr RParen Comma L End
void Parser::parse_main_action_2929() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xFD75);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD LParen IY expr RParen Comma expr End
void Parser::parse_main_action_2930() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0xD3);
	add_opcode_idx_n(0xFD36);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD expr Comma A End
void Parser::parse_main_action_2931() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0xD3);
	add_opcode_nn(0x32, 0);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD expr Comma BC End
void Parser::parse_main_action_2932() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0xD3);
	add_opcode_nn(0xED43, 0);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD expr Comma BCDE End
void Parser::parse_main_action_2933() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0xD3);
	add_opcode_nn(0x83, 0);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD expr Comma DE End
void Parser::parse_main_action_2934() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0xD3);
	add_opcode_nn(0xED53, 0);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD expr Comma HL End
void Parser::parse_main_action_2935() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0xD3);
	add_opcode_nn(0x22, 0);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD expr Comma IX End
void Parser::parse_main_action_2936() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0xD3);
	add_opcode_nn(0xDD22, 0);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD expr Comma IY End
void Parser::parse_main_action_2937() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0xD3);
	add_opcode_nn(0xFD22, 0);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD expr Comma JK End
void Parser::parse_main_action_2938() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0xD3);
	add_opcode_nn(0x89, 0);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD expr Comma JKHL End
void Parser::parse_main_action_2939() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0xD3);
	add_opcode_nn(0x84, 0);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LD expr Comma SP End
void Parser::parse_main_action_2940() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0xD3);
	add_opcode_nn(0xED73, 0);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LDD End
void Parser::parse_main_action_2941() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xEDA8);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LDDR End
void Parser::parse_main_action_2942() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xEDB8);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LDDSR End
void Parser::parse_main_action_2943() {
	switch (g_args.cpu()) {
	case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xED98);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LDI End
void Parser::parse_main_action_2944() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xEDA0);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LDIR End
void Parser::parse_main_action_2945() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xEDB0);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LDISR End
void Parser::parse_main_action_2946() {
	switch (g_args.cpu()) {
	case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xED90);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LSDDR End
void Parser::parse_main_action_2947() {
	switch (g_args.cpu()) {
	case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xEDD8);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LSDR End
void Parser::parse_main_action_2948() {
	switch (g_args.cpu()) {
	case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xEDF8);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LSIDR End
void Parser::parse_main_action_2949() {
	switch (g_args.cpu()) {
	case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xEDD0);
	break;
	default:
	error_illegal_ident(); }
}

// IOI LSIR End
void Parser::parse_main_action_2950() {
	switch (g_args.cpu()) {
	case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xEDF0);
	break;
	default:
	error_illegal_ident(); }
}

// IOI OR A Comma LParen HL Minus RParen End | IOI OR LParen HL Minus RParen End
void Parser::parse_main_action_2951() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x7FB6);
	add_opcode(0x2B);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xD3);
	add_opcode(0xB6);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOI OR A Comma LParen HL Plus RParen End | IOI OR LParen HL Plus RParen End
void Parser::parse_main_action_2952() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x7FB6);
	add_opcode(0x23);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xD3);
	add_opcode(0xB6);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOI OR A Comma LParen HL RParen End | IOI OR LParen HL RParen End
void Parser::parse_main_action_2953() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x7FB6);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xD3);
	add_opcode(0xB6);
	break;
	default:
	error_illegal_ident(); }
}

// IOI OR A Comma LParen IX RParen End | IOI OR LParen IX RParen End
void Parser::parse_main_action_2954() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xDDB600);
	break;
	default:
	error_illegal_ident(); }
}

// IOI OR A Comma LParen IX expr RParen End | IOI OR LParen IX expr RParen End
void Parser::parse_main_action_2955() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xDDB6);
	break;
	default:
	error_illegal_ident(); }
}

// IOI OR A Comma LParen IY RParen End | IOI OR LParen IY RParen End
void Parser::parse_main_action_2956() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xFDB600);
	break;
	default:
	error_illegal_ident(); }
}

// IOI OR A Comma LParen IY expr RParen End | IOI OR LParen IY expr RParen End
void Parser::parse_main_action_2957() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xFDB6);
	break;
	default:
	error_illegal_ident(); }
}

// IOI RES const_expr Comma LParen HL RParen End
void Parser::parse_main_action_2958() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0xD3);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCB86+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// IOI RES const_expr Comma LParen IX RParen End
void Parser::parse_main_action_2959() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0xD3);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xDDCB0086+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// IOI RES const_expr Comma LParen IX expr RParen End
void Parser::parse_main_action_2960() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0xD3);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xDDCB86+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// IOI RES const_expr Comma LParen IY RParen End
void Parser::parse_main_action_2961() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0xD3);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xFDCB0086+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// IOI RES const_expr Comma LParen IY expr RParen End
void Parser::parse_main_action_2962() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0xD3);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xFDCB86+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// IOI RL LParen HL RParen End
void Parser::parse_main_action_2963() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xCB16);
	break;
	default:
	error_illegal_ident(); }
}

// IOI RL LParen IX RParen End
void Parser::parse_main_action_2964() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xDDCB0016);
	break;
	default:
	error_illegal_ident(); }
}

// IOI RL LParen IX expr RParen End
void Parser::parse_main_action_2965() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xDDCB16);
	break;
	default:
	error_illegal_ident(); }
}

// IOI RL LParen IY RParen End
void Parser::parse_main_action_2966() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xFDCB0016);
	break;
	default:
	error_illegal_ident(); }
}

// IOI RL LParen IY expr RParen End
void Parser::parse_main_action_2967() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xFDCB16);
	break;
	default:
	error_illegal_ident(); }
}

// IOI RLC LParen HL RParen End
void Parser::parse_main_action_2968() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xCB06);
	break;
	default:
	error_illegal_ident(); }
}

// IOI RLC LParen IX RParen End
void Parser::parse_main_action_2969() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xDDCB0006);
	break;
	default:
	error_illegal_ident(); }
}

// IOI RLC LParen IX expr RParen End
void Parser::parse_main_action_2970() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xDDCB06);
	break;
	default:
	error_illegal_ident(); }
}

// IOI RLC LParen IY RParen End
void Parser::parse_main_action_2971() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xFDCB0006);
	break;
	default:
	error_illegal_ident(); }
}

// IOI RLC LParen IY expr RParen End
void Parser::parse_main_action_2972() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xFDCB06);
	break;
	default:
	error_illegal_ident(); }
}

// IOI RR LParen HL RParen End
void Parser::parse_main_action_2973() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xCB1E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI RR LParen IX RParen End
void Parser::parse_main_action_2974() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xDDCB001E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI RR LParen IX expr RParen End
void Parser::parse_main_action_2975() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xDDCB1E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI RR LParen IY RParen End
void Parser::parse_main_action_2976() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xFDCB001E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI RR LParen IY expr RParen End
void Parser::parse_main_action_2977() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xFDCB1E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI RRC LParen HL RParen End
void Parser::parse_main_action_2978() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xCB0E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI RRC LParen IX RParen End
void Parser::parse_main_action_2979() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xDDCB000E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI RRC LParen IX expr RParen End
void Parser::parse_main_action_2980() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xDDCB0E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI RRC LParen IY RParen End
void Parser::parse_main_action_2981() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xFDCB000E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI RRC LParen IY expr RParen End
void Parser::parse_main_action_2982() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xFDCB0E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI SBC A Comma LParen HL Minus RParen End | IOI SBC LParen HL Minus RParen End
void Parser::parse_main_action_2983() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x7F9E);
	add_opcode(0x2B);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xD3);
	add_opcode(0x9E);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOI SBC A Comma LParen HL Plus RParen End | IOI SBC LParen HL Plus RParen End
void Parser::parse_main_action_2984() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x7F9E);
	add_opcode(0x23);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xD3);
	add_opcode(0x9E);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOI SBC A Comma LParen HL RParen End | IOI SBC LParen HL RParen End
void Parser::parse_main_action_2985() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x7F9E);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xD3);
	add_opcode(0x9E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI SBC A Comma LParen IX RParen End | IOI SBC LParen IX RParen End
void Parser::parse_main_action_2986() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xDD9E00);
	break;
	default:
	error_illegal_ident(); }
}

// IOI SBC A Comma LParen IX expr RParen End | IOI SBC LParen IX expr RParen End
void Parser::parse_main_action_2987() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xDD9E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI SBC A Comma LParen IY RParen End | IOI SBC LParen IY RParen End
void Parser::parse_main_action_2988() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xFD9E00);
	break;
	default:
	error_illegal_ident(); }
}

// IOI SBC A Comma LParen IY expr RParen End | IOI SBC LParen IY expr RParen End
void Parser::parse_main_action_2989() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xFD9E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI SET const_expr Comma LParen HL RParen End
void Parser::parse_main_action_2990() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0xD3);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCBC6+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// IOI SET const_expr Comma LParen IX RParen End
void Parser::parse_main_action_2991() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0xD3);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xDDCB00C6+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// IOI SET const_expr Comma LParen IX expr RParen End
void Parser::parse_main_action_2992() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0xD3);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xDDCBC6+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// IOI SET const_expr Comma LParen IY RParen End
void Parser::parse_main_action_2993() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0xD3);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xFDCB00C6+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// IOI SET const_expr Comma LParen IY expr RParen End
void Parser::parse_main_action_2994() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode(0xD3);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xFDCBC6+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// IOI SLA LParen HL RParen End
void Parser::parse_main_action_2995() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xCB26);
	break;
	default:
	error_illegal_ident(); }
}

// IOI SLA LParen IX RParen End
void Parser::parse_main_action_2996() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xDDCB0026);
	break;
	default:
	error_illegal_ident(); }
}

// IOI SLA LParen IX expr RParen End
void Parser::parse_main_action_2997() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xDDCB26);
	break;
	default:
	error_illegal_ident(); }
}

// IOI SLA LParen IY RParen End
void Parser::parse_main_action_2998() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xFDCB0026);
	break;
	default:
	error_illegal_ident(); }
}

// IOI SLA LParen IY expr RParen End
void Parser::parse_main_action_2999() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xFDCB26);
	break;
	default:
	error_illegal_ident(); }
}

// IOI SRA LParen HL RParen End
void Parser::parse_main_action_3000() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xCB2E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI SRA LParen IX RParen End
void Parser::parse_main_action_3001() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xDDCB002E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI SRA LParen IX expr RParen End
void Parser::parse_main_action_3002() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xDDCB2E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI SRA LParen IY RParen End
void Parser::parse_main_action_3003() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xFDCB002E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI SRA LParen IY expr RParen End
void Parser::parse_main_action_3004() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xFDCB2E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI SRL LParen HL RParen End
void Parser::parse_main_action_3005() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xCB3E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI SRL LParen IX RParen End
void Parser::parse_main_action_3006() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xDDCB003E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI SRL LParen IX expr RParen End
void Parser::parse_main_action_3007() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xDDCB3E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI SRL LParen IY RParen End
void Parser::parse_main_action_3008() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xFDCB003E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI SRL LParen IY expr RParen End
void Parser::parse_main_action_3009() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xFDCB3E);
	break;
	default:
	error_illegal_ident(); }
}

// IOI SUB A Comma LParen HL Minus RParen End | IOI SUB LParen HL Minus RParen End
void Parser::parse_main_action_3010() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x7F96);
	add_opcode(0x2B);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xD3);
	add_opcode(0x96);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOI SUB A Comma LParen HL Plus RParen End | IOI SUB LParen HL Plus RParen End
void Parser::parse_main_action_3011() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x7F96);
	add_opcode(0x23);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xD3);
	add_opcode(0x96);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOI SUB A Comma LParen HL RParen End | IOI SUB LParen HL RParen End
void Parser::parse_main_action_3012() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x7F96);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xD3);
	add_opcode(0x96);
	break;
	default:
	error_illegal_ident(); }
}

// IOI SUB A Comma LParen IX RParen End | IOI SUB LParen IX RParen End
void Parser::parse_main_action_3013() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xDD9600);
	break;
	default:
	error_illegal_ident(); }
}

// IOI SUB A Comma LParen IX expr RParen End | IOI SUB LParen IX expr RParen End
void Parser::parse_main_action_3014() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xDD96);
	break;
	default:
	error_illegal_ident(); }
}

// IOI SUB A Comma LParen IY RParen End | IOI SUB LParen IY RParen End
void Parser::parse_main_action_3015() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xFD9600);
	break;
	default:
	error_illegal_ident(); }
}

// IOI SUB A Comma LParen IY expr RParen End | IOI SUB LParen IY expr RParen End
void Parser::parse_main_action_3016() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xFD96);
	break;
	default:
	error_illegal_ident(); }
}

// IOI XOR A Comma LParen HL Minus RParen End | IOI XOR LParen HL Minus RParen End
void Parser::parse_main_action_3017() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x7FAE);
	add_opcode(0x2B);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xD3);
	add_opcode(0xAE);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// IOI XOR A Comma LParen HL Plus RParen End | IOI XOR LParen HL Plus RParen End
void Parser::parse_main_action_3018() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x7FAE);
	add_opcode(0x23);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xD3);
	add_opcode(0xAE);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// IOI XOR A Comma LParen HL RParen End | IOI XOR LParen HL RParen End
void Parser::parse_main_action_3019() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0x7FAE);
	break;
	case CPU_R2KA: case CPU_R3K: 
	add_opcode(0xD3);
	add_opcode(0xAE);
	break;
	default:
	error_illegal_ident(); }
}

// IOI XOR A Comma LParen IX RParen End | IOI XOR LParen IX RParen End
void Parser::parse_main_action_3020() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xDDAE00);
	break;
	default:
	error_illegal_ident(); }
}

// IOI XOR A Comma LParen IX expr RParen End | IOI XOR LParen IX expr RParen End
void Parser::parse_main_action_3021() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xDDAE);
	break;
	default:
	error_illegal_ident(); }
}

// IOI XOR A Comma LParen IY RParen End | IOI XOR LParen IY RParen End
void Parser::parse_main_action_3022() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode(0xFDAE00);
	break;
	default:
	error_illegal_ident(); }
}

// IOI XOR A Comma LParen IY expr RParen End | IOI XOR LParen IY expr RParen End
void Parser::parse_main_action_3023() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD3);
	add_opcode_idx(0xFDAE);
	break;
	default:
	error_illegal_ident(); }
}

// IPRES End
void Parser::parse_main_action_3024() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xED5D);
	break;
	default:
	error_illegal_ident(); }
}

// IPSET const_expr End
void Parser::parse_main_action_3025() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: break;
	default: error_int_range(const_expr); }
	add_opcode(0xED00+((const_expr==0?0x46:const_expr==1?0x56:const_expr==2?0x4E:0x5E)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// JC expr End | JLTU expr End | J_C expr End | J_LTU expr End
void Parser::parse_main_action_3026() {
	warn_if_expr_in_parens();
	add_opcode_nn(0xDA, 0);
}

// JEQ expr End | JZ expr End | J_EQ expr End | J_Z expr End
void Parser::parse_main_action_3027() {
	warn_if_expr_in_parens();
	add_opcode_nn(0xCA, 0);
}

// JGEU expr End | JNC expr End | J_GEU expr End | J_NC expr End
void Parser::parse_main_action_3028() {
	warn_if_expr_in_parens();
	add_opcode_nn(0xD2, 0);
}

// JGT expr End | JMP GT Comma expr End | JP GT Comma expr End | J_GT expr End
void Parser::parse_main_action_3029() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode_nn(0xA2, 0);
	break;
	default:
	error_illegal_ident(); }
}

// JGTU expr End | J_GTU expr End
void Parser::parse_main_action_3030() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode_nn(0xAA, 0);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	string target1 = Section::autolabel();
	auto target_expr1 = Expr::make_expr(target1);
	m_exprs.push_back(target_expr1);
	add_opcode_nn(0xCA);
	m_exprs.pop_back();
	add_opcode_nn(0xD2);
	add_label(target1);
	}
	break;
	default:
	error_illegal_ident(); }
}

// JK expr End | JMP K Comma expr End | JMP X5 Comma expr End | JP K Comma expr End | JP X5 Comma expr End | JX5 expr End
void Parser::parse_main_action_3031() {
	switch (g_args.cpu()) {
	case CPU_8085: 
	warn_if_expr_in_parens();
	add_opcode_nn(0xFD, 0);
	break;
	default:
	error_illegal_ident(); }
}

// JLEU expr End | J_LEU expr End
void Parser::parse_main_action_3032() {
	warn_if_expr_in_parens();
	add_opcode_nn(0xCA, 0);
	add_opcode_nn(0xDA, 0);
}

// JLO expr End | JMP LO Comma expr End | JP LO Comma expr End | J_LO expr End
void Parser::parse_main_action_3033() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode_nn(0xEA, 0);
	break;
	default:
	error_illegal_ident(); }
}

// JLT expr End | JMP LT Comma expr End | JP LT Comma expr End | J_LT expr End
void Parser::parse_main_action_3034() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode_nn(0xB2, 0);
	break;
	default:
	error_illegal_ident(); }
}

// JLZ expr End | JMP LZ Comma expr End | JP LZ Comma expr End | J_LZ expr End
void Parser::parse_main_action_3035() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode_nn(0xE2, 0);
	break;
	default:
	error_illegal_ident(); }
}

// JM expr End | J_M expr End
void Parser::parse_main_action_3036() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_opcode_nn(0xFA, 0);
	break;
	default:
	error_illegal_ident(); }
}

// JMP C Comma expr End | JMP LTU Comma expr End | JP C Comma expr End | JP LTU Comma expr End
void Parser::parse_main_action_3037() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_opcode_nn(0xDA, 0);
	break;
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode_nnn(0xDA, 0);
	break;
	default:
	error_illegal_ident(); }
}

// JMP EQ Comma expr End | JMP Z Comma expr End | JP EQ Comma expr End | JP Z Comma expr End
void Parser::parse_main_action_3038() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_opcode_nn(0xCA, 0);
	break;
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode_nnn(0xCA, 0);
	break;
	default:
	error_illegal_ident(); }
}

// JMP GEU Comma expr End | JMP NC Comma expr End | JP GEU Comma expr End | JP NC Comma expr End
void Parser::parse_main_action_3039() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_opcode_nn(0xD2, 0);
	break;
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode_nnn(0xD2, 0);
	break;
	default:
	error_illegal_ident(); }
}

// JMP GTU Comma expr End | JP GTU Comma expr End
void Parser::parse_main_action_3040() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode_nn(0xAA, 0);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	string target1 = Section::autolabel();
	auto target_expr1 = Expr::make_expr(target1);
	m_exprs.push_back(target_expr1);
	add_opcode_nn(0xCA);
	m_exprs.pop_back();
	add_opcode_nn(0xD2);
	add_label(target1);
	}
	break;
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	{
	string target1 = Section::autolabel();
	auto target_expr1 = Expr::make_expr(target1);
	m_exprs.push_back(target_expr1);
	add_opcode_nnn(0xCA);
	m_exprs.pop_back();
	add_opcode_nnn(0xD2);
	add_label(target1);
	}
	break;
	default:
	error_illegal_ident(); }
}

// JMP LEU Comma expr End | JP LEU Comma expr End
void Parser::parse_main_action_3041() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_opcode_nn(0xCA, 0);
	add_opcode_nn(0xDA, 0);
	break;
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode_nnn(0xCA, 0);
	add_opcode_nnn(0xDA, 0);
	break;
	default:
	error_illegal_ident(); }
}

// JMP M Comma expr End | JP M Comma expr End
void Parser::parse_main_action_3042() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_opcode_nn(0xFA, 0);
	break;
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode_nnn(0xFA, 0);
	break;
	default:
	error_illegal_ident(); }
}

// JMP NE Comma expr End | JMP NZ Comma expr End | JP NE Comma expr End | JP NZ Comma expr End
void Parser::parse_main_action_3043() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_opcode_nn(0xC2, 0);
	break;
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode_nnn(0xC2, 0);
	break;
	default:
	error_illegal_ident(); }
}

// JMP NK Comma expr End | JMP NX5 Comma expr End | JNK expr End | JNX5 expr End | JP NK Comma expr End | JP NX5 Comma expr End
void Parser::parse_main_action_3044() {
	switch (g_args.cpu()) {
	case CPU_8085: 
	warn_if_expr_in_parens();
	add_opcode_nn(0xDD, 0);
	break;
	default:
	error_illegal_ident(); }
}

// JMP NV Comma expr End | JP NV Comma expr End
void Parser::parse_main_action_3045() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_opcode_nn(0xE2, 0);
	break;
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode_nnn(0xE2, 0);
	break;
	default:
	error_illegal_ident(); }
}

// JMP P Comma expr End | JP P Comma expr End
void Parser::parse_main_action_3046() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_opcode_nn(0xF2, 0);
	break;
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode_nnn(0xF2, 0);
	break;
	default:
	error_illegal_ident(); }
}

// JMP PE Comma expr End | JP PE Comma expr End
void Parser::parse_main_action_3047() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_opcode_nn(0xEA, 0);
	break;
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode_nnn(0xEA, 0);
	break;
	default:
	error_illegal_ident(); }
}

// JMP PO Comma expr End | JP PO Comma expr End
void Parser::parse_main_action_3048() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_opcode_nn(0xE2, 0);
	break;
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode_nnn(0xE2, 0);
	break;
	default:
	error_illegal_ident(); }
}

// JMP V Comma expr End | JP V Comma expr End
void Parser::parse_main_action_3049() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode_nn(0xBA, 0);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_opcode_nn(0xEA, 0);
	break;
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode_nnn(0xEA, 0);
	break;
	default:
	error_illegal_ident(); }
}

// JMP Dot L LParen HL RParen End | JMP Dot LIS LParen HL RParen End | JP Dot L LParen HL RParen End | JP Dot LIS LParen HL RParen End
void Parser::parse_main_action_3050() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xE9);
	break;
	default:
	error_illegal_ident(); }
}

// JMP Dot L LParen IX RParen End | JMP Dot LIS LParen IX RParen End | JP Dot L LParen IX RParen End | JP Dot LIS LParen IX RParen End
void Parser::parse_main_action_3051() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xDDE9);
	break;
	default:
	error_illegal_ident(); }
}

// JMP Dot L LParen IY RParen End | JMP Dot LIS LParen IY RParen End | JP Dot L LParen IY RParen End | JP Dot LIS LParen IY RParen End
void Parser::parse_main_action_3052() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xFDE9);
	break;
	default:
	error_illegal_ident(); }
}

// JMP Dot LIL C Comma expr End | JMP Dot LIL LTU Comma expr End | JP Dot LIL C Comma expr End | JP Dot LIL LTU Comma expr End
void Parser::parse_main_action_3053() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x5B);
	add_opcode_nnn(0xDA, 0);
	break;
	default:
	error_illegal_ident(); }
}

// JMP Dot LIL EQ Comma expr End | JMP Dot LIL Z Comma expr End | JP Dot LIL EQ Comma expr End | JP Dot LIL Z Comma expr End
void Parser::parse_main_action_3054() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x5B);
	add_opcode_nnn(0xCA, 0);
	break;
	default:
	error_illegal_ident(); }
}

// JMP Dot LIL GEU Comma expr End | JMP Dot LIL NC Comma expr End | JP Dot LIL GEU Comma expr End | JP Dot LIL NC Comma expr End
void Parser::parse_main_action_3055() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x5B);
	add_opcode_nnn(0xD2, 0);
	break;
	default:
	error_illegal_ident(); }
}

// JMP Dot LIL GTU Comma expr End | JP Dot LIL GTU Comma expr End
void Parser::parse_main_action_3056() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	{
	string target1 = Section::autolabel();
	auto target_expr1 = Expr::make_expr(target1);
	add_opcode(0x5B);
	m_exprs.push_back(target_expr1);
	add_opcode_nnn(0xCA);
	m_exprs.pop_back();
	add_opcode(0x5B);
	add_opcode_nnn(0xD2);
	add_label(target1);
	}
	break;
	default:
	error_illegal_ident(); }
}

// JMP Dot LIL LEU Comma expr End | JP Dot LIL LEU Comma expr End
void Parser::parse_main_action_3057() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x5B);
	add_opcode_nnn(0xCA, 0);
	add_opcode(0x5B);
	add_opcode_nnn(0xDA, 0);
	break;
	default:
	error_illegal_ident(); }
}

// JMP Dot LIL M Comma expr End | JP Dot LIL M Comma expr End
void Parser::parse_main_action_3058() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x5B);
	add_opcode_nnn(0xFA, 0);
	break;
	default:
	error_illegal_ident(); }
}

// JMP Dot LIL NE Comma expr End | JMP Dot LIL NZ Comma expr End | JP Dot LIL NE Comma expr End | JP Dot LIL NZ Comma expr End
void Parser::parse_main_action_3059() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x5B);
	add_opcode_nnn(0xC2, 0);
	break;
	default:
	error_illegal_ident(); }
}

// JMP Dot LIL NV Comma expr End | JMP Dot LIL PO Comma expr End | JP Dot LIL NV Comma expr End | JP Dot LIL PO Comma expr End
void Parser::parse_main_action_3060() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x5B);
	add_opcode_nnn(0xE2, 0);
	break;
	default:
	error_illegal_ident(); }
}

// JMP Dot LIL P Comma expr End | JP Dot LIL P Comma expr End
void Parser::parse_main_action_3061() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x5B);
	add_opcode_nnn(0xF2, 0);
	break;
	default:
	error_illegal_ident(); }
}

// JMP Dot LIL PE Comma expr End | JMP Dot LIL V Comma expr End | JP Dot LIL PE Comma expr End | JP Dot LIL V Comma expr End
void Parser::parse_main_action_3062() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x5B);
	add_opcode_nnn(0xEA, 0);
	break;
	default:
	error_illegal_ident(); }
}

// JMP Dot LIL expr End | JP Dot LIL expr End
void Parser::parse_main_action_3063() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x5B);
	add_opcode_nnn(0xC3, 0);
	break;
	default:
	error_illegal_ident(); }
}

// JMP Dot S LParen HL RParen End | JMP Dot SIL LParen HL RParen End | JP Dot S LParen HL RParen End | JP Dot SIL LParen HL RParen End
void Parser::parse_main_action_3064() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xE9);
	break;
	default:
	error_illegal_ident(); }
}

// JMP Dot S LParen IX RParen End | JMP Dot SIL LParen IX RParen End | JP Dot S LParen IX RParen End | JP Dot SIL LParen IX RParen End
void Parser::parse_main_action_3065() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xDDE9);
	break;
	default:
	error_illegal_ident(); }
}

// JMP Dot S LParen IY RParen End | JMP Dot SIL LParen IY RParen End | JP Dot S LParen IY RParen End | JP Dot SIL LParen IY RParen End
void Parser::parse_main_action_3066() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xFDE9);
	break;
	default:
	error_illegal_ident(); }
}

// JMP Dot SIS C Comma expr End | JMP Dot SIS LTU Comma expr End | JP Dot SIS C Comma expr End | JP Dot SIS LTU Comma expr End
void Parser::parse_main_action_3067() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x40);
	add_opcode_nn(0xDA, 0);
	break;
	default:
	error_illegal_ident(); }
}

// JMP Dot SIS EQ Comma expr End | JMP Dot SIS Z Comma expr End | JP Dot SIS EQ Comma expr End | JP Dot SIS Z Comma expr End
void Parser::parse_main_action_3068() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x40);
	add_opcode_nn(0xCA, 0);
	break;
	default:
	error_illegal_ident(); }
}

// JMP Dot SIS GEU Comma expr End | JMP Dot SIS NC Comma expr End | JP Dot SIS GEU Comma expr End | JP Dot SIS NC Comma expr End
void Parser::parse_main_action_3069() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x40);
	add_opcode_nn(0xD2, 0);
	break;
	default:
	error_illegal_ident(); }
}

// JMP Dot SIS GTU Comma expr End | JP Dot SIS GTU Comma expr End
void Parser::parse_main_action_3070() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	{
	string target1 = Section::autolabel();
	auto target_expr1 = Expr::make_expr(target1);
	add_opcode(0x40);
	m_exprs.push_back(target_expr1);
	add_opcode_nn(0xCA);
	m_exprs.pop_back();
	add_opcode(0x40);
	add_opcode_nn(0xD2);
	add_label(target1);
	}
	break;
	default:
	error_illegal_ident(); }
}

// JMP Dot SIS LEU Comma expr End | JP Dot SIS LEU Comma expr End
void Parser::parse_main_action_3071() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x40);
	add_opcode_nn(0xCA, 0);
	add_opcode(0x40);
	add_opcode_nn(0xDA, 0);
	break;
	default:
	error_illegal_ident(); }
}

// JMP Dot SIS M Comma expr End | JP Dot SIS M Comma expr End
void Parser::parse_main_action_3072() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x40);
	add_opcode_nn(0xFA, 0);
	break;
	default:
	error_illegal_ident(); }
}

// JMP Dot SIS NE Comma expr End | JMP Dot SIS NZ Comma expr End | JP Dot SIS NE Comma expr End | JP Dot SIS NZ Comma expr End
void Parser::parse_main_action_3073() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x40);
	add_opcode_nn(0xC2, 0);
	break;
	default:
	error_illegal_ident(); }
}

// JMP Dot SIS NV Comma expr End | JMP Dot SIS PO Comma expr End | JP Dot SIS NV Comma expr End | JP Dot SIS PO Comma expr End
void Parser::parse_main_action_3074() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x40);
	add_opcode_nn(0xE2, 0);
	break;
	default:
	error_illegal_ident(); }
}

// JMP Dot SIS P Comma expr End | JP Dot SIS P Comma expr End
void Parser::parse_main_action_3075() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x40);
	add_opcode_nn(0xF2, 0);
	break;
	default:
	error_illegal_ident(); }
}

// JMP Dot SIS PE Comma expr End | JMP Dot SIS V Comma expr End | JP Dot SIS PE Comma expr End | JP Dot SIS V Comma expr End
void Parser::parse_main_action_3076() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x40);
	add_opcode_nn(0xEA, 0);
	break;
	default:
	error_illegal_ident(); }
}

// JMP Dot SIS expr End | JP Dot SIS expr End
void Parser::parse_main_action_3077() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x40);
	add_opcode_nn(0xC3, 0);
	break;
	default:
	error_illegal_ident(); }
}

// JMP LParen AHL RParen End | JP LParen AHL RParen End
void Parser::parse_main_action_3078() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xE9);
	break;
	default:
	error_illegal_ident(); }
}

// JMP LParen AIX RParen End | JP LParen AIX RParen End
void Parser::parse_main_action_3079() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xDDE9);
	break;
	default:
	error_illegal_ident(); }
}

// JMP LParen AIY RParen End | JP LParen AIY RParen End
void Parser::parse_main_action_3080() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xFDE9);
	break;
	default:
	error_illegal_ident(); }
}

// JMP LParen BC RParen End | JP LParen BC RParen End
void Parser::parse_main_action_3081() {
	add_opcode(0xC5);
	add_opcode(0xC9);
}

// JMP LParen C RParen End | JP LParen C RParen End
void Parser::parse_main_action_3082() {
	switch (g_args.cpu()) {
	case CPU_Z80N: 
	add_opcode(0xED98);
	break;
	default:
	error_illegal_ident(); }
}

// JMP LParen DE RParen End | JP LParen DE RParen End
void Parser::parse_main_action_3083() {
	add_opcode(0xD5);
	add_opcode(0xC9);
}

// JMP LParen HL RParen End | JP LParen HL RParen End | PCHL End
void Parser::parse_main_action_3084() {
	add_opcode(0xE9);
}

// JMP LParen IX RParen End | JP LParen IX RParen End
void Parser::parse_main_action_3085() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xDDE9);
	break;
	default:
	error_illegal_ident(); }
}

// JMP LParen IY RParen End | JP LParen IY RParen End
void Parser::parse_main_action_3086() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xFDE9);
	break;
	default:
	error_illegal_ident(); }
}

// JMP LParen PHL RParen End | JP LParen PHL RParen End
void Parser::parse_main_action_3087() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xE9);
	break;
	default:
	error_illegal_ident(); }
}

// JMP LParen PIX RParen End | JP LParen PIX RParen End
void Parser::parse_main_action_3088() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xDDE9);
	break;
	default:
	error_illegal_ident(); }
}

// JMP LParen PIY RParen End | JP LParen PIY RParen End
void Parser::parse_main_action_3089() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xFDE9);
	break;
	default:
	error_illegal_ident(); }
}

// JMP LParen XHL RParen End | JP LParen XHL RParen End
void Parser::parse_main_action_3090() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xE9);
	break;
	default:
	error_illegal_ident(); }
}

// JMP LParen XIX RParen End | JP LParen XIX RParen End
void Parser::parse_main_action_3091() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xDDE9);
	break;
	default:
	error_illegal_ident(); }
}

// JMP LParen XIY RParen End | JP LParen XIY RParen End
void Parser::parse_main_action_3092() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xFDE9);
	break;
	default:
	error_illegal_ident(); }
}

// JMP LParen YHL RParen End | JP LParen YHL RParen End
void Parser::parse_main_action_3093() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xE9);
	break;
	default:
	error_illegal_ident(); }
}

// JMP LParen YIX RParen End | JP LParen YIX RParen End
void Parser::parse_main_action_3094() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xDDE9);
	break;
	default:
	error_illegal_ident(); }
}

// JMP LParen YIY RParen End | JP LParen YIY RParen End
void Parser::parse_main_action_3095() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xFDE9);
	break;
	default:
	error_illegal_ident(); }
}

// JMP LParen ZHL RParen End | JP LParen ZHL RParen End
void Parser::parse_main_action_3096() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xE9);
	break;
	default:
	error_illegal_ident(); }
}

// JMP LParen ZIX RParen End | JP LParen ZIX RParen End
void Parser::parse_main_action_3097() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xDDE9);
	break;
	default:
	error_illegal_ident(); }
}

// JMP LParen ZIY RParen End | JP LParen ZIY RParen End
void Parser::parse_main_action_3098() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xFDE9);
	break;
	default:
	error_illegal_ident(); }
}

// JMP expr End | JP expr End
void Parser::parse_main_action_3099() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_opcode_nn(0xC3, 0);
	break;
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode_nnn(0xC3, 0);
	break;
	default:
	error_illegal_ident(); }
}

// JNE expr End | JNZ expr End | J_NE expr End | J_NZ expr End
void Parser::parse_main_action_3100() {
	warn_if_expr_in_parens();
	add_opcode_nn(0xC2, 0);
}

// JNV expr End | J_NV expr End
void Parser::parse_main_action_3101() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_opcode_nn(0xE2, 0);
	break;
	default:
	error_illegal_ident(); }
}

// JP3 C Comma expr End | JP3 LTU Comma expr End
void Parser::parse_main_action_3102() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	warn_if_expr_in_parens();
	add_opcode_nnn(0xEDDA, 0);
	break;
	default:
	error_illegal_ident(); }
}

// JP3 EQ Comma expr End | JP3 Z Comma expr End
void Parser::parse_main_action_3103() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	warn_if_expr_in_parens();
	add_opcode_nnn(0xEDCA, 0);
	break;
	default:
	error_illegal_ident(); }
}

// JP3 GEU Comma expr End | JP3 NC Comma expr End
void Parser::parse_main_action_3104() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	warn_if_expr_in_parens();
	add_opcode_nnn(0xEDD2, 0);
	break;
	default:
	error_illegal_ident(); }
}

// JP3 GTU Comma expr End
void Parser::parse_main_action_3105() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	warn_if_expr_in_parens();
	{
	string target1 = Section::autolabel();
	auto target_expr1 = Expr::make_expr(target1);
	m_exprs.push_back(target_expr1);
	add_opcode_nnn(0xEDCA);
	m_exprs.pop_back();
	add_opcode_nnn(0xEDD2);
	add_label(target1);
	}
	break;
	default:
	error_illegal_ident(); }
}

// JP3 LEU Comma expr End
void Parser::parse_main_action_3106() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	warn_if_expr_in_parens();
	add_opcode_nnn(0xEDCA, 0);
	add_opcode_nnn(0xEDDA, 0);
	break;
	default:
	error_illegal_ident(); }
}

// JP3 NE Comma expr End | JP3 NZ Comma expr End
void Parser::parse_main_action_3107() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	warn_if_expr_in_parens();
	add_opcode_nnn(0xEDC2, 0);
	break;
	default:
	error_illegal_ident(); }
}

// JP3 expr End
void Parser::parse_main_action_3108() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	warn_if_expr_in_parens();
	add_opcode_nnn(0xEDC3, 0);
	break;
	default:
	error_illegal_ident(); }
}

// JPE expr End | J_PE expr End
void Parser::parse_main_action_3109() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_opcode_nn(0xEA, 0);
	break;
	default:
	error_illegal_ident(); }
}

// JPO expr End | J_PO expr End
void Parser::parse_main_action_3110() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_opcode_nn(0xE2, 0);
	break;
	default:
	error_illegal_ident(); }
}

// JR C Comma expr End | JR LTU Comma expr End
void Parser::parse_main_action_3111() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_jump_relative(0x38);
	break;
	case CPU_8080: case CPU_8085: 
	warn_if_expr_in_parens();
	add_opcode_nn(0xDA, 0);
	break;
	default:
	error_illegal_ident(); }
}

// JR EQ Comma expr End | JR Z Comma expr End
void Parser::parse_main_action_3112() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_jump_relative(0x28);
	break;
	case CPU_8080: case CPU_8085: 
	warn_if_expr_in_parens();
	add_opcode_nn(0xCA, 0);
	break;
	default:
	error_illegal_ident(); }
}

// JR GEU Comma expr End | JR NC Comma expr End
void Parser::parse_main_action_3113() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_jump_relative(0x30);
	break;
	case CPU_8080: case CPU_8085: 
	warn_if_expr_in_parens();
	add_opcode_nn(0xD2, 0);
	break;
	default:
	error_illegal_ident(); }
}

// JR GT Comma expr End
void Parser::parse_main_action_3114() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_jump_relative(0xA0);
	break;
	default:
	error_illegal_ident(); }
}

// JR GTU Comma expr End
void Parser::parse_main_action_3115() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_jump_relative(0xA8);
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	string target1 = Section::autolabel();
	auto target_expr1 = Expr::make_expr(target1);
	m_exprs.push_back(target_expr1);
	add_jump_relative(0x28);
	m_exprs.pop_back();
	add_jump_relative(0x30);
	add_label(target1);
	}
	break;
	case CPU_8080: case CPU_8085: 
	warn_if_expr_in_parens();
	{
	string target1 = Section::autolabel();
	auto target_expr1 = Expr::make_expr(target1);
	m_exprs.push_back(target_expr1);
	add_opcode_nn(0xCA);
	m_exprs.pop_back();
	add_opcode_nn(0xD2);
	add_label(target1);
	}
	break;
	default:
	error_illegal_ident(); }
}

// JR LEU Comma expr End
void Parser::parse_main_action_3116() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_jump_relative(0x28);
	add_jump_relative(0x38);
	break;
	case CPU_8080: case CPU_8085: 
	warn_if_expr_in_parens();
	add_opcode_nn(0xCA, 0);
	add_opcode_nn(0xDA, 0);
	break;
	default:
	error_illegal_ident(); }
}

// JR LT Comma expr End
void Parser::parse_main_action_3117() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_jump_relative(0xB0);
	break;
	default:
	error_illegal_ident(); }
}

// JR NE Comma expr End | JR NZ Comma expr End
void Parser::parse_main_action_3118() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_jump_relative(0x20);
	break;
	case CPU_8080: case CPU_8085: 
	warn_if_expr_in_parens();
	add_opcode_nn(0xC2, 0);
	break;
	default:
	error_illegal_ident(); }
}

// JR V Comma expr End
void Parser::parse_main_action_3119() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_jump_relative(0xB8);
	break;
	default:
	error_illegal_ident(); }
}

// JR expr End
void Parser::parse_main_action_3120() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_jump_relative(0x18);
	break;
	case CPU_8080: case CPU_8085: 
	warn_if_expr_in_parens();
	add_opcode_nn(0xC3, 0);
	break;
	default:
	error_illegal_ident(); }
}

// JRE C Comma expr End | JRE LTU Comma expr End
void Parser::parse_main_action_3121() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_jump_relative16(0xEDDB);
	break;
	default:
	error_illegal_ident(); }
}

// JRE EQ Comma expr End | JRE Z Comma expr End
void Parser::parse_main_action_3122() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_jump_relative16(0xEDCB);
	break;
	default:
	error_illegal_ident(); }
}

// JRE GEU Comma expr End | JRE NC Comma expr End
void Parser::parse_main_action_3123() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_jump_relative16(0xEDD3);
	break;
	default:
	error_illegal_ident(); }
}

// JRE GT Comma expr End
void Parser::parse_main_action_3124() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_jump_relative16(0xEDA3);
	break;
	default:
	error_illegal_ident(); }
}

// JRE GTU Comma expr End
void Parser::parse_main_action_3125() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_jump_relative16(0xEDAB);
	break;
	default:
	error_illegal_ident(); }
}

// JRE LT Comma expr End
void Parser::parse_main_action_3126() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_jump_relative16(0xEDB3);
	break;
	default:
	error_illegal_ident(); }
}

// JRE NE Comma expr End | JRE NZ Comma expr End
void Parser::parse_main_action_3127() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_jump_relative16(0xEDC3);
	break;
	default:
	error_illegal_ident(); }
}

// JRE V Comma expr End
void Parser::parse_main_action_3128() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_jump_relative16(0xEDBB);
	break;
	default:
	error_illegal_ident(); }
}

// JRE expr End
void Parser::parse_main_action_3129() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_jump_relative16(0x98);
	break;
	default:
	error_illegal_ident(); }
}

// JV expr End | J_V expr End
void Parser::parse_main_action_3130() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode_nn(0xBA, 0);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_opcode_nn(0xEA, 0);
	break;
	default:
	error_illegal_ident(); }
}

// J_P expr End
void Parser::parse_main_action_3131() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_opcode_nn(0xF2, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma A End | MOV A Comma A End
void Parser::parse_main_action_3132() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x7F);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F7F);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma B End | MOV A Comma B End
void Parser::parse_main_action_3133() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x78);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F78);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma C End | MOV A Comma C End
void Parser::parse_main_action_3134() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x79);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F79);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma D End | MOV A Comma D End
void Parser::parse_main_action_3135() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x7A);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F7A);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma E End | MOV A Comma E End
void Parser::parse_main_action_3136() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x7B);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F7B);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma EIR End
void Parser::parse_main_action_3137() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xED57);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma H End | MOV A Comma H End
void Parser::parse_main_action_3138() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x7C);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F7C);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma HTR End
void Parser::parse_main_action_3139() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xED50);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma I End
void Parser::parse_main_action_3140() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xED57);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma IIR End
void Parser::parse_main_action_3141() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xED5F);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma IXH End
void Parser::parse_main_action_3142() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDD7C);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma IXL End
void Parser::parse_main_action_3143() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDD7D);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma IYH End
void Parser::parse_main_action_3144() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFD7C);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma IYL End
void Parser::parse_main_action_3145() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFD7D);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma L End | MOV A Comma L End
void Parser::parse_main_action_3146() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x7D);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F7D);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma MB End
void Parser::parse_main_action_3147() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xED6E);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma R End
void Parser::parse_main_action_3148() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xED5F);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma RES const_expr Comma LParen IX RParen End | RES const_expr Comma LParen IX RParen Comma A End
void Parser::parse_main_action_3149() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xDDCB0087+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma RES const_expr Comma LParen IX expr RParen End | RES const_expr Comma LParen IX expr RParen Comma A End
void Parser::parse_main_action_3150() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xDDCB87+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma RES const_expr Comma LParen IY RParen End | RES const_expr Comma LParen IY RParen Comma A End
void Parser::parse_main_action_3151() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xFDCB0087+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma RES const_expr Comma LParen IY expr RParen End | RES const_expr Comma LParen IY expr RParen Comma A End
void Parser::parse_main_action_3152() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xFDCB87+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma RL LParen IX RParen End | RL LParen IX RParen Comma A End
void Parser::parse_main_action_3153() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDDCB0017);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma RL LParen IX expr RParen End | RL LParen IX expr RParen Comma A End
void Parser::parse_main_action_3154() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xDDCB17);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma RL LParen IY RParen End | RL LParen IY RParen Comma A End
void Parser::parse_main_action_3155() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFDCB0017);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma RL LParen IY expr RParen End | RL LParen IY expr RParen Comma A End
void Parser::parse_main_action_3156() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xFDCB17);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma RLC LParen IX RParen End | RLC LParen IX RParen Comma A End
void Parser::parse_main_action_3157() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDDCB0007);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma RLC LParen IX expr RParen End | RLC LParen IX expr RParen Comma A End
void Parser::parse_main_action_3158() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xDDCB07);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma RLC LParen IY RParen End | RLC LParen IY RParen Comma A End
void Parser::parse_main_action_3159() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFDCB0007);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma RLC LParen IY expr RParen End | RLC LParen IY expr RParen Comma A End
void Parser::parse_main_action_3160() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xFDCB07);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma RR LParen IX RParen End | RR LParen IX RParen Comma A End
void Parser::parse_main_action_3161() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDDCB001F);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma RR LParen IX expr RParen End | RR LParen IX expr RParen Comma A End
void Parser::parse_main_action_3162() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xDDCB1F);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma RR LParen IY RParen End | RR LParen IY RParen Comma A End
void Parser::parse_main_action_3163() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFDCB001F);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma RR LParen IY expr RParen End | RR LParen IY expr RParen Comma A End
void Parser::parse_main_action_3164() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xFDCB1F);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma RRC LParen IX RParen End | RRC LParen IX RParen Comma A End
void Parser::parse_main_action_3165() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDDCB000F);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma RRC LParen IX expr RParen End | RRC LParen IX expr RParen Comma A End
void Parser::parse_main_action_3166() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xDDCB0F);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma RRC LParen IY RParen End | RRC LParen IY RParen Comma A End
void Parser::parse_main_action_3167() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFDCB000F);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma RRC LParen IY expr RParen End | RRC LParen IY expr RParen Comma A End
void Parser::parse_main_action_3168() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xFDCB0F);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma SET const_expr Comma LParen IX RParen End | SET const_expr Comma LParen IX RParen Comma A End
void Parser::parse_main_action_3169() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xDDCB00C7+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma SET const_expr Comma LParen IX expr RParen End | SET const_expr Comma LParen IX expr RParen Comma A End
void Parser::parse_main_action_3170() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xDDCBC7+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma SET const_expr Comma LParen IY RParen End | SET const_expr Comma LParen IY RParen Comma A End
void Parser::parse_main_action_3171() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xFDCB00C7+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma SET const_expr Comma LParen IY expr RParen End | SET const_expr Comma LParen IY expr RParen Comma A End
void Parser::parse_main_action_3172() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xFDCBC7+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma SLA LParen IX RParen End | SLA LParen IX RParen Comma A End
void Parser::parse_main_action_3173() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDDCB0027);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma SLA LParen IX expr RParen End | SLA LParen IX expr RParen Comma A End
void Parser::parse_main_action_3174() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xDDCB27);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma SLA LParen IY RParen End | SLA LParen IY RParen Comma A End
void Parser::parse_main_action_3175() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFDCB0027);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma SLA LParen IY expr RParen End | SLA LParen IY expr RParen Comma A End
void Parser::parse_main_action_3176() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xFDCB27);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma SLI LParen IX RParen End | LD A Comma SLL LParen IX RParen End | LD A Comma SLS LParen IX RParen End | SLI LParen IX RParen Comma A End | SLL LParen IX RParen Comma A End | SLS LParen IX RParen Comma A End
void Parser::parse_main_action_3177() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDDCB0037);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma SLI LParen IX expr RParen End | LD A Comma SLL LParen IX expr RParen End | LD A Comma SLS LParen IX expr RParen End | SLI LParen IX expr RParen Comma A End | SLL LParen IX expr RParen Comma A End | SLS LParen IX expr RParen Comma A End
void Parser::parse_main_action_3178() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xDDCB37);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma SLI LParen IY RParen End | LD A Comma SLL LParen IY RParen End | LD A Comma SLS LParen IY RParen End | SLI LParen IY RParen Comma A End | SLL LParen IY RParen Comma A End | SLS LParen IY RParen Comma A End
void Parser::parse_main_action_3179() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFDCB0037);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma SLI LParen IY expr RParen End | LD A Comma SLL LParen IY expr RParen End | LD A Comma SLS LParen IY expr RParen End | SLI LParen IY expr RParen Comma A End | SLL LParen IY expr RParen Comma A End | SLS LParen IY expr RParen Comma A End
void Parser::parse_main_action_3180() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xFDCB37);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma SRA LParen IX RParen End | SRA LParen IX RParen Comma A End
void Parser::parse_main_action_3181() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDDCB002F);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma SRA LParen IX expr RParen End | SRA LParen IX expr RParen Comma A End
void Parser::parse_main_action_3182() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xDDCB2F);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma SRA LParen IY RParen End | SRA LParen IY RParen Comma A End
void Parser::parse_main_action_3183() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFDCB002F);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma SRA LParen IY expr RParen End | SRA LParen IY expr RParen Comma A End
void Parser::parse_main_action_3184() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xFDCB2F);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma SRL LParen IX RParen End | SRL LParen IX RParen Comma A End
void Parser::parse_main_action_3185() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDDCB003F);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma SRL LParen IX expr RParen End | SRL LParen IX expr RParen Comma A End
void Parser::parse_main_action_3186() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xDDCB3F);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma SRL LParen IY RParen End | SRL LParen IY RParen Comma A End
void Parser::parse_main_action_3187() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFDCB003F);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma SRL LParen IY expr RParen End | SRL LParen IY expr RParen Comma A End
void Parser::parse_main_action_3188() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xFDCB3F);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma XP End
void Parser::parse_main_action_3189() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xEDC5);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma XPC End
void Parser::parse_main_action_3190() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xED77);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma YP End
void Parser::parse_main_action_3191() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xEDCC);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma ZP End
void Parser::parse_main_action_3192() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xEDC4);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma LParen A Colon expr RParen End
void Parser::parse_main_action_3193() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	add_opcode_nn(0x3A, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma LParen ABC RParen End
void Parser::parse_main_action_3194() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0x0A);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma LParen ADE RParen End
void Parser::parse_main_action_3195() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0x1A);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma LParen AHL RParen End
void Parser::parse_main_action_3196() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0x7E);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma LParen AIX RParen End
void Parser::parse_main_action_3197() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xDD7E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma LParen AIX expr RParen End
void Parser::parse_main_action_3198() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xDD7E);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma LParen AIY RParen End
void Parser::parse_main_action_3199() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xFD7E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma LParen AIY expr RParen End
void Parser::parse_main_action_3200() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xFD7E);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma LParen BC Minus RParen End | LDD A Comma LParen BC RParen End
void Parser::parse_main_action_3201() {
	add_opcode(0x0A);
	add_opcode(0x0B);
}

// LD A Comma LParen BC Plus RParen End | LDI A Comma LParen BC RParen End
void Parser::parse_main_action_3202() {
	add_opcode(0x0A);
	add_opcode(0x03);
}

// LD A Comma LParen BC RParen End | LDAX B End | LDAX BC End
void Parser::parse_main_action_3203() {
	add_opcode(0x0A);
}

// LD A Comma LParen C RParen End | LDH A Comma LParen C RParen End
void Parser::parse_main_action_3204() {
	switch (g_args.cpu()) {
	case CPU_GBZ80: 
	add_opcode(0xF2);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma LParen DE Minus RParen End | LDD A Comma LParen DE RParen End
void Parser::parse_main_action_3205() {
	add_opcode(0x1A);
	add_opcode(0x1B);
}

// LD A Comma LParen DE Plus RParen End | LDI A Comma LParen DE RParen End
void Parser::parse_main_action_3206() {
	add_opcode(0x1A);
	add_opcode(0x13);
}

// LD A Comma LParen DE RParen End | LDAX D End | LDAX DE End
void Parser::parse_main_action_3207() {
	add_opcode(0x1A);
}

// LD A Comma LParen HL Minus RParen End | LD A Comma LParen HLD RParen End | LDD A Comma LParen HL RParen End
void Parser::parse_main_action_3208() {
	switch (g_args.cpu()) {
	case CPU_GBZ80: 
	add_opcode(0x3A);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x7E);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma LParen HL Plus RParen End | LD A Comma LParen HLI RParen End | LDI A Comma LParen HL RParen End
void Parser::parse_main_action_3209() {
	switch (g_args.cpu()) {
	case CPU_GBZ80: 
	add_opcode(0x2A);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x7E);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma LParen HL RParen End | MOV A Comma M End
void Parser::parse_main_action_3210() {
	add_opcode(0x7E);
}

// LD A Comma LParen IX Plus A RParen End
void Parser::parse_main_action_3211() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDD06);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma LParen IX RParen End
void Parser::parse_main_action_3212() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xDD7E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma LParen IX expr RParen End
void Parser::parse_main_action_3213() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx(0xDD7E);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma LParen IY Plus A RParen End
void Parser::parse_main_action_3214() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFD06);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma LParen IY RParen End
void Parser::parse_main_action_3215() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xFD7E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma LParen IY expr RParen End
void Parser::parse_main_action_3216() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx(0xFD7E);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma LParen PBC RParen End
void Parser::parse_main_action_3217() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0x0A);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma LParen PDE RParen End
void Parser::parse_main_action_3218() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0x1A);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma LParen PHL RParen End
void Parser::parse_main_action_3219() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0x7E);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma LParen PIX RParen End
void Parser::parse_main_action_3220() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xDD7E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma LParen PIX expr RParen End
void Parser::parse_main_action_3221() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xDD7E);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma LParen PIY RParen End
void Parser::parse_main_action_3222() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xFD7E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma LParen PIY expr RParen End
void Parser::parse_main_action_3223() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xFD7E);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma LParen PP Colon expr RParen End
void Parser::parse_main_action_3224() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x5B);
	add_opcode_nn(0x3A, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma LParen PW Plus HL RParen End
void Parser::parse_main_action_3225() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x8B);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma LParen PW RParen End
void Parser::parse_main_action_3226() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x8D00);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma LParen PW expr RParen End
void Parser::parse_main_action_3227() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x8D);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma LParen PX Plus HL RParen End
void Parser::parse_main_action_3228() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x9B);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma LParen PX RParen End
void Parser::parse_main_action_3229() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x9D00);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma LParen PX expr RParen End
void Parser::parse_main_action_3230() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x9D);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma LParen PY Plus HL RParen End
void Parser::parse_main_action_3231() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xAB);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma LParen PY RParen End
void Parser::parse_main_action_3232() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xAD00);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma LParen PY expr RParen End
void Parser::parse_main_action_3233() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0xAD);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma LParen PZ Plus HL RParen End
void Parser::parse_main_action_3234() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xBB);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma LParen PZ RParen End
void Parser::parse_main_action_3235() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xBD00);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma LParen PZ expr RParen End
void Parser::parse_main_action_3236() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0xBD);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma LParen XBC RParen End
void Parser::parse_main_action_3237() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0x0A);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma LParen XDE RParen End
void Parser::parse_main_action_3238() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0x1A);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma LParen XHL RParen End
void Parser::parse_main_action_3239() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0x7E);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma LParen XIX RParen End
void Parser::parse_main_action_3240() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xDD7E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma LParen XIX expr RParen End
void Parser::parse_main_action_3241() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xDD7E);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma LParen XIY RParen End
void Parser::parse_main_action_3242() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xFD7E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma LParen XIY expr RParen End
void Parser::parse_main_action_3243() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xFD7E);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma LParen XP Colon expr RParen End
void Parser::parse_main_action_3244() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x40);
	add_opcode_nn(0x3A, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma LParen YBC RParen End
void Parser::parse_main_action_3245() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0x0A);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma LParen YDE RParen End
void Parser::parse_main_action_3246() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0x1A);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma LParen YHL RParen End
void Parser::parse_main_action_3247() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0x7E);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma LParen YIX RParen End
void Parser::parse_main_action_3248() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xDD7E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma LParen YIX expr RParen End
void Parser::parse_main_action_3249() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xDD7E);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma LParen YIY RParen End
void Parser::parse_main_action_3250() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xFD7E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma LParen YIY expr RParen End
void Parser::parse_main_action_3251() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xFD7E);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma LParen YP Colon expr RParen End
void Parser::parse_main_action_3252() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	add_opcode_nn(0x3A, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma LParen ZBC RParen End
void Parser::parse_main_action_3253() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0x0A);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma LParen ZDE RParen End
void Parser::parse_main_action_3254() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0x1A);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma LParen ZHL RParen End
void Parser::parse_main_action_3255() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0x7E);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma LParen ZIX RParen End
void Parser::parse_main_action_3256() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xDD7E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma LParen ZIX expr RParen End
void Parser::parse_main_action_3257() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xDD7E);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma LParen ZIY RParen End
void Parser::parse_main_action_3258() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xFD7E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma LParen ZIY expr RParen End
void Parser::parse_main_action_3259() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xFD7E);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma LParen ZP Colon expr RParen End
void Parser::parse_main_action_3260() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x7F);
	add_opcode_nn(0x3A, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD A Comma expr End
void Parser::parse_main_action_3261() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	if (expr_in_parens()) { add_opcode_nn(0x3A, 0); } else { add_opcode_n(0x3E); }
	break;
	case CPU_GBZ80: 
	if (expr_in_parens()) { add_opcode_nn(0xFA, 0); } else { add_opcode_n(0x3E); }
	break;
	case CPU_EZ80: 
	if (expr_in_parens()) { add_opcode_nnn(0x3A, 0); } else { add_opcode_n(0x3E); }
	break;
	default:
	error_illegal_ident(); }
}

// LD AHL Comma LParen AIX RParen End
void Parser::parse_main_action_3262() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xED2900);
	break;
	default:
	error_illegal_ident(); }
}

// LD AHL Comma LParen AIX expr RParen End
void Parser::parse_main_action_3263() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xED29);
	break;
	default:
	error_illegal_ident(); }
}

// LD AHL Comma LParen AIY RParen End
void Parser::parse_main_action_3264() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xED2800);
	break;
	default:
	error_illegal_ident(); }
}

// LD AHL Comma LParen AIY expr RParen End
void Parser::parse_main_action_3265() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xED28);
	break;
	default:
	error_illegal_ident(); }
}

// LD AHL Comma LParen IX RParen End
void Parser::parse_main_action_3266() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xED2900);
	break;
	default:
	error_illegal_ident(); }
}

// LD AHL Comma LParen IX expr RParen End
void Parser::parse_main_action_3267() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode_idx(0xED29);
	break;
	default:
	error_illegal_ident(); }
}

// LD AHL Comma LParen IY RParen End
void Parser::parse_main_action_3268() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xED2800);
	break;
	default:
	error_illegal_ident(); }
}

// LD AHL Comma LParen IY expr RParen End
void Parser::parse_main_action_3269() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode_idx(0xED28);
	break;
	default:
	error_illegal_ident(); }
}

// LD AHL Comma LParen PIX RParen End
void Parser::parse_main_action_3270() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xED2900);
	break;
	default:
	error_illegal_ident(); }
}

// LD AHL Comma LParen PIX expr RParen End
void Parser::parse_main_action_3271() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xED29);
	break;
	default:
	error_illegal_ident(); }
}

// LD AHL Comma LParen PIY RParen End
void Parser::parse_main_action_3272() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xED2800);
	break;
	default:
	error_illegal_ident(); }
}

// LD AHL Comma LParen PIY expr RParen End
void Parser::parse_main_action_3273() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xED28);
	break;
	default:
	error_illegal_ident(); }
}

// LD AHL Comma LParen SP RParen End
void Parser::parse_main_action_3274() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xED2A00);
	break;
	default:
	error_illegal_ident(); }
}

// LD AHL Comma LParen SP expr RParen End
void Parser::parse_main_action_3275() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode_idx(0xED2A);
	break;
	default:
	error_illegal_ident(); }
}

// LD AHL Comma LParen XIX RParen End
void Parser::parse_main_action_3276() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xED2900);
	break;
	default:
	error_illegal_ident(); }
}

// LD AHL Comma LParen XIX expr RParen End
void Parser::parse_main_action_3277() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xED29);
	break;
	default:
	error_illegal_ident(); }
}

// LD AHL Comma LParen XIY RParen End
void Parser::parse_main_action_3278() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xED2800);
	break;
	default:
	error_illegal_ident(); }
}

// LD AHL Comma LParen XIY expr RParen End
void Parser::parse_main_action_3279() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xED28);
	break;
	default:
	error_illegal_ident(); }
}

// LD AHL Comma LParen YIX RParen End
void Parser::parse_main_action_3280() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xED2900);
	break;
	default:
	error_illegal_ident(); }
}

// LD AHL Comma LParen YIX expr RParen End
void Parser::parse_main_action_3281() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xED29);
	break;
	default:
	error_illegal_ident(); }
}

// LD AHL Comma LParen YIY RParen End
void Parser::parse_main_action_3282() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xED2800);
	break;
	default:
	error_illegal_ident(); }
}

// LD AHL Comma LParen YIY expr RParen End
void Parser::parse_main_action_3283() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xED28);
	break;
	default:
	error_illegal_ident(); }
}

// LD AHL Comma LParen ZIX RParen End
void Parser::parse_main_action_3284() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xED2900);
	break;
	default:
	error_illegal_ident(); }
}

// LD AHL Comma LParen ZIX expr RParen End
void Parser::parse_main_action_3285() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xED29);
	break;
	default:
	error_illegal_ident(); }
}

// LD AHL Comma LParen ZIY RParen End
void Parser::parse_main_action_3286() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xED2800);
	break;
	default:
	error_illegal_ident(); }
}

// LD AHL Comma LParen ZIY expr RParen End
void Parser::parse_main_action_3287() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xED28);
	break;
	default:
	error_illegal_ident(); }
}

// LD AHL Comma expr End
void Parser::parse_main_action_3288() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	warn_if_expr_in_parens();
	add_opcode_nnn(0xED2E, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma A End | MOV B Comma A End
void Parser::parse_main_action_3289() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x47);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F47);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma B End | MOV B Comma B End
void Parser::parse_main_action_3290() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_GBZ80: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x40);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F40);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma C End | MOV B Comma C End
void Parser::parse_main_action_3291() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x41);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F41);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma D End | MOV B Comma D End
void Parser::parse_main_action_3292() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x42);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F42);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma E End | MOV B Comma E End
void Parser::parse_main_action_3293() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x43);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F43);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma H End | MOV B Comma H End
void Parser::parse_main_action_3294() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x44);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F44);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma IXH End
void Parser::parse_main_action_3295() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDD44);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma IXL End
void Parser::parse_main_action_3296() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDD45);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma IYH End
void Parser::parse_main_action_3297() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFD44);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma IYL End
void Parser::parse_main_action_3298() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFD45);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma L End | MOV B Comma L End
void Parser::parse_main_action_3299() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x45);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F45);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma RES const_expr Comma LParen IX RParen End | RES const_expr Comma LParen IX RParen Comma B End
void Parser::parse_main_action_3300() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xDDCB0080+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma RES const_expr Comma LParen IX expr RParen End | RES const_expr Comma LParen IX expr RParen Comma B End
void Parser::parse_main_action_3301() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xDDCB80+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma RES const_expr Comma LParen IY RParen End | RES const_expr Comma LParen IY RParen Comma B End
void Parser::parse_main_action_3302() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xFDCB0080+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma RES const_expr Comma LParen IY expr RParen End | RES const_expr Comma LParen IY expr RParen Comma B End
void Parser::parse_main_action_3303() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xFDCB80+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma RL LParen IX RParen End | RL LParen IX RParen Comma B End
void Parser::parse_main_action_3304() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDDCB0010);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma RL LParen IX expr RParen End | RL LParen IX expr RParen Comma B End
void Parser::parse_main_action_3305() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xDDCB10);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma RL LParen IY RParen End | RL LParen IY RParen Comma B End
void Parser::parse_main_action_3306() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFDCB0010);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma RL LParen IY expr RParen End | RL LParen IY expr RParen Comma B End
void Parser::parse_main_action_3307() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xFDCB10);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma RLC LParen IX RParen End | RLC LParen IX RParen Comma B End
void Parser::parse_main_action_3308() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDDCB0000);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma RLC LParen IX expr RParen End | RLC LParen IX expr RParen Comma B End
void Parser::parse_main_action_3309() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xDDCB00);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma RLC LParen IY RParen End | RLC LParen IY RParen Comma B End
void Parser::parse_main_action_3310() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFDCB0000);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma RLC LParen IY expr RParen End | RLC LParen IY expr RParen Comma B End
void Parser::parse_main_action_3311() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xFDCB00);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma RR LParen IX RParen End | RR LParen IX RParen Comma B End
void Parser::parse_main_action_3312() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDDCB0018);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma RR LParen IX expr RParen End | RR LParen IX expr RParen Comma B End
void Parser::parse_main_action_3313() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xDDCB18);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma RR LParen IY RParen End | RR LParen IY RParen Comma B End
void Parser::parse_main_action_3314() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFDCB0018);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma RR LParen IY expr RParen End | RR LParen IY expr RParen Comma B End
void Parser::parse_main_action_3315() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xFDCB18);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma RRC LParen IX RParen End | RRC LParen IX RParen Comma B End
void Parser::parse_main_action_3316() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDDCB0008);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma RRC LParen IX expr RParen End | RRC LParen IX expr RParen Comma B End
void Parser::parse_main_action_3317() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xDDCB08);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma RRC LParen IY RParen End | RRC LParen IY RParen Comma B End
void Parser::parse_main_action_3318() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFDCB0008);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma RRC LParen IY expr RParen End | RRC LParen IY expr RParen Comma B End
void Parser::parse_main_action_3319() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xFDCB08);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma SET const_expr Comma LParen IX RParen End | SET const_expr Comma LParen IX RParen Comma B End
void Parser::parse_main_action_3320() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xDDCB00C0+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma SET const_expr Comma LParen IX expr RParen End | SET const_expr Comma LParen IX expr RParen Comma B End
void Parser::parse_main_action_3321() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xDDCBC0+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma SET const_expr Comma LParen IY RParen End | SET const_expr Comma LParen IY RParen Comma B End
void Parser::parse_main_action_3322() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xFDCB00C0+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma SET const_expr Comma LParen IY expr RParen End | SET const_expr Comma LParen IY expr RParen Comma B End
void Parser::parse_main_action_3323() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xFDCBC0+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma SLA LParen IX RParen End | SLA LParen IX RParen Comma B End
void Parser::parse_main_action_3324() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDDCB0020);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma SLA LParen IX expr RParen End | SLA LParen IX expr RParen Comma B End
void Parser::parse_main_action_3325() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xDDCB20);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma SLA LParen IY RParen End | SLA LParen IY RParen Comma B End
void Parser::parse_main_action_3326() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFDCB0020);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma SLA LParen IY expr RParen End | SLA LParen IY expr RParen Comma B End
void Parser::parse_main_action_3327() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xFDCB20);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma SLI LParen IX RParen End | LD B Comma SLL LParen IX RParen End | LD B Comma SLS LParen IX RParen End | SLI LParen IX RParen Comma B End | SLL LParen IX RParen Comma B End | SLS LParen IX RParen Comma B End
void Parser::parse_main_action_3328() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDDCB0030);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma SLI LParen IX expr RParen End | LD B Comma SLL LParen IX expr RParen End | LD B Comma SLS LParen IX expr RParen End | SLI LParen IX expr RParen Comma B End | SLL LParen IX expr RParen Comma B End | SLS LParen IX expr RParen Comma B End
void Parser::parse_main_action_3329() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xDDCB30);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma SLI LParen IY RParen End | LD B Comma SLL LParen IY RParen End | LD B Comma SLS LParen IY RParen End | SLI LParen IY RParen Comma B End | SLL LParen IY RParen Comma B End | SLS LParen IY RParen Comma B End
void Parser::parse_main_action_3330() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFDCB0030);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma SLI LParen IY expr RParen End | LD B Comma SLL LParen IY expr RParen End | LD B Comma SLS LParen IY expr RParen End | SLI LParen IY expr RParen Comma B End | SLL LParen IY expr RParen Comma B End | SLS LParen IY expr RParen Comma B End
void Parser::parse_main_action_3331() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xFDCB30);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma SRA LParen IX RParen End | SRA LParen IX RParen Comma B End
void Parser::parse_main_action_3332() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDDCB0028);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma SRA LParen IX expr RParen End | SRA LParen IX expr RParen Comma B End
void Parser::parse_main_action_3333() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xDDCB28);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma SRA LParen IY RParen End | SRA LParen IY RParen Comma B End
void Parser::parse_main_action_3334() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFDCB0028);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma SRA LParen IY expr RParen End | SRA LParen IY expr RParen Comma B End
void Parser::parse_main_action_3335() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xFDCB28);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma SRL LParen IX RParen End | SRL LParen IX RParen Comma B End
void Parser::parse_main_action_3336() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDDCB0038);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma SRL LParen IX expr RParen End | SRL LParen IX expr RParen Comma B End
void Parser::parse_main_action_3337() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xDDCB38);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma SRL LParen IY RParen End | SRL LParen IY RParen Comma B End
void Parser::parse_main_action_3338() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFDCB0038);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma SRL LParen IY expr RParen End | SRL LParen IY expr RParen Comma B End
void Parser::parse_main_action_3339() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xFDCB38);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma LParen AHL RParen End
void Parser::parse_main_action_3340() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0x46);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma LParen AIX RParen End
void Parser::parse_main_action_3341() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xDD4600);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma LParen AIX expr RParen End
void Parser::parse_main_action_3342() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xDD46);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma LParen AIY RParen End
void Parser::parse_main_action_3343() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xFD4600);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma LParen AIY expr RParen End
void Parser::parse_main_action_3344() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xFD46);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma LParen DE Minus RParen End | LDD B Comma LParen DE RParen End
void Parser::parse_main_action_3345() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xEB);
	add_opcode(0x46);
	add_opcode(0xEB);
	add_opcode(0x1B);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma LParen DE Plus RParen End | LDI B Comma LParen DE RParen End
void Parser::parse_main_action_3346() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xEB);
	add_opcode(0x46);
	add_opcode(0xEB);
	add_opcode(0x13);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma LParen DE RParen End
void Parser::parse_main_action_3347() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xEB);
	add_opcode(0x46);
	add_opcode(0xEB);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma LParen HL Minus RParen End | LD B Comma LParen HLD RParen End | LDD B Comma LParen HL RParen End
void Parser::parse_main_action_3348() {
	add_opcode(0x46);
	add_opcode(0x2B);
}

// LD B Comma LParen HL Plus RParen End | LD B Comma LParen HLI RParen End | LDI B Comma LParen HL RParen End
void Parser::parse_main_action_3349() {
	add_opcode(0x46);
	add_opcode(0x23);
}

// LD B Comma LParen HL RParen End | MOV B Comma M End
void Parser::parse_main_action_3350() {
	add_opcode(0x46);
}

// LD B Comma LParen IX RParen End
void Parser::parse_main_action_3351() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xDD4600);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma LParen IX expr RParen End
void Parser::parse_main_action_3352() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx(0xDD46);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma LParen IY RParen End
void Parser::parse_main_action_3353() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xFD4600);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma LParen IY expr RParen End
void Parser::parse_main_action_3354() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx(0xFD46);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma LParen PHL RParen End
void Parser::parse_main_action_3355() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0x46);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma LParen PIX RParen End
void Parser::parse_main_action_3356() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xDD4600);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma LParen PIX expr RParen End
void Parser::parse_main_action_3357() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xDD46);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma LParen PIY RParen End
void Parser::parse_main_action_3358() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xFD4600);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma LParen PIY expr RParen End
void Parser::parse_main_action_3359() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xFD46);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma LParen XHL RParen End
void Parser::parse_main_action_3360() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0x46);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma LParen XIX RParen End
void Parser::parse_main_action_3361() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xDD4600);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma LParen XIX expr RParen End
void Parser::parse_main_action_3362() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xDD46);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma LParen XIY RParen End
void Parser::parse_main_action_3363() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xFD4600);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma LParen XIY expr RParen End
void Parser::parse_main_action_3364() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xFD46);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma LParen YHL RParen End
void Parser::parse_main_action_3365() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0x46);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma LParen YIX RParen End
void Parser::parse_main_action_3366() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xDD4600);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma LParen YIX expr RParen End
void Parser::parse_main_action_3367() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xDD46);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma LParen YIY RParen End
void Parser::parse_main_action_3368() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xFD4600);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma LParen YIY expr RParen End
void Parser::parse_main_action_3369() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xFD46);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma LParen ZHL RParen End
void Parser::parse_main_action_3370() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0x46);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma LParen ZIX RParen End
void Parser::parse_main_action_3371() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xDD4600);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma LParen ZIX expr RParen End
void Parser::parse_main_action_3372() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xDD46);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma LParen ZIY RParen End
void Parser::parse_main_action_3373() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xFD4600);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma LParen ZIY expr RParen End
void Parser::parse_main_action_3374() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xFD46);
	break;
	default:
	error_illegal_ident(); }
}

// LD B Comma expr End | MVI B Comma expr End
void Parser::parse_main_action_3375() {
	warn_if_expr_in_parens();
	add_opcode_n(0x06);
}

// LD BC Comma BC1 End
void Parser::parse_main_action_3376() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD9);
	add_opcode(0xC5);
	add_opcode(0xD9);
	add_opcode(0xC1);
	break;
	default:
	error_illegal_ident(); }
}

// LD BC Comma DE End
void Parser::parse_main_action_3377() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x42);
	add_opcode(0x4B);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F42);
	add_opcode(0x7F4B);
	break;
	default:
	error_illegal_ident(); }
}

// LD BC Comma DE1 End
void Parser::parse_main_action_3378() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD9);
	add_opcode(0xD5);
	add_opcode(0xD9);
	add_opcode(0xC1);
	break;
	default:
	error_illegal_ident(); }
}

// LD BC Comma HL End
void Parser::parse_main_action_3379() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x44);
	add_opcode(0x4D);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x91);
	break;
	default:
	error_illegal_ident(); }
}

// LD BC Comma HL1 End
void Parser::parse_main_action_3380() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD9);
	add_opcode(0xE5);
	add_opcode(0xD9);
	add_opcode(0xC1);
	break;
	default:
	error_illegal_ident(); }
}

// LD BC Comma IX End
void Parser::parse_main_action_3381() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDD44);
	add_opcode(0xDD4D);
	break;
	case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_Z180: case CPU_Z80_STRICT: 
	add_opcode(0xDDE5);
	add_opcode(0xC1);
	break;
	default:
	error_illegal_ident(); }
}

// LD BC Comma IY End
void Parser::parse_main_action_3382() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFD44);
	add_opcode(0xFD4D);
	break;
	case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_Z180: case CPU_Z80_STRICT: 
	add_opcode(0xFDE5);
	add_opcode(0xC1);
	break;
	default:
	error_illegal_ident(); }
}

// LD BC Comma LParen A Colon expr RParen End
void Parser::parse_main_action_3383() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	add_opcode_nn(0xED4B, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD BC Comma LParen AIX RParen End
void Parser::parse_main_action_3384() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xED8D00);
	break;
	default:
	error_illegal_ident(); }
}

// LD BC Comma LParen AIX expr RParen End
void Parser::parse_main_action_3385() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xED8D);
	break;
	default:
	error_illegal_ident(); }
}

// LD BC Comma LParen AIY RParen End
void Parser::parse_main_action_3386() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xED8C00);
	break;
	default:
	error_illegal_ident(); }
}

// LD BC Comma LParen AIY expr RParen End
void Parser::parse_main_action_3387() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xED8C);
	break;
	default:
	error_illegal_ident(); }
}

// LD BC Comma LParen HL Plus RParen End | LDI BC Comma LParen HL RParen End
void Parser::parse_main_action_3388() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x4E);
	add_opcode(0x23);
	add_opcode(0x46);
	add_opcode(0x23);
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xED07);
	add_opcode(0x23);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// LD BC Comma LParen HL RParen End
void Parser::parse_main_action_3389() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x4E);
	add_opcode(0x23);
	add_opcode(0x46);
	add_opcode(0x2B);
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xED07);
	break;
	default:
	error_illegal_ident(); }
}

// LD BC Comma LParen IX RParen End
void Parser::parse_main_action_3390() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xDD0700);
	break;
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xDD4E00);
	add_opcode(0xDD4601);
	break;
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xED8D00);
	break;
	default:
	error_illegal_ident(); }
}

// LD BC Comma LParen IX expr RParen End
void Parser::parse_main_action_3391() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode_idx(0xDD07);
	break;
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode_idx(0xED8D);
	break;
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx_idx1(0xDD4E, 0xDD46);
	break;
	default:
	error_illegal_ident(); }
}

// LD BC Comma LParen IY RParen End
void Parser::parse_main_action_3392() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xED8C00);
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xFD0700);
	break;
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xFD4E00);
	add_opcode(0xFD4601);
	break;
	default:
	error_illegal_ident(); }
}

// LD BC Comma LParen IY expr RParen End
void Parser::parse_main_action_3393() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode_idx(0xED8C);
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode_idx(0xFD07);
	break;
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx_idx1(0xFD4E, 0xFD46);
	break;
	default:
	error_illegal_ident(); }
}

// LD BC Comma LParen PIX RParen End
void Parser::parse_main_action_3394() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xED8D00);
	break;
	default:
	error_illegal_ident(); }
}

// LD BC Comma LParen PIX expr RParen End
void Parser::parse_main_action_3395() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xED8D);
	break;
	default:
	error_illegal_ident(); }
}

// LD BC Comma LParen PIY RParen End
void Parser::parse_main_action_3396() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xED8C00);
	break;
	default:
	error_illegal_ident(); }
}

// LD BC Comma LParen PIY expr RParen End
void Parser::parse_main_action_3397() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xED8C);
	break;
	default:
	error_illegal_ident(); }
}

// LD BC Comma LParen PP Colon expr RParen End
void Parser::parse_main_action_3398() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x5B);
	add_opcode_nn(0xED4B, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD BC Comma LParen PW Plus HL RParen End
void Parser::parse_main_action_3399() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D02);
	break;
	default:
	error_illegal_ident(); }
}

// LD BC Comma LParen PW RParen End
void Parser::parse_main_action_3400() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D0000);
	break;
	default:
	error_illegal_ident(); }
}

// LD BC Comma LParen PW expr RParen End
void Parser::parse_main_action_3401() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x6D00);
	break;
	default:
	error_illegal_ident(); }
}

// LD BC Comma LParen PX Plus HL RParen End
void Parser::parse_main_action_3402() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D12);
	break;
	default:
	error_illegal_ident(); }
}

// LD BC Comma LParen PX RParen End
void Parser::parse_main_action_3403() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D1000);
	break;
	default:
	error_illegal_ident(); }
}

// LD BC Comma LParen PX expr RParen End
void Parser::parse_main_action_3404() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x6D10);
	break;
	default:
	error_illegal_ident(); }
}

// LD BC Comma LParen PY Plus HL RParen End
void Parser::parse_main_action_3405() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D22);
	break;
	default:
	error_illegal_ident(); }
}

// LD BC Comma LParen PY RParen End
void Parser::parse_main_action_3406() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D2000);
	break;
	default:
	error_illegal_ident(); }
}

// LD BC Comma LParen PY expr RParen End
void Parser::parse_main_action_3407() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x6D20);
	break;
	default:
	error_illegal_ident(); }
}

// LD BC Comma LParen PZ Plus HL RParen End
void Parser::parse_main_action_3408() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D32);
	break;
	default:
	error_illegal_ident(); }
}

// LD BC Comma LParen PZ RParen End
void Parser::parse_main_action_3409() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D3000);
	break;
	default:
	error_illegal_ident(); }
}

// LD BC Comma LParen PZ expr RParen End
void Parser::parse_main_action_3410() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x6D30);
	break;
	default:
	error_illegal_ident(); }
}

// LD BC Comma LParen SP RParen End
void Parser::parse_main_action_3411() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xED8E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD BC Comma LParen SP expr RParen End
void Parser::parse_main_action_3412() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode_idx(0xED8E);
	break;
	default:
	error_illegal_ident(); }
}

// LD BC Comma LParen XIX RParen End
void Parser::parse_main_action_3413() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xED8D00);
	break;
	default:
	error_illegal_ident(); }
}

// LD BC Comma LParen XIX expr RParen End
void Parser::parse_main_action_3414() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xED8D);
	break;
	default:
	error_illegal_ident(); }
}

// LD BC Comma LParen XIY RParen End
void Parser::parse_main_action_3415() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xED8C00);
	break;
	default:
	error_illegal_ident(); }
}

// LD BC Comma LParen XIY expr RParen End
void Parser::parse_main_action_3416() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xED8C);
	break;
	default:
	error_illegal_ident(); }
}

// LD BC Comma LParen XP Colon expr RParen End
void Parser::parse_main_action_3417() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x40);
	add_opcode_nn(0xED4B, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD BC Comma LParen YIX RParen End
void Parser::parse_main_action_3418() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xED8D00);
	break;
	default:
	error_illegal_ident(); }
}

// LD BC Comma LParen YIX expr RParen End
void Parser::parse_main_action_3419() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xED8D);
	break;
	default:
	error_illegal_ident(); }
}

// LD BC Comma LParen YIY RParen End
void Parser::parse_main_action_3420() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xED8C00);
	break;
	default:
	error_illegal_ident(); }
}

// LD BC Comma LParen YIY expr RParen End
void Parser::parse_main_action_3421() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xED8C);
	break;
	default:
	error_illegal_ident(); }
}

// LD BC Comma LParen YP Colon expr RParen End
void Parser::parse_main_action_3422() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	add_opcode_nn(0xED4B, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD BC Comma LParen ZIX RParen End
void Parser::parse_main_action_3423() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xED8D00);
	break;
	default:
	error_illegal_ident(); }
}

// LD BC Comma LParen ZIX expr RParen End
void Parser::parse_main_action_3424() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xED8D);
	break;
	default:
	error_illegal_ident(); }
}

// LD BC Comma LParen ZIY RParen End
void Parser::parse_main_action_3425() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xED8C00);
	break;
	default:
	error_illegal_ident(); }
}

// LD BC Comma LParen ZIY expr RParen End
void Parser::parse_main_action_3426() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xED8C);
	break;
	default:
	error_illegal_ident(); }
}

// LD BC Comma LParen ZP Colon expr RParen End
void Parser::parse_main_action_3427() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x7F);
	add_opcode_nn(0xED4B, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD BC Comma expr End
void Parser::parse_main_action_3428() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	if (expr_in_parens()) { add_opcode_nn(0xED4B, 0); } else { add_opcode_nn(0x01, 0); }
	break;
	case CPU_EZ80: 
	if (expr_in_parens()) { add_opcode_nnn(0xED4B, 0); } else { add_opcode_nnn(0x01, 0); }
	break;
	case CPU_8080: case CPU_8085: case CPU_GBZ80: 
	warn_if_expr_in_parens();
	add_opcode_nn(0x01, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD BC1 Comma BC1 End
void Parser::parse_main_action_3429() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD9);
	add_opcode(0xC5);
	add_opcode(0xD9);
	add_opcode(0x76);
	add_opcode(0xC1);
	break;
	default:
	error_illegal_ident(); }
}

// LD BC1 Comma DE1 End
void Parser::parse_main_action_3430() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD9);
	add_opcode(0xD5);
	add_opcode(0xD9);
	add_opcode(0x76);
	add_opcode(0xC1);
	break;
	default:
	error_illegal_ident(); }
}

// LD BC1 Comma HL1 End
void Parser::parse_main_action_3431() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD9);
	add_opcode(0xE5);
	add_opcode(0xD9);
	add_opcode(0x76);
	add_opcode(0xC1);
	break;
	default:
	error_illegal_ident(); }
}

// LD BC1 Comma IX End
void Parser::parse_main_action_3432() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDDE5);
	add_opcode(0x76);
	add_opcode(0xC1);
	break;
	default:
	error_illegal_ident(); }
}

// LD BC1 Comma IY End
void Parser::parse_main_action_3433() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFDE5);
	add_opcode(0x76);
	add_opcode(0xC1);
	break;
	default:
	error_illegal_ident(); }
}

// LD BCDE Comma PW End
void Parser::parse_main_action_3434() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDDCD);
	break;
	default:
	error_illegal_ident(); }
}

// LD BCDE Comma PX End
void Parser::parse_main_action_3435() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDDDD);
	break;
	default:
	error_illegal_ident(); }
}

// LD BCDE Comma PY End
void Parser::parse_main_action_3436() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDDED);
	break;
	default:
	error_illegal_ident(); }
}

// LD BCDE Comma PZ End
void Parser::parse_main_action_3437() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDDFD);
	break;
	default:
	error_illegal_ident(); }
}

// LD BCDE Comma LParen HL RParen End
void Parser::parse_main_action_3438() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDD1A);
	break;
	default:
	error_illegal_ident(); }
}

// LD BCDE Comma LParen IX RParen End
void Parser::parse_main_action_3439() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDDCE00);
	break;
	default:
	error_illegal_ident(); }
}

// LD BCDE Comma LParen IX expr RParen End
void Parser::parse_main_action_3440() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0xDDCE);
	break;
	default:
	error_illegal_ident(); }
}

// LD BCDE Comma LParen IY RParen End
void Parser::parse_main_action_3441() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDDDE00);
	break;
	default:
	error_illegal_ident(); }
}

// LD BCDE Comma LParen IY expr RParen End
void Parser::parse_main_action_3442() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0xDDDE);
	break;
	default:
	error_illegal_ident(); }
}

// LD BCDE Comma LParen PW Plus HL RParen End
void Parser::parse_main_action_3443() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDD0C);
	break;
	default:
	error_illegal_ident(); }
}

// LD BCDE Comma LParen PW RParen End
void Parser::parse_main_action_3444() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDD0E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD BCDE Comma LParen PW expr RParen End
void Parser::parse_main_action_3445() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0xDD0E);
	break;
	default:
	error_illegal_ident(); }
}

// LD BCDE Comma LParen PX Plus HL RParen End
void Parser::parse_main_action_3446() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDD1C);
	break;
	default:
	error_illegal_ident(); }
}

// LD BCDE Comma LParen PX RParen End
void Parser::parse_main_action_3447() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDD1E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD BCDE Comma LParen PX expr RParen End
void Parser::parse_main_action_3448() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0xDD1E);
	break;
	default:
	error_illegal_ident(); }
}

// LD BCDE Comma LParen PY Plus HL RParen End
void Parser::parse_main_action_3449() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDD2C);
	break;
	default:
	error_illegal_ident(); }
}

// LD BCDE Comma LParen PY RParen End
void Parser::parse_main_action_3450() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDD2E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD BCDE Comma LParen PY expr RParen End
void Parser::parse_main_action_3451() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0xDD2E);
	break;
	default:
	error_illegal_ident(); }
}

// LD BCDE Comma LParen PZ Plus HL RParen End
void Parser::parse_main_action_3452() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDD3C);
	break;
	default:
	error_illegal_ident(); }
}

// LD BCDE Comma LParen PZ RParen End
void Parser::parse_main_action_3453() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDD3E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD BCDE Comma LParen PZ expr RParen End
void Parser::parse_main_action_3454() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0xDD3E);
	break;
	default:
	error_illegal_ident(); }
}

// LD BCDE Comma LParen SP Plus HL RParen End
void Parser::parse_main_action_3455() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDDFE);
	break;
	default:
	error_illegal_ident(); }
}

// LD BCDE Comma LParen SP RParen End
void Parser::parse_main_action_3456() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDDEE00);
	break;
	default:
	error_illegal_ident(); }
}

// LD BCDE Comma LParen SP expr RParen End
void Parser::parse_main_action_3457() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_n(0xDDEE);
	break;
	default:
	error_illegal_ident(); }
}

// LD BCDE Comma expr End
void Parser::parse_main_action_3458() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	if (expr_in_parens()) { add_opcode_nn(0x93, 0); } else { add_opcode_s(0xA3); }
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma A End | MOV C Comma A End
void Parser::parse_main_action_3459() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x4F);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F4F);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma B End | MOV C Comma B End
void Parser::parse_main_action_3460() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x48);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F48);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma C End | MOV C Comma C End
void Parser::parse_main_action_3461() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_GBZ80: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x49);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F49);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma D End | MOV C Comma D End
void Parser::parse_main_action_3462() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x4A);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F4A);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma E End | MOV C Comma E End
void Parser::parse_main_action_3463() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x4B);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F4B);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma H End | MOV C Comma H End
void Parser::parse_main_action_3464() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x4C);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F4C);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma IXH End
void Parser::parse_main_action_3465() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDD4C);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma IXL End
void Parser::parse_main_action_3466() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDD4D);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma IYH End
void Parser::parse_main_action_3467() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFD4C);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma IYL End
void Parser::parse_main_action_3468() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFD4D);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma L End | MOV C Comma L End
void Parser::parse_main_action_3469() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x4D);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F4D);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma RES const_expr Comma LParen IX RParen End | RES const_expr Comma LParen IX RParen Comma C End
void Parser::parse_main_action_3470() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xDDCB0081+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma RES const_expr Comma LParen IX expr RParen End | RES const_expr Comma LParen IX expr RParen Comma C End
void Parser::parse_main_action_3471() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xDDCB81+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma RES const_expr Comma LParen IY RParen End | RES const_expr Comma LParen IY RParen Comma C End
void Parser::parse_main_action_3472() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xFDCB0081+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma RES const_expr Comma LParen IY expr RParen End | RES const_expr Comma LParen IY expr RParen Comma C End
void Parser::parse_main_action_3473() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xFDCB81+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma RL LParen IX RParen End | RL LParen IX RParen Comma C End
void Parser::parse_main_action_3474() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDDCB0011);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma RL LParen IX expr RParen End | RL LParen IX expr RParen Comma C End
void Parser::parse_main_action_3475() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xDDCB11);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma RL LParen IY RParen End | RL LParen IY RParen Comma C End
void Parser::parse_main_action_3476() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFDCB0011);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma RL LParen IY expr RParen End | RL LParen IY expr RParen Comma C End
void Parser::parse_main_action_3477() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xFDCB11);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma RLC LParen IX RParen End | RLC LParen IX RParen Comma C End
void Parser::parse_main_action_3478() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDDCB0001);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma RLC LParen IX expr RParen End | RLC LParen IX expr RParen Comma C End
void Parser::parse_main_action_3479() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xDDCB01);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma RLC LParen IY RParen End | RLC LParen IY RParen Comma C End
void Parser::parse_main_action_3480() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFDCB0001);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma RLC LParen IY expr RParen End | RLC LParen IY expr RParen Comma C End
void Parser::parse_main_action_3481() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xFDCB01);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma RR LParen IX RParen End | RR LParen IX RParen Comma C End
void Parser::parse_main_action_3482() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDDCB0019);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma RR LParen IX expr RParen End | RR LParen IX expr RParen Comma C End
void Parser::parse_main_action_3483() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xDDCB19);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma RR LParen IY RParen End | RR LParen IY RParen Comma C End
void Parser::parse_main_action_3484() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFDCB0019);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma RR LParen IY expr RParen End | RR LParen IY expr RParen Comma C End
void Parser::parse_main_action_3485() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xFDCB19);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma RRC LParen IX RParen End | RRC LParen IX RParen Comma C End
void Parser::parse_main_action_3486() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDDCB0009);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma RRC LParen IX expr RParen End | RRC LParen IX expr RParen Comma C End
void Parser::parse_main_action_3487() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xDDCB09);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma RRC LParen IY RParen End | RRC LParen IY RParen Comma C End
void Parser::parse_main_action_3488() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFDCB0009);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma RRC LParen IY expr RParen End | RRC LParen IY expr RParen Comma C End
void Parser::parse_main_action_3489() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xFDCB09);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma SET const_expr Comma LParen IX RParen End | SET const_expr Comma LParen IX RParen Comma C End
void Parser::parse_main_action_3490() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xDDCB00C1+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma SET const_expr Comma LParen IX expr RParen End | SET const_expr Comma LParen IX expr RParen Comma C End
void Parser::parse_main_action_3491() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xDDCBC1+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma SET const_expr Comma LParen IY RParen End | SET const_expr Comma LParen IY RParen Comma C End
void Parser::parse_main_action_3492() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xFDCB00C1+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma SET const_expr Comma LParen IY expr RParen End | SET const_expr Comma LParen IY expr RParen Comma C End
void Parser::parse_main_action_3493() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xFDCBC1+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma SLA LParen IX RParen End | SLA LParen IX RParen Comma C End
void Parser::parse_main_action_3494() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDDCB0021);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma SLA LParen IX expr RParen End | SLA LParen IX expr RParen Comma C End
void Parser::parse_main_action_3495() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xDDCB21);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma SLA LParen IY RParen End | SLA LParen IY RParen Comma C End
void Parser::parse_main_action_3496() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFDCB0021);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma SLA LParen IY expr RParen End | SLA LParen IY expr RParen Comma C End
void Parser::parse_main_action_3497() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xFDCB21);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma SLI LParen IX RParen End | LD C Comma SLL LParen IX RParen End | LD C Comma SLS LParen IX RParen End | SLI LParen IX RParen Comma C End | SLL LParen IX RParen Comma C End | SLS LParen IX RParen Comma C End
void Parser::parse_main_action_3498() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDDCB0031);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma SLI LParen IX expr RParen End | LD C Comma SLL LParen IX expr RParen End | LD C Comma SLS LParen IX expr RParen End | SLI LParen IX expr RParen Comma C End | SLL LParen IX expr RParen Comma C End | SLS LParen IX expr RParen Comma C End
void Parser::parse_main_action_3499() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xDDCB31);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma SLI LParen IY RParen End | LD C Comma SLL LParen IY RParen End | LD C Comma SLS LParen IY RParen End | SLI LParen IY RParen Comma C End | SLL LParen IY RParen Comma C End | SLS LParen IY RParen Comma C End
void Parser::parse_main_action_3500() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFDCB0031);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma SLI LParen IY expr RParen End | LD C Comma SLL LParen IY expr RParen End | LD C Comma SLS LParen IY expr RParen End | SLI LParen IY expr RParen Comma C End | SLL LParen IY expr RParen Comma C End | SLS LParen IY expr RParen Comma C End
void Parser::parse_main_action_3501() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xFDCB31);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma SRA LParen IX RParen End | SRA LParen IX RParen Comma C End
void Parser::parse_main_action_3502() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDDCB0029);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma SRA LParen IX expr RParen End | SRA LParen IX expr RParen Comma C End
void Parser::parse_main_action_3503() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xDDCB29);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma SRA LParen IY RParen End | SRA LParen IY RParen Comma C End
void Parser::parse_main_action_3504() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFDCB0029);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma SRA LParen IY expr RParen End | SRA LParen IY expr RParen Comma C End
void Parser::parse_main_action_3505() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xFDCB29);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma SRL LParen IX RParen End | SRL LParen IX RParen Comma C End
void Parser::parse_main_action_3506() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDDCB0039);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma SRL LParen IX expr RParen End | SRL LParen IX expr RParen Comma C End
void Parser::parse_main_action_3507() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xDDCB39);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma SRL LParen IY RParen End | SRL LParen IY RParen Comma C End
void Parser::parse_main_action_3508() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFDCB0039);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma SRL LParen IY expr RParen End | SRL LParen IY expr RParen Comma C End
void Parser::parse_main_action_3509() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xFDCB39);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma LParen AHL RParen End
void Parser::parse_main_action_3510() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0x4E);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma LParen AIX RParen End
void Parser::parse_main_action_3511() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xDD4E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma LParen AIX expr RParen End
void Parser::parse_main_action_3512() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xDD4E);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma LParen AIY RParen End
void Parser::parse_main_action_3513() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xFD4E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma LParen AIY expr RParen End
void Parser::parse_main_action_3514() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xFD4E);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma LParen DE Minus RParen End | LDD C Comma LParen DE RParen End
void Parser::parse_main_action_3515() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xEB);
	add_opcode(0x4E);
	add_opcode(0xEB);
	add_opcode(0x1B);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma LParen DE Plus RParen End | LDI C Comma LParen DE RParen End
void Parser::parse_main_action_3516() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xEB);
	add_opcode(0x4E);
	add_opcode(0xEB);
	add_opcode(0x13);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma LParen DE RParen End
void Parser::parse_main_action_3517() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xEB);
	add_opcode(0x4E);
	add_opcode(0xEB);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma LParen HL Minus RParen End | LD C Comma LParen HLD RParen End | LDD C Comma LParen HL RParen End
void Parser::parse_main_action_3518() {
	add_opcode(0x4E);
	add_opcode(0x2B);
}

// LD C Comma LParen HL Plus RParen End | LD C Comma LParen HLI RParen End | LDI C Comma LParen HL RParen End
void Parser::parse_main_action_3519() {
	add_opcode(0x4E);
	add_opcode(0x23);
}

// LD C Comma LParen HL RParen End | MOV C Comma M End
void Parser::parse_main_action_3520() {
	add_opcode(0x4E);
}

// LD C Comma LParen IX RParen End
void Parser::parse_main_action_3521() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xDD4E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma LParen IX expr RParen End
void Parser::parse_main_action_3522() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx(0xDD4E);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma LParen IY RParen End
void Parser::parse_main_action_3523() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xFD4E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma LParen IY expr RParen End
void Parser::parse_main_action_3524() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx(0xFD4E);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma LParen PHL RParen End
void Parser::parse_main_action_3525() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0x4E);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma LParen PIX RParen End
void Parser::parse_main_action_3526() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xDD4E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma LParen PIX expr RParen End
void Parser::parse_main_action_3527() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xDD4E);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma LParen PIY RParen End
void Parser::parse_main_action_3528() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xFD4E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma LParen PIY expr RParen End
void Parser::parse_main_action_3529() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xFD4E);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma LParen XHL RParen End
void Parser::parse_main_action_3530() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0x4E);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma LParen XIX RParen End
void Parser::parse_main_action_3531() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xDD4E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma LParen XIX expr RParen End
void Parser::parse_main_action_3532() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xDD4E);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma LParen XIY RParen End
void Parser::parse_main_action_3533() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xFD4E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma LParen XIY expr RParen End
void Parser::parse_main_action_3534() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xFD4E);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma LParen YHL RParen End
void Parser::parse_main_action_3535() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0x4E);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma LParen YIX RParen End
void Parser::parse_main_action_3536() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xDD4E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma LParen YIX expr RParen End
void Parser::parse_main_action_3537() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xDD4E);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma LParen YIY RParen End
void Parser::parse_main_action_3538() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xFD4E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma LParen YIY expr RParen End
void Parser::parse_main_action_3539() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xFD4E);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma LParen ZHL RParen End
void Parser::parse_main_action_3540() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0x4E);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma LParen ZIX RParen End
void Parser::parse_main_action_3541() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xDD4E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma LParen ZIX expr RParen End
void Parser::parse_main_action_3542() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xDD4E);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma LParen ZIY RParen End
void Parser::parse_main_action_3543() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xFD4E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma LParen ZIY expr RParen End
void Parser::parse_main_action_3544() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xFD4E);
	break;
	default:
	error_illegal_ident(); }
}

// LD C Comma expr End | MVI C Comma expr End
void Parser::parse_main_action_3545() {
	warn_if_expr_in_parens();
	add_opcode_n(0x0E);
}

// LD D Comma A End | MOV D Comma A End
void Parser::parse_main_action_3546() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x57);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F57);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma B End | MOV D Comma B End
void Parser::parse_main_action_3547() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x50);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F50);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma C End | MOV D Comma C End
void Parser::parse_main_action_3548() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x51);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F51);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma D End | MOV D Comma D End
void Parser::parse_main_action_3549() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_GBZ80: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x52);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F52);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma E End | MOV D Comma E End
void Parser::parse_main_action_3550() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x53);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F53);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma H End | MOV D Comma H End
void Parser::parse_main_action_3551() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x54);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F54);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma IXH End
void Parser::parse_main_action_3552() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDD54);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma IXL End
void Parser::parse_main_action_3553() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDD55);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma IYH End
void Parser::parse_main_action_3554() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFD54);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma IYL End
void Parser::parse_main_action_3555() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFD55);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma L End | MOV D Comma L End
void Parser::parse_main_action_3556() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x55);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F55);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma RES const_expr Comma LParen IX RParen End | RES const_expr Comma LParen IX RParen Comma D End
void Parser::parse_main_action_3557() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xDDCB0082+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma RES const_expr Comma LParen IX expr RParen End | RES const_expr Comma LParen IX expr RParen Comma D End
void Parser::parse_main_action_3558() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xDDCB82+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma RES const_expr Comma LParen IY RParen End | RES const_expr Comma LParen IY RParen Comma D End
void Parser::parse_main_action_3559() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xFDCB0082+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma RES const_expr Comma LParen IY expr RParen End | RES const_expr Comma LParen IY expr RParen Comma D End
void Parser::parse_main_action_3560() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xFDCB82+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma RL LParen IX RParen End | RL LParen IX RParen Comma D End
void Parser::parse_main_action_3561() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDDCB0012);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma RL LParen IX expr RParen End | RL LParen IX expr RParen Comma D End
void Parser::parse_main_action_3562() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xDDCB12);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma RL LParen IY RParen End | RL LParen IY RParen Comma D End
void Parser::parse_main_action_3563() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFDCB0012);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma RL LParen IY expr RParen End | RL LParen IY expr RParen Comma D End
void Parser::parse_main_action_3564() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xFDCB12);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma RLC LParen IX RParen End | RLC LParen IX RParen Comma D End
void Parser::parse_main_action_3565() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDDCB0002);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma RLC LParen IX expr RParen End | RLC LParen IX expr RParen Comma D End
void Parser::parse_main_action_3566() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xDDCB02);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma RLC LParen IY RParen End | RLC LParen IY RParen Comma D End
void Parser::parse_main_action_3567() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFDCB0002);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma RLC LParen IY expr RParen End | RLC LParen IY expr RParen Comma D End
void Parser::parse_main_action_3568() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xFDCB02);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma RR LParen IX RParen End | RR LParen IX RParen Comma D End
void Parser::parse_main_action_3569() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDDCB001A);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma RR LParen IX expr RParen End | RR LParen IX expr RParen Comma D End
void Parser::parse_main_action_3570() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xDDCB1A);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma RR LParen IY RParen End | RR LParen IY RParen Comma D End
void Parser::parse_main_action_3571() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFDCB001A);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma RR LParen IY expr RParen End | RR LParen IY expr RParen Comma D End
void Parser::parse_main_action_3572() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xFDCB1A);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma RRC LParen IX RParen End | RRC LParen IX RParen Comma D End
void Parser::parse_main_action_3573() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDDCB000A);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma RRC LParen IX expr RParen End | RRC LParen IX expr RParen Comma D End
void Parser::parse_main_action_3574() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xDDCB0A);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma RRC LParen IY RParen End | RRC LParen IY RParen Comma D End
void Parser::parse_main_action_3575() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFDCB000A);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma RRC LParen IY expr RParen End | RRC LParen IY expr RParen Comma D End
void Parser::parse_main_action_3576() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xFDCB0A);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma SET const_expr Comma LParen IX RParen End | SET const_expr Comma LParen IX RParen Comma D End
void Parser::parse_main_action_3577() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xDDCB00C2+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma SET const_expr Comma LParen IX expr RParen End | SET const_expr Comma LParen IX expr RParen Comma D End
void Parser::parse_main_action_3578() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xDDCBC2+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma SET const_expr Comma LParen IY RParen End | SET const_expr Comma LParen IY RParen Comma D End
void Parser::parse_main_action_3579() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xFDCB00C2+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma SET const_expr Comma LParen IY expr RParen End | SET const_expr Comma LParen IY expr RParen Comma D End
void Parser::parse_main_action_3580() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xFDCBC2+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma SLA LParen IX RParen End | SLA LParen IX RParen Comma D End
void Parser::parse_main_action_3581() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDDCB0022);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma SLA LParen IX expr RParen End | SLA LParen IX expr RParen Comma D End
void Parser::parse_main_action_3582() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xDDCB22);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma SLA LParen IY RParen End | SLA LParen IY RParen Comma D End
void Parser::parse_main_action_3583() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFDCB0022);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma SLA LParen IY expr RParen End | SLA LParen IY expr RParen Comma D End
void Parser::parse_main_action_3584() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xFDCB22);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma SLI LParen IX RParen End | LD D Comma SLL LParen IX RParen End | LD D Comma SLS LParen IX RParen End | SLI LParen IX RParen Comma D End | SLL LParen IX RParen Comma D End | SLS LParen IX RParen Comma D End
void Parser::parse_main_action_3585() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDDCB0032);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma SLI LParen IX expr RParen End | LD D Comma SLL LParen IX expr RParen End | LD D Comma SLS LParen IX expr RParen End | SLI LParen IX expr RParen Comma D End | SLL LParen IX expr RParen Comma D End | SLS LParen IX expr RParen Comma D End
void Parser::parse_main_action_3586() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xDDCB32);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma SLI LParen IY RParen End | LD D Comma SLL LParen IY RParen End | LD D Comma SLS LParen IY RParen End | SLI LParen IY RParen Comma D End | SLL LParen IY RParen Comma D End | SLS LParen IY RParen Comma D End
void Parser::parse_main_action_3587() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFDCB0032);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma SLI LParen IY expr RParen End | LD D Comma SLL LParen IY expr RParen End | LD D Comma SLS LParen IY expr RParen End | SLI LParen IY expr RParen Comma D End | SLL LParen IY expr RParen Comma D End | SLS LParen IY expr RParen Comma D End
void Parser::parse_main_action_3588() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xFDCB32);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma SRA LParen IX RParen End | SRA LParen IX RParen Comma D End
void Parser::parse_main_action_3589() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDDCB002A);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma SRA LParen IX expr RParen End | SRA LParen IX expr RParen Comma D End
void Parser::parse_main_action_3590() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xDDCB2A);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma SRA LParen IY RParen End | SRA LParen IY RParen Comma D End
void Parser::parse_main_action_3591() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFDCB002A);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma SRA LParen IY expr RParen End | SRA LParen IY expr RParen Comma D End
void Parser::parse_main_action_3592() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xFDCB2A);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma SRL LParen IX RParen End | SRL LParen IX RParen Comma D End
void Parser::parse_main_action_3593() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDDCB003A);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma SRL LParen IX expr RParen End | SRL LParen IX expr RParen Comma D End
void Parser::parse_main_action_3594() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xDDCB3A);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma SRL LParen IY RParen End | SRL LParen IY RParen Comma D End
void Parser::parse_main_action_3595() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFDCB003A);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma SRL LParen IY expr RParen End | SRL LParen IY expr RParen Comma D End
void Parser::parse_main_action_3596() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xFDCB3A);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma LParen AHL RParen End
void Parser::parse_main_action_3597() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0x56);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma LParen AIX RParen End
void Parser::parse_main_action_3598() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xDD5600);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma LParen AIX expr RParen End
void Parser::parse_main_action_3599() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xDD56);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma LParen AIY RParen End
void Parser::parse_main_action_3600() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xFD5600);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma LParen AIY expr RParen End
void Parser::parse_main_action_3601() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xFD56);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma LParen DE Minus RParen End | LDD D Comma LParen DE RParen End
void Parser::parse_main_action_3602() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xEB);
	add_opcode(0x66);
	add_opcode(0xEB);
	add_opcode(0x1B);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma LParen DE Plus RParen End | LDI D Comma LParen DE RParen End
void Parser::parse_main_action_3603() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xEB);
	add_opcode(0x66);
	add_opcode(0xEB);
	add_opcode(0x13);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma LParen DE RParen End
void Parser::parse_main_action_3604() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xEB);
	add_opcode(0x66);
	add_opcode(0xEB);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma LParen HL Minus RParen End | LD D Comma LParen HLD RParen End | LDD D Comma LParen HL RParen End
void Parser::parse_main_action_3605() {
	add_opcode(0x56);
	add_opcode(0x2B);
}

// LD D Comma LParen HL Plus RParen End | LD D Comma LParen HLI RParen End | LDI D Comma LParen HL RParen End
void Parser::parse_main_action_3606() {
	add_opcode(0x56);
	add_opcode(0x23);
}

// LD D Comma LParen HL RParen End | MOV D Comma M End
void Parser::parse_main_action_3607() {
	add_opcode(0x56);
}

// LD D Comma LParen IX RParen End
void Parser::parse_main_action_3608() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xDD5600);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma LParen IX expr RParen End
void Parser::parse_main_action_3609() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx(0xDD56);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma LParen IY RParen End
void Parser::parse_main_action_3610() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xFD5600);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma LParen IY expr RParen End
void Parser::parse_main_action_3611() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx(0xFD56);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma LParen PHL RParen End
void Parser::parse_main_action_3612() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0x56);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma LParen PIX RParen End
void Parser::parse_main_action_3613() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xDD5600);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma LParen PIX expr RParen End
void Parser::parse_main_action_3614() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xDD56);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma LParen PIY RParen End
void Parser::parse_main_action_3615() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xFD5600);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma LParen PIY expr RParen End
void Parser::parse_main_action_3616() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xFD56);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma LParen XHL RParen End
void Parser::parse_main_action_3617() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0x56);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma LParen XIX RParen End
void Parser::parse_main_action_3618() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xDD5600);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma LParen XIX expr RParen End
void Parser::parse_main_action_3619() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xDD56);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma LParen XIY RParen End
void Parser::parse_main_action_3620() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xFD5600);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma LParen XIY expr RParen End
void Parser::parse_main_action_3621() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xFD56);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma LParen YHL RParen End
void Parser::parse_main_action_3622() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0x56);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma LParen YIX RParen End
void Parser::parse_main_action_3623() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xDD5600);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma LParen YIX expr RParen End
void Parser::parse_main_action_3624() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xDD56);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma LParen YIY RParen End
void Parser::parse_main_action_3625() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xFD5600);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma LParen YIY expr RParen End
void Parser::parse_main_action_3626() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xFD56);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma LParen ZHL RParen End
void Parser::parse_main_action_3627() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0x56);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma LParen ZIX RParen End
void Parser::parse_main_action_3628() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xDD5600);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma LParen ZIX expr RParen End
void Parser::parse_main_action_3629() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xDD56);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma LParen ZIY RParen End
void Parser::parse_main_action_3630() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xFD5600);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma LParen ZIY expr RParen End
void Parser::parse_main_action_3631() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xFD56);
	break;
	default:
	error_illegal_ident(); }
}

// LD D Comma expr End | MVI D Comma expr End
void Parser::parse_main_action_3632() {
	warn_if_expr_in_parens();
	add_opcode_n(0x16);
}

// LD DE Comma BC End
void Parser::parse_main_action_3633() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x50);
	add_opcode(0x59);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F50);
	add_opcode(0x7F59);
	break;
	default:
	error_illegal_ident(); }
}

// LD DE Comma BC1 End
void Parser::parse_main_action_3634() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD9);
	add_opcode(0xC5);
	add_opcode(0xD9);
	add_opcode(0xD1);
	break;
	default:
	error_illegal_ident(); }
}

// LD DE Comma DE1 End
void Parser::parse_main_action_3635() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD9);
	add_opcode(0xD5);
	add_opcode(0xD9);
	add_opcode(0xD1);
	break;
	default:
	error_illegal_ident(); }
}

// LD DE Comma HL End
void Parser::parse_main_action_3636() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x54);
	add_opcode(0x5D);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xB1);
	break;
	default:
	error_illegal_ident(); }
}

// LD DE Comma HL expr End
void Parser::parse_main_action_3637() {
	switch (g_args.cpu()) {
	case CPU_GBZ80: 
	add_opcode(0xE5);
	add_opcode_n_0(0x11);
	add_opcode(0x19);
	add_opcode(0xE5);
	add_opcode(0xD5);
	add_opcode(0xE1);
	add_opcode(0xD1);
	add_opcode(0xE1);
	break;
	case CPU_8080: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xE5);
	add_opcode_n_0(0x11);
	add_opcode(0x19);
	add_opcode(0xEB);
	add_opcode(0xE1);
	break;
	case CPU_8085: 
	add_opcode_n(0x28);
	break;
	default:
	error_illegal_ident(); }
}

// LD DE Comma HL1 End
void Parser::parse_main_action_3638() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD9);
	add_opcode(0xE5);
	add_opcode(0xD9);
	add_opcode(0xD1);
	break;
	default:
	error_illegal_ident(); }
}

// LD DE Comma IX End
void Parser::parse_main_action_3639() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDD54);
	add_opcode(0xDD5D);
	break;
	case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_Z180: case CPU_Z80_STRICT: 
	add_opcode(0xDDE5);
	add_opcode(0xD1);
	break;
	default:
	error_illegal_ident(); }
}

// LD DE Comma IY End
void Parser::parse_main_action_3640() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFD54);
	add_opcode(0xFD5D);
	break;
	case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_Z180: case CPU_Z80_STRICT: 
	add_opcode(0xFDE5);
	add_opcode(0xD1);
	break;
	default:
	error_illegal_ident(); }
}

// LD DE Comma SP End
void Parser::parse_main_action_3641() {
	switch (g_args.cpu()) {
	case CPU_8085: 
	add_opcode(0x3800);
	break;
	case CPU_GBZ80: 
	add_opcode(0xE5);
	add_opcode(0xD5);
	add_opcode(0xE1);
	add_opcode(0xD1);
	add_opcode(0x210000);
	add_opcode(0x39);
	add_opcode(0xE5);
	add_opcode(0xD5);
	add_opcode(0xE1);
	add_opcode(0xD1);
	break;
	case CPU_8080: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xEB);
	add_opcode(0x210000);
	add_opcode(0x39);
	add_opcode(0xEB);
	break;
	default:
	error_illegal_ident(); }
}

// LD DE Comma SP expr End
void Parser::parse_main_action_3642() {
	switch (g_args.cpu()) {
	case CPU_GBZ80: 
	add_opcode(0xE5);
	add_opcode(0xD5);
	add_opcode(0xE1);
	add_opcode(0xD1);
	add_opcode_n_0(0x21);
	add_opcode(0x39);
	add_opcode(0xE5);
	add_opcode(0xD5);
	add_opcode(0xE1);
	add_opcode(0xD1);
	break;
	case CPU_8080: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xEB);
	add_opcode_n_0(0x21);
	add_opcode(0x39);
	add_opcode(0xEB);
	break;
	case CPU_8085: 
	add_opcode_n(0x38);
	break;
	default:
	error_illegal_ident(); }
}

// LD DE Comma LParen A Colon expr RParen End
void Parser::parse_main_action_3643() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	add_opcode_nn(0xED5B, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD DE Comma LParen AIX RParen End
void Parser::parse_main_action_3644() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xED9D00);
	break;
	default:
	error_illegal_ident(); }
}

// LD DE Comma LParen AIX expr RParen End
void Parser::parse_main_action_3645() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xED9D);
	break;
	default:
	error_illegal_ident(); }
}

// LD DE Comma LParen AIY RParen End
void Parser::parse_main_action_3646() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xED9C00);
	break;
	default:
	error_illegal_ident(); }
}

// LD DE Comma LParen AIY expr RParen End
void Parser::parse_main_action_3647() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xED9C);
	break;
	default:
	error_illegal_ident(); }
}

// LD DE Comma LParen HL Plus RParen End | LDI DE Comma LParen HL RParen End
void Parser::parse_main_action_3648() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x5E);
	add_opcode(0x23);
	add_opcode(0x56);
	add_opcode(0x23);
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xED17);
	add_opcode(0x23);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// LD DE Comma LParen HL RParen End
void Parser::parse_main_action_3649() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x5E);
	add_opcode(0x23);
	add_opcode(0x56);
	add_opcode(0x2B);
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xED17);
	break;
	default:
	error_illegal_ident(); }
}

// LD DE Comma LParen IX RParen End
void Parser::parse_main_action_3650() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xDD1700);
	break;
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xDD5E00);
	add_opcode(0xDD5601);
	break;
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xED9D00);
	break;
	default:
	error_illegal_ident(); }
}

// LD DE Comma LParen IX expr RParen End
void Parser::parse_main_action_3651() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode_idx(0xDD17);
	break;
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode_idx(0xED9D);
	break;
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx_idx1(0xDD5E, 0xDD56);
	break;
	default:
	error_illegal_ident(); }
}

// LD DE Comma LParen IY RParen End
void Parser::parse_main_action_3652() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xED9C00);
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xFD1700);
	break;
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xFD5E00);
	add_opcode(0xFD5601);
	break;
	default:
	error_illegal_ident(); }
}

// LD DE Comma LParen IY expr RParen End
void Parser::parse_main_action_3653() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode_idx(0xED9C);
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode_idx(0xFD17);
	break;
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx_idx1(0xFD5E, 0xFD56);
	break;
	default:
	error_illegal_ident(); }
}

// LD DE Comma LParen PIX RParen End
void Parser::parse_main_action_3654() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xED9D00);
	break;
	default:
	error_illegal_ident(); }
}

// LD DE Comma LParen PIX expr RParen End
void Parser::parse_main_action_3655() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xED9D);
	break;
	default:
	error_illegal_ident(); }
}

// LD DE Comma LParen PIY RParen End
void Parser::parse_main_action_3656() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xED9C00);
	break;
	default:
	error_illegal_ident(); }
}

// LD DE Comma LParen PIY expr RParen End
void Parser::parse_main_action_3657() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xED9C);
	break;
	default:
	error_illegal_ident(); }
}

// LD DE Comma LParen PP Colon expr RParen End
void Parser::parse_main_action_3658() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x5B);
	add_opcode_nn(0xED5B, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD DE Comma LParen PW Plus HL RParen End
void Parser::parse_main_action_3659() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D42);
	break;
	default:
	error_illegal_ident(); }
}

// LD DE Comma LParen PW RParen End
void Parser::parse_main_action_3660() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D4000);
	break;
	default:
	error_illegal_ident(); }
}

// LD DE Comma LParen PW expr RParen End
void Parser::parse_main_action_3661() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x6D40);
	break;
	default:
	error_illegal_ident(); }
}

// LD DE Comma LParen PX Plus HL RParen End
void Parser::parse_main_action_3662() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D52);
	break;
	default:
	error_illegal_ident(); }
}

// LD DE Comma LParen PX RParen End
void Parser::parse_main_action_3663() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D5000);
	break;
	default:
	error_illegal_ident(); }
}

// LD DE Comma LParen PX expr RParen End
void Parser::parse_main_action_3664() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x6D50);
	break;
	default:
	error_illegal_ident(); }
}

// LD DE Comma LParen PY Plus HL RParen End
void Parser::parse_main_action_3665() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D62);
	break;
	default:
	error_illegal_ident(); }
}

// LD DE Comma LParen PY RParen End
void Parser::parse_main_action_3666() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D6000);
	break;
	default:
	error_illegal_ident(); }
}

// LD DE Comma LParen PY expr RParen End
void Parser::parse_main_action_3667() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x6D60);
	break;
	default:
	error_illegal_ident(); }
}

// LD DE Comma LParen PZ Plus HL RParen End
void Parser::parse_main_action_3668() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D72);
	break;
	default:
	error_illegal_ident(); }
}

// LD DE Comma LParen PZ RParen End
void Parser::parse_main_action_3669() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D7000);
	break;
	default:
	error_illegal_ident(); }
}

// LD DE Comma LParen PZ expr RParen End
void Parser::parse_main_action_3670() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x6D70);
	break;
	default:
	error_illegal_ident(); }
}

// LD DE Comma LParen SP RParen End
void Parser::parse_main_action_3671() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xED9E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD DE Comma LParen SP expr RParen End
void Parser::parse_main_action_3672() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode_idx(0xED9E);
	break;
	default:
	error_illegal_ident(); }
}

// LD DE Comma LParen XIX RParen End
void Parser::parse_main_action_3673() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xED9D00);
	break;
	default:
	error_illegal_ident(); }
}

// LD DE Comma LParen XIX expr RParen End
void Parser::parse_main_action_3674() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xED9D);
	break;
	default:
	error_illegal_ident(); }
}

// LD DE Comma LParen XIY RParen End
void Parser::parse_main_action_3675() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xED9C00);
	break;
	default:
	error_illegal_ident(); }
}

// LD DE Comma LParen XIY expr RParen End
void Parser::parse_main_action_3676() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xED9C);
	break;
	default:
	error_illegal_ident(); }
}

// LD DE Comma LParen XP Colon expr RParen End
void Parser::parse_main_action_3677() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x40);
	add_opcode_nn(0xED5B, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD DE Comma LParen YIX RParen End
void Parser::parse_main_action_3678() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xED9D00);
	break;
	default:
	error_illegal_ident(); }
}

// LD DE Comma LParen YIX expr RParen End
void Parser::parse_main_action_3679() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xED9D);
	break;
	default:
	error_illegal_ident(); }
}

// LD DE Comma LParen YIY RParen End
void Parser::parse_main_action_3680() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xED9C00);
	break;
	default:
	error_illegal_ident(); }
}

// LD DE Comma LParen YIY expr RParen End
void Parser::parse_main_action_3681() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xED9C);
	break;
	default:
	error_illegal_ident(); }
}

// LD DE Comma LParen YP Colon expr RParen End
void Parser::parse_main_action_3682() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	add_opcode_nn(0xED5B, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD DE Comma LParen ZIX RParen End
void Parser::parse_main_action_3683() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xED9D00);
	break;
	default:
	error_illegal_ident(); }
}

// LD DE Comma LParen ZIX expr RParen End
void Parser::parse_main_action_3684() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xED9D);
	break;
	default:
	error_illegal_ident(); }
}

// LD DE Comma LParen ZIY RParen End
void Parser::parse_main_action_3685() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xED9C00);
	break;
	default:
	error_illegal_ident(); }
}

// LD DE Comma LParen ZIY expr RParen End
void Parser::parse_main_action_3686() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xED9C);
	break;
	default:
	error_illegal_ident(); }
}

// LD DE Comma LParen ZP Colon expr RParen End
void Parser::parse_main_action_3687() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x7F);
	add_opcode_nn(0xED5B, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD DE Comma expr End
void Parser::parse_main_action_3688() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: 
	if (expr_in_parens()) { add_opcode(0xEB);
	add_opcode_nn(0x2A, 0);
	add_opcode(0xEB); } else { add_opcode_nn(0x11, 0); }
	break;
	case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	if (expr_in_parens()) { add_opcode_nn(0xED5B, 0); } else { add_opcode_nn(0x11, 0); }
	break;
	case CPU_EZ80: 
	if (expr_in_parens()) { add_opcode_nnn(0xED5B, 0); } else { add_opcode_nnn(0x11, 0); }
	break;
	case CPU_GBZ80: 
	warn_if_expr_in_parens();
	add_opcode_nn(0x11, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD DE1 Comma BC1 End
void Parser::parse_main_action_3689() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD9);
	add_opcode(0xC5);
	add_opcode(0xD9);
	add_opcode(0x76);
	add_opcode(0xD1);
	break;
	default:
	error_illegal_ident(); }
}

// LD DE1 Comma DE1 End
void Parser::parse_main_action_3690() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD9);
	add_opcode(0xD5);
	add_opcode(0xD9);
	add_opcode(0x76);
	add_opcode(0xD1);
	break;
	default:
	error_illegal_ident(); }
}

// LD DE1 Comma HL1 End
void Parser::parse_main_action_3691() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD9);
	add_opcode(0xE5);
	add_opcode(0xD9);
	add_opcode(0x76);
	add_opcode(0xD1);
	break;
	default:
	error_illegal_ident(); }
}

// LD DE1 Comma IX End
void Parser::parse_main_action_3692() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDDE5);
	add_opcode(0x76);
	add_opcode(0xD1);
	break;
	default:
	error_illegal_ident(); }
}

// LD DE1 Comma IY End
void Parser::parse_main_action_3693() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFDE5);
	add_opcode(0x76);
	add_opcode(0xD1);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma A End | MOV E Comma A End
void Parser::parse_main_action_3694() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x5F);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F5F);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma B End | MOV E Comma B End
void Parser::parse_main_action_3695() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x58);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F58);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma C End | MOV E Comma C End
void Parser::parse_main_action_3696() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x59);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F59);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma D End | MOV E Comma D End
void Parser::parse_main_action_3697() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x5A);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F5A);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma E End | MOV E Comma E End
void Parser::parse_main_action_3698() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_GBZ80: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x5B);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F5B);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma H End | MOV E Comma H End
void Parser::parse_main_action_3699() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x5C);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F5C);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma IXH End
void Parser::parse_main_action_3700() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDD5C);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma IXL End
void Parser::parse_main_action_3701() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDD5D);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma IYH End
void Parser::parse_main_action_3702() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFD5C);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma IYL End
void Parser::parse_main_action_3703() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFD5D);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma L End | MOV E Comma L End
void Parser::parse_main_action_3704() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x5D);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F5D);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma RES const_expr Comma LParen IX RParen End | RES const_expr Comma LParen IX RParen Comma E End
void Parser::parse_main_action_3705() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xDDCB0083+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma RES const_expr Comma LParen IX expr RParen End | RES const_expr Comma LParen IX expr RParen Comma E End
void Parser::parse_main_action_3706() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xDDCB83+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma RES const_expr Comma LParen IY RParen End | RES const_expr Comma LParen IY RParen Comma E End
void Parser::parse_main_action_3707() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xFDCB0083+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma RES const_expr Comma LParen IY expr RParen End | RES const_expr Comma LParen IY expr RParen Comma E End
void Parser::parse_main_action_3708() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xFDCB83+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma RL LParen IX RParen End | RL LParen IX RParen Comma E End
void Parser::parse_main_action_3709() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDDCB0013);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma RL LParen IX expr RParen End | RL LParen IX expr RParen Comma E End
void Parser::parse_main_action_3710() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xDDCB13);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma RL LParen IY RParen End | RL LParen IY RParen Comma E End
void Parser::parse_main_action_3711() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFDCB0013);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma RL LParen IY expr RParen End | RL LParen IY expr RParen Comma E End
void Parser::parse_main_action_3712() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xFDCB13);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma RLC LParen IX RParen End | RLC LParen IX RParen Comma E End
void Parser::parse_main_action_3713() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDDCB0003);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma RLC LParen IX expr RParen End | RLC LParen IX expr RParen Comma E End
void Parser::parse_main_action_3714() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xDDCB03);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma RLC LParen IY RParen End | RLC LParen IY RParen Comma E End
void Parser::parse_main_action_3715() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFDCB0003);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma RLC LParen IY expr RParen End | RLC LParen IY expr RParen Comma E End
void Parser::parse_main_action_3716() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xFDCB03);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma RR LParen IX RParen End | RR LParen IX RParen Comma E End
void Parser::parse_main_action_3717() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDDCB001B);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma RR LParen IX expr RParen End | RR LParen IX expr RParen Comma E End
void Parser::parse_main_action_3718() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xDDCB1B);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma RR LParen IY RParen End | RR LParen IY RParen Comma E End
void Parser::parse_main_action_3719() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFDCB001B);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma RR LParen IY expr RParen End | RR LParen IY expr RParen Comma E End
void Parser::parse_main_action_3720() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xFDCB1B);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma RRC LParen IX RParen End | RRC LParen IX RParen Comma E End
void Parser::parse_main_action_3721() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDDCB000B);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma RRC LParen IX expr RParen End | RRC LParen IX expr RParen Comma E End
void Parser::parse_main_action_3722() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xDDCB0B);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma RRC LParen IY RParen End | RRC LParen IY RParen Comma E End
void Parser::parse_main_action_3723() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFDCB000B);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma RRC LParen IY expr RParen End | RRC LParen IY expr RParen Comma E End
void Parser::parse_main_action_3724() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xFDCB0B);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma SET const_expr Comma LParen IX RParen End | SET const_expr Comma LParen IX RParen Comma E End
void Parser::parse_main_action_3725() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xDDCB00C3+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma SET const_expr Comma LParen IX expr RParen End | SET const_expr Comma LParen IX expr RParen Comma E End
void Parser::parse_main_action_3726() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xDDCBC3+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma SET const_expr Comma LParen IY RParen End | SET const_expr Comma LParen IY RParen Comma E End
void Parser::parse_main_action_3727() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xFDCB00C3+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma SET const_expr Comma LParen IY expr RParen End | SET const_expr Comma LParen IY expr RParen Comma E End
void Parser::parse_main_action_3728() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xFDCBC3+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma SLA LParen IX RParen End | SLA LParen IX RParen Comma E End
void Parser::parse_main_action_3729() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDDCB0023);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma SLA LParen IX expr RParen End | SLA LParen IX expr RParen Comma E End
void Parser::parse_main_action_3730() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xDDCB23);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma SLA LParen IY RParen End | SLA LParen IY RParen Comma E End
void Parser::parse_main_action_3731() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFDCB0023);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma SLA LParen IY expr RParen End | SLA LParen IY expr RParen Comma E End
void Parser::parse_main_action_3732() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xFDCB23);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma SLI LParen IX RParen End | LD E Comma SLL LParen IX RParen End | LD E Comma SLS LParen IX RParen End | SLI LParen IX RParen Comma E End | SLL LParen IX RParen Comma E End | SLS LParen IX RParen Comma E End
void Parser::parse_main_action_3733() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDDCB0033);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma SLI LParen IX expr RParen End | LD E Comma SLL LParen IX expr RParen End | LD E Comma SLS LParen IX expr RParen End | SLI LParen IX expr RParen Comma E End | SLL LParen IX expr RParen Comma E End | SLS LParen IX expr RParen Comma E End
void Parser::parse_main_action_3734() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xDDCB33);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma SLI LParen IY RParen End | LD E Comma SLL LParen IY RParen End | LD E Comma SLS LParen IY RParen End | SLI LParen IY RParen Comma E End | SLL LParen IY RParen Comma E End | SLS LParen IY RParen Comma E End
void Parser::parse_main_action_3735() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFDCB0033);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma SLI LParen IY expr RParen End | LD E Comma SLL LParen IY expr RParen End | LD E Comma SLS LParen IY expr RParen End | SLI LParen IY expr RParen Comma E End | SLL LParen IY expr RParen Comma E End | SLS LParen IY expr RParen Comma E End
void Parser::parse_main_action_3736() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xFDCB33);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma SRA LParen IX RParen End | SRA LParen IX RParen Comma E End
void Parser::parse_main_action_3737() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDDCB002B);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma SRA LParen IX expr RParen End | SRA LParen IX expr RParen Comma E End
void Parser::parse_main_action_3738() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xDDCB2B);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma SRA LParen IY RParen End | SRA LParen IY RParen Comma E End
void Parser::parse_main_action_3739() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFDCB002B);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma SRA LParen IY expr RParen End | SRA LParen IY expr RParen Comma E End
void Parser::parse_main_action_3740() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xFDCB2B);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma SRL LParen IX RParen End | SRL LParen IX RParen Comma E End
void Parser::parse_main_action_3741() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDDCB003B);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma SRL LParen IX expr RParen End | SRL LParen IX expr RParen Comma E End
void Parser::parse_main_action_3742() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xDDCB3B);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma SRL LParen IY RParen End | SRL LParen IY RParen Comma E End
void Parser::parse_main_action_3743() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFDCB003B);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma SRL LParen IY expr RParen End | SRL LParen IY expr RParen Comma E End
void Parser::parse_main_action_3744() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xFDCB3B);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma LParen AHL RParen End
void Parser::parse_main_action_3745() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0x5E);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma LParen AIX RParen End
void Parser::parse_main_action_3746() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xDD5E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma LParen AIX expr RParen End
void Parser::parse_main_action_3747() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xDD5E);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma LParen AIY RParen End
void Parser::parse_main_action_3748() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xFD5E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma LParen AIY expr RParen End
void Parser::parse_main_action_3749() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xFD5E);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma LParen DE Minus RParen End | LDD E Comma LParen DE RParen End
void Parser::parse_main_action_3750() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xEB);
	add_opcode(0x6E);
	add_opcode(0xEB);
	add_opcode(0x1B);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma LParen DE Plus RParen End | LDI E Comma LParen DE RParen End
void Parser::parse_main_action_3751() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xEB);
	add_opcode(0x6E);
	add_opcode(0xEB);
	add_opcode(0x13);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma LParen DE RParen End
void Parser::parse_main_action_3752() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xEB);
	add_opcode(0x6E);
	add_opcode(0xEB);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma LParen HL Minus RParen End | LD E Comma LParen HLD RParen End | LDD E Comma LParen HL RParen End
void Parser::parse_main_action_3753() {
	add_opcode(0x5E);
	add_opcode(0x2B);
}

// LD E Comma LParen HL Plus RParen End | LD E Comma LParen HLI RParen End | LDI E Comma LParen HL RParen End
void Parser::parse_main_action_3754() {
	add_opcode(0x5E);
	add_opcode(0x23);
}

// LD E Comma LParen HL RParen End | MOV E Comma M End
void Parser::parse_main_action_3755() {
	add_opcode(0x5E);
}

// LD E Comma LParen IX RParen End
void Parser::parse_main_action_3756() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xDD5E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma LParen IX expr RParen End
void Parser::parse_main_action_3757() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx(0xDD5E);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma LParen IY RParen End
void Parser::parse_main_action_3758() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xFD5E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma LParen IY expr RParen End
void Parser::parse_main_action_3759() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx(0xFD5E);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma LParen PHL RParen End
void Parser::parse_main_action_3760() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0x5E);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma LParen PIX RParen End
void Parser::parse_main_action_3761() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xDD5E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma LParen PIX expr RParen End
void Parser::parse_main_action_3762() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xDD5E);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma LParen PIY RParen End
void Parser::parse_main_action_3763() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xFD5E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma LParen PIY expr RParen End
void Parser::parse_main_action_3764() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xFD5E);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma LParen XHL RParen End
void Parser::parse_main_action_3765() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0x5E);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma LParen XIX RParen End
void Parser::parse_main_action_3766() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xDD5E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma LParen XIX expr RParen End
void Parser::parse_main_action_3767() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xDD5E);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma LParen XIY RParen End
void Parser::parse_main_action_3768() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xFD5E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma LParen XIY expr RParen End
void Parser::parse_main_action_3769() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xFD5E);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma LParen YHL RParen End
void Parser::parse_main_action_3770() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0x5E);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma LParen YIX RParen End
void Parser::parse_main_action_3771() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xDD5E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma LParen YIX expr RParen End
void Parser::parse_main_action_3772() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xDD5E);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma LParen YIY RParen End
void Parser::parse_main_action_3773() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xFD5E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma LParen YIY expr RParen End
void Parser::parse_main_action_3774() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xFD5E);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma LParen ZHL RParen End
void Parser::parse_main_action_3775() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0x5E);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma LParen ZIX RParen End
void Parser::parse_main_action_3776() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xDD5E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma LParen ZIX expr RParen End
void Parser::parse_main_action_3777() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xDD5E);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma LParen ZIY RParen End
void Parser::parse_main_action_3778() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xFD5E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma LParen ZIY expr RParen End
void Parser::parse_main_action_3779() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xFD5E);
	break;
	default:
	error_illegal_ident(); }
}

// LD E Comma expr End | MVI E Comma expr End
void Parser::parse_main_action_3780() {
	warn_if_expr_in_parens();
	add_opcode_n(0x1E);
}

// LD EIR Comma A End
void Parser::parse_main_action_3781() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xED47);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma A End | MOV H Comma A End
void Parser::parse_main_action_3782() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x67);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F67);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma B End | MOV H Comma B End
void Parser::parse_main_action_3783() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x60);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F60);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma C End | MOV H Comma C End
void Parser::parse_main_action_3784() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x61);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F61);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma D End | MOV H Comma D End
void Parser::parse_main_action_3785() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x62);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F62);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma E End | MOV H Comma E End
void Parser::parse_main_action_3786() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x63);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F63);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma H End | MOV H Comma H End
void Parser::parse_main_action_3787() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x64);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F64);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma L End | MOV H Comma L End
void Parser::parse_main_action_3788() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x65);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F65);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma RES const_expr Comma LParen IX RParen End | RES const_expr Comma LParen IX RParen Comma H End
void Parser::parse_main_action_3789() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xDDCB0084+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma RES const_expr Comma LParen IX expr RParen End | RES const_expr Comma LParen IX expr RParen Comma H End
void Parser::parse_main_action_3790() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xDDCB84+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma RES const_expr Comma LParen IY RParen End | RES const_expr Comma LParen IY RParen Comma H End
void Parser::parse_main_action_3791() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xFDCB0084+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma RES const_expr Comma LParen IY expr RParen End | RES const_expr Comma LParen IY expr RParen Comma H End
void Parser::parse_main_action_3792() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xFDCB84+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma RL LParen IX RParen End | RL LParen IX RParen Comma H End
void Parser::parse_main_action_3793() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDDCB0014);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma RL LParen IX expr RParen End | RL LParen IX expr RParen Comma H End
void Parser::parse_main_action_3794() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xDDCB14);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma RL LParen IY RParen End | RL LParen IY RParen Comma H End
void Parser::parse_main_action_3795() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFDCB0014);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma RL LParen IY expr RParen End | RL LParen IY expr RParen Comma H End
void Parser::parse_main_action_3796() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xFDCB14);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma RLC LParen IX RParen End | RLC LParen IX RParen Comma H End
void Parser::parse_main_action_3797() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDDCB0004);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma RLC LParen IX expr RParen End | RLC LParen IX expr RParen Comma H End
void Parser::parse_main_action_3798() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xDDCB04);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma RLC LParen IY RParen End | RLC LParen IY RParen Comma H End
void Parser::parse_main_action_3799() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFDCB0004);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma RLC LParen IY expr RParen End | RLC LParen IY expr RParen Comma H End
void Parser::parse_main_action_3800() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xFDCB04);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma RR LParen IX RParen End | RR LParen IX RParen Comma H End
void Parser::parse_main_action_3801() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDDCB001C);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma RR LParen IX expr RParen End | RR LParen IX expr RParen Comma H End
void Parser::parse_main_action_3802() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xDDCB1C);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma RR LParen IY RParen End | RR LParen IY RParen Comma H End
void Parser::parse_main_action_3803() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFDCB001C);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma RR LParen IY expr RParen End | RR LParen IY expr RParen Comma H End
void Parser::parse_main_action_3804() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xFDCB1C);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma RRC LParen IX RParen End | RRC LParen IX RParen Comma H End
void Parser::parse_main_action_3805() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDDCB000C);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma RRC LParen IX expr RParen End | RRC LParen IX expr RParen Comma H End
void Parser::parse_main_action_3806() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xDDCB0C);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma RRC LParen IY RParen End | RRC LParen IY RParen Comma H End
void Parser::parse_main_action_3807() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFDCB000C);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma RRC LParen IY expr RParen End | RRC LParen IY expr RParen Comma H End
void Parser::parse_main_action_3808() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xFDCB0C);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma SET const_expr Comma LParen IX RParen End | SET const_expr Comma LParen IX RParen Comma H End
void Parser::parse_main_action_3809() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xDDCB00C4+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma SET const_expr Comma LParen IX expr RParen End | SET const_expr Comma LParen IX expr RParen Comma H End
void Parser::parse_main_action_3810() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xDDCBC4+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma SET const_expr Comma LParen IY RParen End | SET const_expr Comma LParen IY RParen Comma H End
void Parser::parse_main_action_3811() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xFDCB00C4+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma SET const_expr Comma LParen IY expr RParen End | SET const_expr Comma LParen IY expr RParen Comma H End
void Parser::parse_main_action_3812() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xFDCBC4+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma SLA LParen IX RParen End | SLA LParen IX RParen Comma H End
void Parser::parse_main_action_3813() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDDCB0024);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma SLA LParen IX expr RParen End | SLA LParen IX expr RParen Comma H End
void Parser::parse_main_action_3814() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xDDCB24);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma SLA LParen IY RParen End | SLA LParen IY RParen Comma H End
void Parser::parse_main_action_3815() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFDCB0024);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma SLA LParen IY expr RParen End | SLA LParen IY expr RParen Comma H End
void Parser::parse_main_action_3816() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xFDCB24);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma SLI LParen IX RParen End | LD H Comma SLL LParen IX RParen End | LD H Comma SLS LParen IX RParen End | SLI LParen IX RParen Comma H End | SLL LParen IX RParen Comma H End | SLS LParen IX RParen Comma H End
void Parser::parse_main_action_3817() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDDCB0034);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma SLI LParen IX expr RParen End | LD H Comma SLL LParen IX expr RParen End | LD H Comma SLS LParen IX expr RParen End | SLI LParen IX expr RParen Comma H End | SLL LParen IX expr RParen Comma H End | SLS LParen IX expr RParen Comma H End
void Parser::parse_main_action_3818() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xDDCB34);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma SLI LParen IY RParen End | LD H Comma SLL LParen IY RParen End | LD H Comma SLS LParen IY RParen End | SLI LParen IY RParen Comma H End | SLL LParen IY RParen Comma H End | SLS LParen IY RParen Comma H End
void Parser::parse_main_action_3819() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFDCB0034);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma SLI LParen IY expr RParen End | LD H Comma SLL LParen IY expr RParen End | LD H Comma SLS LParen IY expr RParen End | SLI LParen IY expr RParen Comma H End | SLL LParen IY expr RParen Comma H End | SLS LParen IY expr RParen Comma H End
void Parser::parse_main_action_3820() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xFDCB34);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma SRA LParen IX RParen End | SRA LParen IX RParen Comma H End
void Parser::parse_main_action_3821() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDDCB002C);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma SRA LParen IX expr RParen End | SRA LParen IX expr RParen Comma H End
void Parser::parse_main_action_3822() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xDDCB2C);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma SRA LParen IY RParen End | SRA LParen IY RParen Comma H End
void Parser::parse_main_action_3823() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFDCB002C);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma SRA LParen IY expr RParen End | SRA LParen IY expr RParen Comma H End
void Parser::parse_main_action_3824() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xFDCB2C);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma SRL LParen IX RParen End | SRL LParen IX RParen Comma H End
void Parser::parse_main_action_3825() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDDCB003C);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma SRL LParen IX expr RParen End | SRL LParen IX expr RParen Comma H End
void Parser::parse_main_action_3826() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xDDCB3C);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma SRL LParen IY RParen End | SRL LParen IY RParen Comma H End
void Parser::parse_main_action_3827() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFDCB003C);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma SRL LParen IY expr RParen End | SRL LParen IY expr RParen Comma H End
void Parser::parse_main_action_3828() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xFDCB3C);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma LParen AHL RParen End
void Parser::parse_main_action_3829() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0x66);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma LParen AIX RParen End
void Parser::parse_main_action_3830() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xDD6600);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma LParen AIX expr RParen End
void Parser::parse_main_action_3831() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xDD66);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma LParen AIY RParen End
void Parser::parse_main_action_3832() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xFD6600);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma LParen AIY expr RParen End
void Parser::parse_main_action_3833() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xFD66);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma LParen DE Minus RParen End | LDD H Comma LParen DE RParen End
void Parser::parse_main_action_3834() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xEB);
	add_opcode(0x56);
	add_opcode(0xEB);
	add_opcode(0x1B);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma LParen DE Plus RParen End | LDI H Comma LParen DE RParen End
void Parser::parse_main_action_3835() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xEB);
	add_opcode(0x56);
	add_opcode(0xEB);
	add_opcode(0x13);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma LParen DE RParen End
void Parser::parse_main_action_3836() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xEB);
	add_opcode(0x56);
	add_opcode(0xEB);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma LParen HL Minus RParen End | LD H Comma LParen HLD RParen End | LDD H Comma LParen HL RParen End
void Parser::parse_main_action_3837() {
	add_opcode(0x66);
	add_opcode(0x2B);
}

// LD H Comma LParen HL Plus RParen End | LD H Comma LParen HLI RParen End | LDI H Comma LParen HL RParen End
void Parser::parse_main_action_3838() {
	add_opcode(0x66);
	add_opcode(0x23);
}

// LD H Comma LParen HL RParen End | MOV H Comma M End
void Parser::parse_main_action_3839() {
	add_opcode(0x66);
}

// LD H Comma LParen IX RParen End
void Parser::parse_main_action_3840() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xDD6600);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma LParen IX expr RParen End
void Parser::parse_main_action_3841() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx(0xDD66);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma LParen IY RParen End
void Parser::parse_main_action_3842() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xFD6600);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma LParen IY expr RParen End
void Parser::parse_main_action_3843() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx(0xFD66);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma LParen PHL RParen End
void Parser::parse_main_action_3844() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0x66);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma LParen PIX RParen End
void Parser::parse_main_action_3845() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xDD6600);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma LParen PIX expr RParen End
void Parser::parse_main_action_3846() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xDD66);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma LParen PIY RParen End
void Parser::parse_main_action_3847() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xFD6600);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma LParen PIY expr RParen End
void Parser::parse_main_action_3848() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xFD66);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma LParen XHL RParen End
void Parser::parse_main_action_3849() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0x66);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma LParen XIX RParen End
void Parser::parse_main_action_3850() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xDD6600);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma LParen XIX expr RParen End
void Parser::parse_main_action_3851() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xDD66);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma LParen XIY RParen End
void Parser::parse_main_action_3852() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xFD6600);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma LParen XIY expr RParen End
void Parser::parse_main_action_3853() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xFD66);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma LParen YHL RParen End
void Parser::parse_main_action_3854() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0x66);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma LParen YIX RParen End
void Parser::parse_main_action_3855() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xDD6600);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma LParen YIX expr RParen End
void Parser::parse_main_action_3856() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xDD66);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma LParen YIY RParen End
void Parser::parse_main_action_3857() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xFD6600);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma LParen YIY expr RParen End
void Parser::parse_main_action_3858() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xFD66);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma LParen ZHL RParen End
void Parser::parse_main_action_3859() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0x66);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma LParen ZIX RParen End
void Parser::parse_main_action_3860() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xDD6600);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma LParen ZIX expr RParen End
void Parser::parse_main_action_3861() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xDD66);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma LParen ZIY RParen End
void Parser::parse_main_action_3862() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xFD6600);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma LParen ZIY expr RParen End
void Parser::parse_main_action_3863() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xFD66);
	break;
	default:
	error_illegal_ident(); }
}

// LD H Comma expr End | MVI H Comma expr End
void Parser::parse_main_action_3864() {
	warn_if_expr_in_parens();
	add_opcode_n(0x26);
}

// LD HL Comma BC End
void Parser::parse_main_action_3865() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x60);
	add_opcode(0x69);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x81);
	break;
	default:
	error_illegal_ident(); }
}

// LD HL Comma BC1 End
void Parser::parse_main_action_3866() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD9);
	add_opcode(0xC5);
	add_opcode(0xD9);
	add_opcode(0xE1);
	break;
	default:
	error_illegal_ident(); }
}

// LD HL Comma DE End
void Parser::parse_main_action_3867() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x62);
	add_opcode(0x6B);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xA1);
	break;
	default:
	error_illegal_ident(); }
}

// LD HL Comma DE1 End
void Parser::parse_main_action_3868() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD9);
	add_opcode(0xD5);
	add_opcode(0xD9);
	add_opcode(0xE1);
	break;
	default:
	error_illegal_ident(); }
}

// LD HL Comma HL1 End
void Parser::parse_main_action_3869() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD9);
	add_opcode(0xE5);
	add_opcode(0xD9);
	add_opcode(0xE1);
	break;
	default:
	error_illegal_ident(); }
}

// LD HL Comma I End
void Parser::parse_main_action_3870() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xEDD7);
	break;
	default:
	error_illegal_ident(); }
}

// LD HL Comma IX End
void Parser::parse_main_action_3871() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDD7C);
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xDDE5);
	add_opcode(0xE1);
	break;
	default:
	error_illegal_ident(); }
}

// LD HL Comma IY End
void Parser::parse_main_action_3872() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFD7C);
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xFDE5);
	add_opcode(0xE1);
	break;
	default:
	error_illegal_ident(); }
}

// LD HL Comma LXPC End
void Parser::parse_main_action_3873() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x9F);
	break;
	default:
	error_illegal_ident(); }
}

// LD HL Comma SP End
void Parser::parse_main_action_3874() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x210000);
	add_opcode(0x39);
	break;
	case CPU_8085: 
	add_opcode(0xEB);
	add_opcode(0x3800);
	add_opcode(0xEB);
	break;
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xED26);
	break;
	case CPU_GBZ80: 
	add_opcode(0xF800);
	break;
	default:
	error_illegal_ident(); }
}

// LD HL Comma SP expr End
void Parser::parse_main_action_3875() {
	switch (g_args.cpu()) {
	case CPU_8085: 
	add_opcode(0xEB);
	add_opcode_n(0x38);
	add_opcode(0xEB);
	break;
	case CPU_GBZ80: 
	warn_if_expr_in_parens();
	add_opcode_s(0xF8);
	break;
	case CPU_8080: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_opcode_s_0(0x21);
	add_opcode(0x39);
	break;
	default:
	error_illegal_ident(); }
}

// LD HL Comma LParen A Colon expr RParen End
void Parser::parse_main_action_3876() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	add_opcode_nn(0x2A, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD HL Comma LParen AIX RParen End
void Parser::parse_main_action_3877() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xEDAD00);
	break;
	default:
	error_illegal_ident(); }
}

// LD HL Comma LParen AIX expr RParen End
void Parser::parse_main_action_3878() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xEDAD);
	break;
	default:
	error_illegal_ident(); }
}

// LD HL Comma LParen AIY RParen End
void Parser::parse_main_action_3879() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xEDAC00);
	break;
	default:
	error_illegal_ident(); }
}

// LD HL Comma LParen AIY expr RParen End
void Parser::parse_main_action_3880() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xEDAC);
	break;
	default:
	error_illegal_ident(); }
}

// LD HL Comma LParen DE RParen End | LHLDE End | LHLX End
void Parser::parse_main_action_3881() {
	switch (g_args.cpu()) {
	case CPU_8085: 
	add_opcode(0xED);
	break;
	default:
	error_illegal_ident(); }
}

// LD HL Comma LParen HL Plus RParen End | LDI HL Comma LParen HL RParen End
void Parser::parse_main_action_3882() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xED27);
	add_opcode(0x23);
	add_opcode(0x23);
	break;
	case CPU_8080: case CPU_8085: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xF5);
	add_opcode(0x7E);
	add_opcode(0x23);
	add_opcode(0x66);
	add_opcode(0x6F);
	add_opcode(0xF1);
	break;
	default:
	error_illegal_ident(); }
}

// LD HL Comma LParen HL RParen End
void Parser::parse_main_action_3883() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDDE400);
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xED27);
	break;
	case CPU_8080: case CPU_8085: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xF5);
	add_opcode(0x7E);
	add_opcode(0x23);
	add_opcode(0x66);
	add_opcode(0x6F);
	add_opcode(0xF1);
	break;
	default:
	error_illegal_ident(); }
}

// LD HL Comma LParen HL expr RParen End
void Parser::parse_main_action_3884() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0xDDE4);
	break;
	default:
	error_illegal_ident(); }
}

// LD HL Comma LParen IX RParen End
void Parser::parse_main_action_3885() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xDD2700);
	break;
	case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xDD6E00);
	add_opcode(0xDD6601);
	break;
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xE400);
	break;
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xEDAD00);
	break;
	default:
	error_illegal_ident(); }
}

// LD HL Comma LParen IX expr RParen End
void Parser::parse_main_action_3886() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode_idx(0xDD27);
	break;
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0xE4);
	break;
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode_idx(0xEDAD);
	break;
	case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx_idx1(0xDD6E, 0xDD66);
	break;
	default:
	error_illegal_ident(); }
}

// LD HL Comma LParen IY RParen End
void Parser::parse_main_action_3887() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xEDAC00);
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xFD2700);
	break;
	case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xFD6E00);
	add_opcode(0xFD6601);
	break;
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFDE400);
	break;
	default:
	error_illegal_ident(); }
}

// LD HL Comma LParen IY expr RParen End
void Parser::parse_main_action_3888() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode_idx(0xEDAC);
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode_idx(0xFD27);
	break;
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0xFDE4);
	break;
	case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx_idx1(0xFD6E, 0xFD66);
	break;
	default:
	error_illegal_ident(); }
}

// LD HL Comma LParen PIX RParen End
void Parser::parse_main_action_3889() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xEDAD00);
	break;
	default:
	error_illegal_ident(); }
}

// LD HL Comma LParen PIX expr RParen End
void Parser::parse_main_action_3890() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xEDAD);
	break;
	default:
	error_illegal_ident(); }
}

// LD HL Comma LParen PIY RParen End
void Parser::parse_main_action_3891() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xEDAC00);
	break;
	default:
	error_illegal_ident(); }
}

// LD HL Comma LParen PIY expr RParen End
void Parser::parse_main_action_3892() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xEDAC);
	break;
	default:
	error_illegal_ident(); }
}

// LD HL Comma LParen PP Colon expr RParen End
void Parser::parse_main_action_3893() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x5B);
	add_opcode_nn(0x2A, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD HL Comma LParen PW Plus BC RParen End
void Parser::parse_main_action_3894() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xED06);
	break;
	default:
	error_illegal_ident(); }
}

// LD HL Comma LParen PW RParen End
void Parser::parse_main_action_3895() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x8500);
	break;
	default:
	error_illegal_ident(); }
}

// LD HL Comma LParen PW expr RParen End
void Parser::parse_main_action_3896() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x85);
	break;
	default:
	error_illegal_ident(); }
}

// LD HL Comma LParen PX Plus BC RParen End
void Parser::parse_main_action_3897() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xED16);
	break;
	default:
	error_illegal_ident(); }
}

// LD HL Comma LParen PX RParen End
void Parser::parse_main_action_3898() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x9500);
	break;
	default:
	error_illegal_ident(); }
}

// LD HL Comma LParen PX expr RParen End
void Parser::parse_main_action_3899() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x95);
	break;
	default:
	error_illegal_ident(); }
}

// LD HL Comma LParen PY Plus BC RParen End
void Parser::parse_main_action_3900() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xED26);
	break;
	default:
	error_illegal_ident(); }
}

// LD HL Comma LParen PY RParen End
void Parser::parse_main_action_3901() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xA500);
	break;
	default:
	error_illegal_ident(); }
}

// LD HL Comma LParen PY expr RParen End
void Parser::parse_main_action_3902() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0xA5);
	break;
	default:
	error_illegal_ident(); }
}

// LD HL Comma LParen PZ Plus BC RParen End
void Parser::parse_main_action_3903() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xED36);
	break;
	default:
	error_illegal_ident(); }
}

// LD HL Comma LParen PZ RParen End
void Parser::parse_main_action_3904() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xB500);
	break;
	default:
	error_illegal_ident(); }
}

// LD HL Comma LParen PZ expr RParen End
void Parser::parse_main_action_3905() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0xB5);
	break;
	default:
	error_illegal_ident(); }
}

// LD HL Comma LParen SP Plus HL RParen End
void Parser::parse_main_action_3906() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xEDFE);
	break;
	default:
	error_illegal_ident(); }
}

// LD HL Comma LParen SP RParen End
void Parser::parse_main_action_3907() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xC400);
	break;
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xEDAE00);
	break;
	default:
	error_illegal_ident(); }
}

// LD HL Comma LParen SP expr RParen End
void Parser::parse_main_action_3908() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode_idx(0xEDAE);
	break;
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode_n(0xC4);
	break;
	default:
	error_illegal_ident(); }
}

// LD HL Comma LParen XIX RParen End
void Parser::parse_main_action_3909() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xEDAD00);
	break;
	default:
	error_illegal_ident(); }
}

// LD HL Comma LParen XIX expr RParen End
void Parser::parse_main_action_3910() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xEDAD);
	break;
	default:
	error_illegal_ident(); }
}

// LD HL Comma LParen XIY RParen End
void Parser::parse_main_action_3911() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xEDAC00);
	break;
	default:
	error_illegal_ident(); }
}

// LD HL Comma LParen XIY expr RParen End
void Parser::parse_main_action_3912() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xEDAC);
	break;
	default:
	error_illegal_ident(); }
}

// LD HL Comma LParen XP Colon expr RParen End
void Parser::parse_main_action_3913() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x40);
	add_opcode_nn(0x2A, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD HL Comma LParen YIX RParen End
void Parser::parse_main_action_3914() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xEDAD00);
	break;
	default:
	error_illegal_ident(); }
}

// LD HL Comma LParen YIX expr RParen End
void Parser::parse_main_action_3915() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xEDAD);
	break;
	default:
	error_illegal_ident(); }
}

// LD HL Comma LParen YIY RParen End
void Parser::parse_main_action_3916() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xEDAC00);
	break;
	default:
	error_illegal_ident(); }
}

// LD HL Comma LParen YIY expr RParen End
void Parser::parse_main_action_3917() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xEDAC);
	break;
	default:
	error_illegal_ident(); }
}

// LD HL Comma LParen YP Colon expr RParen End
void Parser::parse_main_action_3918() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	add_opcode_nn(0x2A, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD HL Comma LParen ZIX RParen End
void Parser::parse_main_action_3919() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xEDAD00);
	break;
	default:
	error_illegal_ident(); }
}

// LD HL Comma LParen ZIX expr RParen End
void Parser::parse_main_action_3920() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xEDAD);
	break;
	default:
	error_illegal_ident(); }
}

// LD HL Comma LParen ZIY RParen End
void Parser::parse_main_action_3921() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xEDAC00);
	break;
	default:
	error_illegal_ident(); }
}

// LD HL Comma LParen ZIY expr RParen End
void Parser::parse_main_action_3922() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xEDAC);
	break;
	default:
	error_illegal_ident(); }
}

// LD HL Comma LParen ZP Colon expr RParen End
void Parser::parse_main_action_3923() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x7F);
	add_opcode_nn(0x2A, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD HL Comma expr End
void Parser::parse_main_action_3924() {
	switch (g_args.cpu()) {
	case CPU_GBZ80: 
	if (expr_in_parens()) { add_opcode(0xD5);
	add_opcode_nn(0x21, 0);
	add_opcode(0x5E);
	add_opcode(0x23);
	add_opcode(0x56);
	add_opcode(0x62);
	add_opcode(0x6B);
	add_opcode(0xD1); } else { add_opcode_nn(0x21, 0); }
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	if (expr_in_parens()) { add_opcode_nn(0x2A, 0); } else { add_opcode_nn(0x21, 0); }
	break;
	case CPU_EZ80: 
	if (expr_in_parens()) { add_opcode_nnn(0x2A, 0); } else { add_opcode_nnn(0x21, 0); }
	break;
	default:
	error_illegal_ident(); }
}

// LD HL1 Comma BC1 End
void Parser::parse_main_action_3925() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD9);
	add_opcode(0xC5);
	add_opcode(0xD9);
	add_opcode(0x76);
	add_opcode(0xE1);
	break;
	default:
	error_illegal_ident(); }
}

// LD HL1 Comma DE1 End
void Parser::parse_main_action_3926() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD9);
	add_opcode(0xD5);
	add_opcode(0xD9);
	add_opcode(0x76);
	add_opcode(0xE1);
	break;
	default:
	error_illegal_ident(); }
}

// LD HL1 Comma HL End
void Parser::parse_main_action_3927() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xE5);
	add_opcode(0x76);
	add_opcode(0xE1);
	break;
	default:
	error_illegal_ident(); }
}

// LD HL1 Comma HL1 End
void Parser::parse_main_action_3928() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD9);
	add_opcode(0xE5);
	add_opcode(0xD9);
	add_opcode(0x76);
	add_opcode(0xE1);
	break;
	default:
	error_illegal_ident(); }
}

// LD HTR Comma A End
void Parser::parse_main_action_3929() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xED40);
	break;
	default:
	error_illegal_ident(); }
}

// LD I Comma A End
void Parser::parse_main_action_3930() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xED47);
	break;
	default:
	error_illegal_ident(); }
}

// LD I Comma HL End
void Parser::parse_main_action_3931() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xEDC7);
	break;
	default:
	error_illegal_ident(); }
}

// LD IIR Comma A End
void Parser::parse_main_action_3932() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xED4F);
	break;
	default:
	error_illegal_ident(); }
}

// LD IX Comma BC End
void Parser::parse_main_action_3933() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_Z180: case CPU_Z80_STRICT: 
	add_opcode(0xC5);
	add_opcode(0xDDE1);
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDD60);
	add_opcode(0xDD69);
	break;
	default:
	error_illegal_ident(); }
}

// LD IX Comma BC1 End
void Parser::parse_main_action_3934() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD9);
	add_opcode(0xC5);
	add_opcode(0xD9);
	add_opcode(0xDDE1);
	break;
	default:
	error_illegal_ident(); }
}

// LD IX Comma DE End
void Parser::parse_main_action_3935() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_Z180: case CPU_Z80_STRICT: 
	add_opcode(0xD5);
	add_opcode(0xDDE1);
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDD62);
	add_opcode(0xDD6B);
	break;
	default:
	error_illegal_ident(); }
}

// LD IX Comma DE1 End
void Parser::parse_main_action_3936() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD9);
	add_opcode(0xD5);
	add_opcode(0xD9);
	add_opcode(0xDDE1);
	break;
	default:
	error_illegal_ident(); }
}

// LD IX Comma HL End
void Parser::parse_main_action_3937() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDD7D);
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xE5);
	add_opcode(0xDDE1);
	break;
	default:
	error_illegal_ident(); }
}

// LD IX Comma HL1 End
void Parser::parse_main_action_3938() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD9);
	add_opcode(0xE5);
	add_opcode(0xD9);
	add_opcode(0xDDE1);
	break;
	default:
	error_illegal_ident(); }
}

// LD IX Comma IY End
void Parser::parse_main_action_3939() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xFDE5);
	add_opcode(0xDDE1);
	break;
	default:
	error_illegal_ident(); }
}

// LD IX Comma SP End
void Parser::parse_main_action_3940() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xED06);
	break;
	default:
	error_illegal_ident(); }
}

// LD IX Comma LParen A Colon expr RParen End
void Parser::parse_main_action_3941() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	add_opcode_nn(0xDD2A, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD IX Comma LParen AIX RParen End
void Parser::parse_main_action_3942() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xED8900);
	break;
	default:
	error_illegal_ident(); }
}

// LD IX Comma LParen AIX expr RParen End
void Parser::parse_main_action_3943() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xED89);
	break;
	default:
	error_illegal_ident(); }
}

// LD IX Comma LParen AIY RParen End
void Parser::parse_main_action_3944() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xED8800);
	break;
	default:
	error_illegal_ident(); }
}

// LD IX Comma LParen AIY expr RParen End
void Parser::parse_main_action_3945() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xED88);
	break;
	default:
	error_illegal_ident(); }
}

// LD IX Comma LParen HL Plus RParen End | LDI IX Comma LParen HL RParen End
void Parser::parse_main_action_3946() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xD5);
	add_opcode(0x5E);
	add_opcode(0x23);
	add_opcode(0x56);
	add_opcode(0x23);
	add_opcode(0xD5);
	add_opcode(0xDDE1);
	add_opcode(0xD1);
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xED37);
	add_opcode(0x23);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// LD IX Comma LParen HL RParen End
void Parser::parse_main_action_3947() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xD5);
	add_opcode(0x5E);
	add_opcode(0x23);
	add_opcode(0x56);
	add_opcode(0x2B);
	add_opcode(0xD5);
	add_opcode(0xDDE1);
	add_opcode(0xD1);
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xED37);
	break;
	default:
	error_illegal_ident(); }
}

// LD IX Comma LParen IX RParen End
void Parser::parse_main_action_3948() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xDD3700);
	break;
	case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xDDE5);
	add_opcode(0xE3);
	add_opcode(0xDD6E00);
	add_opcode(0xDD6601);
	add_opcode(0xE3);
	add_opcode(0xDDE1);
	break;
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDDE5);
	add_opcode(0xED54);
	add_opcode(0xDD6E00);
	add_opcode(0xDD6601);
	add_opcode(0xED54);
	add_opcode(0xDDE1);
	break;
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xED8900);
	break;
	default:
	error_illegal_ident(); }
}

// LD IX Comma LParen IX expr RParen End
void Parser::parse_main_action_3949() {
	switch (g_args.cpu()) {
	case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xDDE5);
	add_opcode(0xE3);
	add_opcode_idx_idx1(0xDD6E, 0xDD66);
	add_opcode(0xE3);
	add_opcode(0xDDE1);
	break;
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDDE5);
	add_opcode(0xED54);
	add_opcode_idx_idx1(0xDD6E, 0xDD66);
	add_opcode(0xED54);
	add_opcode(0xDDE1);
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode_idx(0xDD37);
	break;
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode_idx(0xED89);
	break;
	default:
	error_illegal_ident(); }
}

// LD IX Comma LParen IY RParen End
void Parser::parse_main_action_3950() {
	switch (g_args.cpu()) {
	case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xDDE5);
	add_opcode(0xE3);
	add_opcode(0xFD6E00);
	add_opcode(0xFD6601);
	add_opcode(0xE3);
	add_opcode(0xDDE1);
	break;
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDDE5);
	add_opcode(0xED54);
	add_opcode(0xFD6E00);
	add_opcode(0xFD6601);
	add_opcode(0xED54);
	add_opcode(0xDDE1);
	break;
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xED8800);
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xFD3100);
	break;
	default:
	error_illegal_ident(); }
}

// LD IX Comma LParen IY expr RParen End
void Parser::parse_main_action_3951() {
	switch (g_args.cpu()) {
	case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xDDE5);
	add_opcode(0xE3);
	add_opcode_idx_idx1(0xFD6E, 0xFD66);
	add_opcode(0xE3);
	add_opcode(0xDDE1);
	break;
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDDE5);
	add_opcode(0xED54);
	add_opcode_idx_idx1(0xFD6E, 0xFD66);
	add_opcode(0xED54);
	add_opcode(0xDDE1);
	break;
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode_idx(0xED88);
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode_idx(0xFD31);
	break;
	default:
	error_illegal_ident(); }
}

// LD IX Comma LParen PIX RParen End
void Parser::parse_main_action_3952() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xED8900);
	break;
	default:
	error_illegal_ident(); }
}

// LD IX Comma LParen PIX expr RParen End
void Parser::parse_main_action_3953() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xED89);
	break;
	default:
	error_illegal_ident(); }
}

// LD IX Comma LParen PIY RParen End
void Parser::parse_main_action_3954() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xED8800);
	break;
	default:
	error_illegal_ident(); }
}

// LD IX Comma LParen PIY expr RParen End
void Parser::parse_main_action_3955() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xED88);
	break;
	default:
	error_illegal_ident(); }
}

// LD IX Comma LParen PP Colon expr RParen End
void Parser::parse_main_action_3956() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x5B);
	add_opcode_nn(0xDD2A, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD IX Comma LParen PW Plus HL RParen End
void Parser::parse_main_action_3957() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D82);
	break;
	default:
	error_illegal_ident(); }
}

// LD IX Comma LParen PW RParen End
void Parser::parse_main_action_3958() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D8000);
	break;
	default:
	error_illegal_ident(); }
}

// LD IX Comma LParen PW expr RParen End
void Parser::parse_main_action_3959() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x6D80);
	break;
	default:
	error_illegal_ident(); }
}

// LD IX Comma LParen PX Plus HL RParen End
void Parser::parse_main_action_3960() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D92);
	break;
	default:
	error_illegal_ident(); }
}

// LD IX Comma LParen PX RParen End
void Parser::parse_main_action_3961() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D9000);
	break;
	default:
	error_illegal_ident(); }
}

// LD IX Comma LParen PX expr RParen End
void Parser::parse_main_action_3962() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x6D90);
	break;
	default:
	error_illegal_ident(); }
}

// LD IX Comma LParen PY Plus HL RParen End
void Parser::parse_main_action_3963() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DA2);
	break;
	default:
	error_illegal_ident(); }
}

// LD IX Comma LParen PY RParen End
void Parser::parse_main_action_3964() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DA000);
	break;
	default:
	error_illegal_ident(); }
}

// LD IX Comma LParen PY expr RParen End
void Parser::parse_main_action_3965() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x6DA0);
	break;
	default:
	error_illegal_ident(); }
}

// LD IX Comma LParen PZ Plus HL RParen End
void Parser::parse_main_action_3966() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DB2);
	break;
	default:
	error_illegal_ident(); }
}

// LD IX Comma LParen PZ RParen End
void Parser::parse_main_action_3967() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DB000);
	break;
	default:
	error_illegal_ident(); }
}

// LD IX Comma LParen PZ expr RParen End
void Parser::parse_main_action_3968() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x6DB0);
	break;
	default:
	error_illegal_ident(); }
}

// LD IX Comma LParen SP RParen End
void Parser::parse_main_action_3969() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDDC400);
	break;
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xED8A00);
	break;
	default:
	error_illegal_ident(); }
}

// LD IX Comma LParen SP expr RParen End
void Parser::parse_main_action_3970() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode_idx(0xED8A);
	break;
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode_n(0xDDC4);
	break;
	default:
	error_illegal_ident(); }
}

// LD IX Comma LParen XIX RParen End
void Parser::parse_main_action_3971() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xED8900);
	break;
	default:
	error_illegal_ident(); }
}

// LD IX Comma LParen XIX expr RParen End
void Parser::parse_main_action_3972() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xED89);
	break;
	default:
	error_illegal_ident(); }
}

// LD IX Comma LParen XIY RParen End
void Parser::parse_main_action_3973() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xED8800);
	break;
	default:
	error_illegal_ident(); }
}

// LD IX Comma LParen XIY expr RParen End
void Parser::parse_main_action_3974() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xED88);
	break;
	default:
	error_illegal_ident(); }
}

// LD IX Comma LParen XP Colon expr RParen End
void Parser::parse_main_action_3975() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x40);
	add_opcode_nn(0xDD2A, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD IX Comma LParen YIX RParen End
void Parser::parse_main_action_3976() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xED8900);
	break;
	default:
	error_illegal_ident(); }
}

// LD IX Comma LParen YIX expr RParen End
void Parser::parse_main_action_3977() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xED89);
	break;
	default:
	error_illegal_ident(); }
}

// LD IX Comma LParen YIY RParen End
void Parser::parse_main_action_3978() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xED8800);
	break;
	default:
	error_illegal_ident(); }
}

// LD IX Comma LParen YIY expr RParen End
void Parser::parse_main_action_3979() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xED88);
	break;
	default:
	error_illegal_ident(); }
}

// LD IX Comma LParen YP Colon expr RParen End
void Parser::parse_main_action_3980() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	add_opcode_nn(0xDD2A, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD IX Comma LParen ZIX RParen End
void Parser::parse_main_action_3981() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xED8900);
	break;
	default:
	error_illegal_ident(); }
}

// LD IX Comma LParen ZIX expr RParen End
void Parser::parse_main_action_3982() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xED89);
	break;
	default:
	error_illegal_ident(); }
}

// LD IX Comma LParen ZIY RParen End
void Parser::parse_main_action_3983() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xED8800);
	break;
	default:
	error_illegal_ident(); }
}

// LD IX Comma LParen ZIY expr RParen End
void Parser::parse_main_action_3984() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xED88);
	break;
	default:
	error_illegal_ident(); }
}

// LD IX Comma LParen ZP Colon expr RParen End
void Parser::parse_main_action_3985() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x7F);
	add_opcode_nn(0xDD2A, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD IX Comma expr End
void Parser::parse_main_action_3986() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	if (expr_in_parens()) { add_opcode_nn(0xDD2A, 0); } else { add_opcode_nn(0xDD21, 0); }
	break;
	case CPU_EZ80: 
	if (expr_in_parens()) { add_opcode_nnn(0xDD2A, 0); } else { add_opcode_nnn(0xDD21, 0); }
	break;
	default:
	error_illegal_ident(); }
}

// LD IXH Comma A End
void Parser::parse_main_action_3987() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDD67);
	break;
	default:
	error_illegal_ident(); }
}

// LD IXH Comma B End
void Parser::parse_main_action_3988() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDD60);
	break;
	default:
	error_illegal_ident(); }
}

// LD IXH Comma C End
void Parser::parse_main_action_3989() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDD61);
	break;
	default:
	error_illegal_ident(); }
}

// LD IXH Comma D End
void Parser::parse_main_action_3990() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDD62);
	break;
	default:
	error_illegal_ident(); }
}

// LD IXH Comma E End
void Parser::parse_main_action_3991() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDD63);
	break;
	default:
	error_illegal_ident(); }
}

// LD IXH Comma IXH End
void Parser::parse_main_action_3992() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDD64);
	break;
	default:
	error_illegal_ident(); }
}

// LD IXH Comma IXL End
void Parser::parse_main_action_3993() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDD65);
	break;
	default:
	error_illegal_ident(); }
}

// LD IXH Comma expr End
void Parser::parse_main_action_3994() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_opcode_n(0xDD26);
	break;
	default:
	error_illegal_ident(); }
}

// LD IXL Comma A End
void Parser::parse_main_action_3995() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDD6F);
	break;
	default:
	error_illegal_ident(); }
}

// LD IXL Comma B End
void Parser::parse_main_action_3996() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDD68);
	break;
	default:
	error_illegal_ident(); }
}

// LD IXL Comma C End
void Parser::parse_main_action_3997() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDD69);
	break;
	default:
	error_illegal_ident(); }
}

// LD IXL Comma D End
void Parser::parse_main_action_3998() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDD6A);
	break;
	default:
	error_illegal_ident(); }
}

// LD IXL Comma E End
void Parser::parse_main_action_3999() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDD6B);
	break;
	default:
	error_illegal_ident(); }
}

// LD IXL Comma IXH End
void Parser::parse_main_action_4000() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDD6C);
	break;
	default:
	error_illegal_ident(); }
}

// LD IXL Comma IXL End
void Parser::parse_main_action_4001() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDD6D);
	break;
	default:
	error_illegal_ident(); }
}

// LD IXL Comma expr End
void Parser::parse_main_action_4002() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_opcode_n(0xDD2E);
	break;
	default:
	error_illegal_ident(); }
}

// LD IY Comma BC End
void Parser::parse_main_action_4003() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_Z180: case CPU_Z80_STRICT: 
	add_opcode(0xC5);
	add_opcode(0xFDE1);
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFD60);
	add_opcode(0xFD69);
	break;
	default:
	error_illegal_ident(); }
}

// LD IY Comma BC1 End
void Parser::parse_main_action_4004() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD9);
	add_opcode(0xC5);
	add_opcode(0xD9);
	add_opcode(0xFDE1);
	break;
	default:
	error_illegal_ident(); }
}

// LD IY Comma DE End
void Parser::parse_main_action_4005() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_Z180: case CPU_Z80_STRICT: 
	add_opcode(0xD5);
	add_opcode(0xFDE1);
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFD62);
	add_opcode(0xFD6B);
	break;
	default:
	error_illegal_ident(); }
}

// LD IY Comma DE1 End
void Parser::parse_main_action_4006() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD9);
	add_opcode(0xD5);
	add_opcode(0xD9);
	add_opcode(0xFDE1);
	break;
	default:
	error_illegal_ident(); }
}

// LD IY Comma HL End
void Parser::parse_main_action_4007() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xE5);
	add_opcode(0xFDE1);
	break;
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFD7D);
	break;
	default:
	error_illegal_ident(); }
}

// LD IY Comma HL1 End
void Parser::parse_main_action_4008() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD9);
	add_opcode(0xE5);
	add_opcode(0xD9);
	add_opcode(0xFDE1);
	break;
	default:
	error_illegal_ident(); }
}

// LD IY Comma IX End
void Parser::parse_main_action_4009() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xDDE5);
	add_opcode(0xFDE1);
	break;
	default:
	error_illegal_ident(); }
}

// LD IY Comma SP End
void Parser::parse_main_action_4010() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xED16);
	break;
	default:
	error_illegal_ident(); }
}

// LD IY Comma LParen A Colon expr RParen End
void Parser::parse_main_action_4011() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	add_opcode_nn(0xFD2A, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD IY Comma LParen AIX RParen End
void Parser::parse_main_action_4012() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xED9900);
	break;
	default:
	error_illegal_ident(); }
}

// LD IY Comma LParen AIX expr RParen End
void Parser::parse_main_action_4013() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xED99);
	break;
	default:
	error_illegal_ident(); }
}

// LD IY Comma LParen AIY RParen End
void Parser::parse_main_action_4014() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xED9800);
	break;
	default:
	error_illegal_ident(); }
}

// LD IY Comma LParen AIY expr RParen End
void Parser::parse_main_action_4015() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xED98);
	break;
	default:
	error_illegal_ident(); }
}

// LD IY Comma LParen HL Plus RParen End | LDI IY Comma LParen HL RParen End
void Parser::parse_main_action_4016() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xD5);
	add_opcode(0x5E);
	add_opcode(0x23);
	add_opcode(0x56);
	add_opcode(0x23);
	add_opcode(0xD5);
	add_opcode(0xFDE1);
	add_opcode(0xD1);
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xED31);
	add_opcode(0x23);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// LD IY Comma LParen HL RParen End
void Parser::parse_main_action_4017() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xD5);
	add_opcode(0x5E);
	add_opcode(0x23);
	add_opcode(0x56);
	add_opcode(0x2B);
	add_opcode(0xD5);
	add_opcode(0xFDE1);
	add_opcode(0xD1);
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xED31);
	break;
	default:
	error_illegal_ident(); }
}

// LD IY Comma LParen IX RParen End
void Parser::parse_main_action_4018() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xDD3100);
	break;
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xED9900);
	break;
	case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xFDE5);
	add_opcode(0xE3);
	add_opcode(0xDD6E00);
	add_opcode(0xDD6601);
	add_opcode(0xE3);
	add_opcode(0xFDE1);
	break;
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFDE5);
	add_opcode(0xED54);
	add_opcode(0xDD6E00);
	add_opcode(0xDD6601);
	add_opcode(0xED54);
	add_opcode(0xFDE1);
	break;
	default:
	error_illegal_ident(); }
}

// LD IY Comma LParen IX expr RParen End
void Parser::parse_main_action_4019() {
	switch (g_args.cpu()) {
	case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xFDE5);
	add_opcode(0xE3);
	add_opcode_idx_idx1(0xDD6E, 0xDD66);
	add_opcode(0xE3);
	add_opcode(0xFDE1);
	break;
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFDE5);
	add_opcode(0xED54);
	add_opcode_idx_idx1(0xDD6E, 0xDD66);
	add_opcode(0xED54);
	add_opcode(0xFDE1);
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode_idx(0xDD31);
	break;
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode_idx(0xED99);
	break;
	default:
	error_illegal_ident(); }
}

// LD IY Comma LParen IY RParen End
void Parser::parse_main_action_4020() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xED9800);
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xFD3700);
	break;
	case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xFDE5);
	add_opcode(0xE3);
	add_opcode(0xFD6E00);
	add_opcode(0xFD6601);
	add_opcode(0xE3);
	add_opcode(0xFDE1);
	break;
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFDE5);
	add_opcode(0xED54);
	add_opcode(0xFD6E00);
	add_opcode(0xFD6601);
	add_opcode(0xED54);
	add_opcode(0xFDE1);
	break;
	default:
	error_illegal_ident(); }
}

// LD IY Comma LParen IY expr RParen End
void Parser::parse_main_action_4021() {
	switch (g_args.cpu()) {
	case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xFDE5);
	add_opcode(0xE3);
	add_opcode_idx_idx1(0xFD6E, 0xFD66);
	add_opcode(0xE3);
	add_opcode(0xFDE1);
	break;
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFDE5);
	add_opcode(0xED54);
	add_opcode_idx_idx1(0xFD6E, 0xFD66);
	add_opcode(0xED54);
	add_opcode(0xFDE1);
	break;
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode_idx(0xED98);
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode_idx(0xFD37);
	break;
	default:
	error_illegal_ident(); }
}

// LD IY Comma LParen PIX RParen End
void Parser::parse_main_action_4022() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xED9900);
	break;
	default:
	error_illegal_ident(); }
}

// LD IY Comma LParen PIX expr RParen End
void Parser::parse_main_action_4023() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xED99);
	break;
	default:
	error_illegal_ident(); }
}

// LD IY Comma LParen PIY RParen End
void Parser::parse_main_action_4024() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xED9800);
	break;
	default:
	error_illegal_ident(); }
}

// LD IY Comma LParen PIY expr RParen End
void Parser::parse_main_action_4025() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xED98);
	break;
	default:
	error_illegal_ident(); }
}

// LD IY Comma LParen PP Colon expr RParen End
void Parser::parse_main_action_4026() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x5B);
	add_opcode_nn(0xFD2A, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD IY Comma LParen PW Plus HL RParen End
void Parser::parse_main_action_4027() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DC2);
	break;
	default:
	error_illegal_ident(); }
}

// LD IY Comma LParen PW RParen End
void Parser::parse_main_action_4028() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DC000);
	break;
	default:
	error_illegal_ident(); }
}

// LD IY Comma LParen PW expr RParen End
void Parser::parse_main_action_4029() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x6DC0);
	break;
	default:
	error_illegal_ident(); }
}

// LD IY Comma LParen PX Plus HL RParen End
void Parser::parse_main_action_4030() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DD2);
	break;
	default:
	error_illegal_ident(); }
}

// LD IY Comma LParen PX RParen End
void Parser::parse_main_action_4031() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DD000);
	break;
	default:
	error_illegal_ident(); }
}

// LD IY Comma LParen PX expr RParen End
void Parser::parse_main_action_4032() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x6DD0);
	break;
	default:
	error_illegal_ident(); }
}

// LD IY Comma LParen PY Plus HL RParen End
void Parser::parse_main_action_4033() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DE2);
	break;
	default:
	error_illegal_ident(); }
}

// LD IY Comma LParen PY RParen End
void Parser::parse_main_action_4034() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DE000);
	break;
	default:
	error_illegal_ident(); }
}

// LD IY Comma LParen PY expr RParen End
void Parser::parse_main_action_4035() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x6DE0);
	break;
	default:
	error_illegal_ident(); }
}

// LD IY Comma LParen PZ Plus HL RParen End
void Parser::parse_main_action_4036() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DF2);
	break;
	default:
	error_illegal_ident(); }
}

// LD IY Comma LParen PZ RParen End
void Parser::parse_main_action_4037() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DF000);
	break;
	default:
	error_illegal_ident(); }
}

// LD IY Comma LParen PZ expr RParen End
void Parser::parse_main_action_4038() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x6DF0);
	break;
	default:
	error_illegal_ident(); }
}

// LD IY Comma LParen SP RParen End
void Parser::parse_main_action_4039() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xED9A00);
	break;
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFDC400);
	break;
	default:
	error_illegal_ident(); }
}

// LD IY Comma LParen SP expr RParen End
void Parser::parse_main_action_4040() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode_idx(0xED9A);
	break;
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode_n(0xFDC4);
	break;
	default:
	error_illegal_ident(); }
}

// LD IY Comma LParen XIX RParen End
void Parser::parse_main_action_4041() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xED9900);
	break;
	default:
	error_illegal_ident(); }
}

// LD IY Comma LParen XIX expr RParen End
void Parser::parse_main_action_4042() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xED99);
	break;
	default:
	error_illegal_ident(); }
}

// LD IY Comma LParen XIY RParen End
void Parser::parse_main_action_4043() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xED9800);
	break;
	default:
	error_illegal_ident(); }
}

// LD IY Comma LParen XIY expr RParen End
void Parser::parse_main_action_4044() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xED98);
	break;
	default:
	error_illegal_ident(); }
}

// LD IY Comma LParen XP Colon expr RParen End
void Parser::parse_main_action_4045() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x40);
	add_opcode_nn(0xFD2A, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD IY Comma LParen YIX RParen End
void Parser::parse_main_action_4046() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xED9900);
	break;
	default:
	error_illegal_ident(); }
}

// LD IY Comma LParen YIX expr RParen End
void Parser::parse_main_action_4047() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xED99);
	break;
	default:
	error_illegal_ident(); }
}

// LD IY Comma LParen YIY RParen End
void Parser::parse_main_action_4048() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xED9800);
	break;
	default:
	error_illegal_ident(); }
}

// LD IY Comma LParen YIY expr RParen End
void Parser::parse_main_action_4049() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xED98);
	break;
	default:
	error_illegal_ident(); }
}

// LD IY Comma LParen YP Colon expr RParen End
void Parser::parse_main_action_4050() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	add_opcode_nn(0xFD2A, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD IY Comma LParen ZIX RParen End
void Parser::parse_main_action_4051() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xED9900);
	break;
	default:
	error_illegal_ident(); }
}

// LD IY Comma LParen ZIX expr RParen End
void Parser::parse_main_action_4052() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xED99);
	break;
	default:
	error_illegal_ident(); }
}

// LD IY Comma LParen ZIY RParen End
void Parser::parse_main_action_4053() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xED9800);
	break;
	default:
	error_illegal_ident(); }
}

// LD IY Comma LParen ZIY expr RParen End
void Parser::parse_main_action_4054() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xED98);
	break;
	default:
	error_illegal_ident(); }
}

// LD IY Comma LParen ZP Colon expr RParen End
void Parser::parse_main_action_4055() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x7F);
	add_opcode_nn(0xFD2A, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD IY Comma expr End
void Parser::parse_main_action_4056() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	if (expr_in_parens()) { add_opcode_nn(0xFD2A, 0); } else { add_opcode_nn(0xFD21, 0); }
	break;
	case CPU_EZ80: 
	if (expr_in_parens()) { add_opcode_nnn(0xFD2A, 0); } else { add_opcode_nnn(0xFD21, 0); }
	break;
	default:
	error_illegal_ident(); }
}

// LD IYH Comma A End
void Parser::parse_main_action_4057() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFD67);
	break;
	default:
	error_illegal_ident(); }
}

// LD IYH Comma B End
void Parser::parse_main_action_4058() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFD60);
	break;
	default:
	error_illegal_ident(); }
}

// LD IYH Comma C End
void Parser::parse_main_action_4059() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFD61);
	break;
	default:
	error_illegal_ident(); }
}

// LD IYH Comma D End
void Parser::parse_main_action_4060() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFD62);
	break;
	default:
	error_illegal_ident(); }
}

// LD IYH Comma E End
void Parser::parse_main_action_4061() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFD63);
	break;
	default:
	error_illegal_ident(); }
}

// LD IYH Comma IYH End
void Parser::parse_main_action_4062() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFD64);
	break;
	default:
	error_illegal_ident(); }
}

// LD IYH Comma IYL End
void Parser::parse_main_action_4063() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFD65);
	break;
	default:
	error_illegal_ident(); }
}

// LD IYH Comma expr End
void Parser::parse_main_action_4064() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_opcode_n(0xFD26);
	break;
	default:
	error_illegal_ident(); }
}

// LD IYL Comma A End
void Parser::parse_main_action_4065() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFD6F);
	break;
	default:
	error_illegal_ident(); }
}

// LD IYL Comma B End
void Parser::parse_main_action_4066() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFD68);
	break;
	default:
	error_illegal_ident(); }
}

// LD IYL Comma C End
void Parser::parse_main_action_4067() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFD69);
	break;
	default:
	error_illegal_ident(); }
}

// LD IYL Comma D End
void Parser::parse_main_action_4068() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFD6A);
	break;
	default:
	error_illegal_ident(); }
}

// LD IYL Comma E End
void Parser::parse_main_action_4069() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFD6B);
	break;
	default:
	error_illegal_ident(); }
}

// LD IYL Comma IYH End
void Parser::parse_main_action_4070() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFD6C);
	break;
	default:
	error_illegal_ident(); }
}

// LD IYL Comma IYL End
void Parser::parse_main_action_4071() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFD6D);
	break;
	default:
	error_illegal_ident(); }
}

// LD IYL Comma expr End
void Parser::parse_main_action_4072() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_opcode_n(0xFD2E);
	break;
	default:
	error_illegal_ident(); }
}

// LD JK Comma expr End
void Parser::parse_main_action_4073() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	if (expr_in_parens()) { add_opcode_nn(0x99, 0); } else { add_opcode_nn(0xA9, 0); }
	break;
	default:
	error_illegal_ident(); }
}

// LD JKHL Comma PW End
void Parser::parse_main_action_4074() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFDCD);
	break;
	default:
	error_illegal_ident(); }
}

// LD JKHL Comma PX End
void Parser::parse_main_action_4075() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFDDD);
	break;
	default:
	error_illegal_ident(); }
}

// LD JKHL Comma PY End
void Parser::parse_main_action_4076() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFDED);
	break;
	default:
	error_illegal_ident(); }
}

// LD JKHL Comma PZ End
void Parser::parse_main_action_4077() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFDFD);
	break;
	default:
	error_illegal_ident(); }
}

// LD JKHL Comma LParen HL RParen End
void Parser::parse_main_action_4078() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFD1A);
	break;
	default:
	error_illegal_ident(); }
}

// LD JKHL Comma LParen IX RParen End
void Parser::parse_main_action_4079() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFDCE00);
	break;
	default:
	error_illegal_ident(); }
}

// LD JKHL Comma LParen IX expr RParen End
void Parser::parse_main_action_4080() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0xFDCE);
	break;
	default:
	error_illegal_ident(); }
}

// LD JKHL Comma LParen IY RParen End
void Parser::parse_main_action_4081() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFDDE00);
	break;
	default:
	error_illegal_ident(); }
}

// LD JKHL Comma LParen IY expr RParen End
void Parser::parse_main_action_4082() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0xFDDE);
	break;
	default:
	error_illegal_ident(); }
}

// LD JKHL Comma LParen PW Plus HL RParen End
void Parser::parse_main_action_4083() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFD0C);
	break;
	default:
	error_illegal_ident(); }
}

// LD JKHL Comma LParen PW RParen End
void Parser::parse_main_action_4084() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFD0E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD JKHL Comma LParen PW expr RParen End
void Parser::parse_main_action_4085() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0xFD0E);
	break;
	default:
	error_illegal_ident(); }
}

// LD JKHL Comma LParen PX Plus HL RParen End
void Parser::parse_main_action_4086() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFD1C);
	break;
	default:
	error_illegal_ident(); }
}

// LD JKHL Comma LParen PX RParen End
void Parser::parse_main_action_4087() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFD1E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD JKHL Comma LParen PX expr RParen End
void Parser::parse_main_action_4088() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0xFD1E);
	break;
	default:
	error_illegal_ident(); }
}

// LD JKHL Comma LParen PY Plus HL RParen End
void Parser::parse_main_action_4089() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFD2C);
	break;
	default:
	error_illegal_ident(); }
}

// LD JKHL Comma LParen PY RParen End
void Parser::parse_main_action_4090() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFD2E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD JKHL Comma LParen PY expr RParen End
void Parser::parse_main_action_4091() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0xFD2E);
	break;
	default:
	error_illegal_ident(); }
}

// LD JKHL Comma LParen PZ Plus HL RParen End
void Parser::parse_main_action_4092() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFD3C);
	break;
	default:
	error_illegal_ident(); }
}

// LD JKHL Comma LParen PZ RParen End
void Parser::parse_main_action_4093() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFD3E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD JKHL Comma LParen PZ expr RParen End
void Parser::parse_main_action_4094() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0xFD3E);
	break;
	default:
	error_illegal_ident(); }
}

// LD JKHL Comma LParen SP Plus HL RParen End
void Parser::parse_main_action_4095() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFDFE);
	break;
	default:
	error_illegal_ident(); }
}

// LD JKHL Comma LParen SP RParen End
void Parser::parse_main_action_4096() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFDEE00);
	break;
	default:
	error_illegal_ident(); }
}

// LD JKHL Comma LParen SP expr RParen End
void Parser::parse_main_action_4097() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_n(0xFDEE);
	break;
	default:
	error_illegal_ident(); }
}

// LD JKHL Comma expr End
void Parser::parse_main_action_4098() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	if (expr_in_parens()) { add_opcode_nn(0x94, 0); } else { add_opcode_s(0xA4); }
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma A End | MOV L Comma A End
void Parser::parse_main_action_4099() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x6F);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F6F);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma B End | MOV L Comma B End
void Parser::parse_main_action_4100() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x68);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F68);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma C End | MOV L Comma C End
void Parser::parse_main_action_4101() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x69);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F69);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma D End | MOV L Comma D End
void Parser::parse_main_action_4102() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x6A);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F6A);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma E End | MOV L Comma E End
void Parser::parse_main_action_4103() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x6B);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F6B);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma H End | MOV L Comma H End
void Parser::parse_main_action_4104() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x6C);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F6C);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma L End | MOV L Comma L End
void Parser::parse_main_action_4105() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x6D);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F6D);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma RES const_expr Comma LParen IX RParen End | RES const_expr Comma LParen IX RParen Comma L End
void Parser::parse_main_action_4106() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xDDCB0085+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma RES const_expr Comma LParen IX expr RParen End | RES const_expr Comma LParen IX expr RParen Comma L End
void Parser::parse_main_action_4107() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xDDCB85+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma RES const_expr Comma LParen IY RParen End | RES const_expr Comma LParen IY RParen Comma L End
void Parser::parse_main_action_4108() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xFDCB0085+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma RES const_expr Comma LParen IY expr RParen End | RES const_expr Comma LParen IY expr RParen Comma L End
void Parser::parse_main_action_4109() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xFDCB85+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma RL LParen IX RParen End | RL LParen IX RParen Comma L End
void Parser::parse_main_action_4110() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDDCB0015);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma RL LParen IX expr RParen End | RL LParen IX expr RParen Comma L End
void Parser::parse_main_action_4111() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xDDCB15);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma RL LParen IY RParen End | RL LParen IY RParen Comma L End
void Parser::parse_main_action_4112() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFDCB0015);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma RL LParen IY expr RParen End | RL LParen IY expr RParen Comma L End
void Parser::parse_main_action_4113() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xFDCB15);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma RLC LParen IX RParen End | RLC LParen IX RParen Comma L End
void Parser::parse_main_action_4114() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDDCB0005);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma RLC LParen IX expr RParen End | RLC LParen IX expr RParen Comma L End
void Parser::parse_main_action_4115() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xDDCB05);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma RLC LParen IY RParen End | RLC LParen IY RParen Comma L End
void Parser::parse_main_action_4116() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFDCB0005);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma RLC LParen IY expr RParen End | RLC LParen IY expr RParen Comma L End
void Parser::parse_main_action_4117() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xFDCB05);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma RR LParen IX RParen End | RR LParen IX RParen Comma L End
void Parser::parse_main_action_4118() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDDCB001D);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma RR LParen IX expr RParen End | RR LParen IX expr RParen Comma L End
void Parser::parse_main_action_4119() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xDDCB1D);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma RR LParen IY RParen End | RR LParen IY RParen Comma L End
void Parser::parse_main_action_4120() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFDCB001D);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma RR LParen IY expr RParen End | RR LParen IY expr RParen Comma L End
void Parser::parse_main_action_4121() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xFDCB1D);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma RRC LParen IX RParen End | RRC LParen IX RParen Comma L End
void Parser::parse_main_action_4122() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDDCB000D);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma RRC LParen IX expr RParen End | RRC LParen IX expr RParen Comma L End
void Parser::parse_main_action_4123() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xDDCB0D);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma RRC LParen IY RParen End | RRC LParen IY RParen Comma L End
void Parser::parse_main_action_4124() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFDCB000D);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma RRC LParen IY expr RParen End | RRC LParen IY expr RParen Comma L End
void Parser::parse_main_action_4125() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xFDCB0D);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma SET const_expr Comma LParen IX RParen End | SET const_expr Comma LParen IX RParen Comma L End
void Parser::parse_main_action_4126() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xDDCB00C5+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma SET const_expr Comma LParen IX expr RParen End | SET const_expr Comma LParen IX expr RParen Comma L End
void Parser::parse_main_action_4127() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xDDCBC5+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma SET const_expr Comma LParen IY RParen End | SET const_expr Comma LParen IY RParen Comma L End
void Parser::parse_main_action_4128() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xFDCB00C5+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma SET const_expr Comma LParen IY expr RParen End | SET const_expr Comma LParen IY expr RParen Comma L End
void Parser::parse_main_action_4129() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xFDCBC5+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma SLA LParen IX RParen End | SLA LParen IX RParen Comma L End
void Parser::parse_main_action_4130() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDDCB0025);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma SLA LParen IX expr RParen End | SLA LParen IX expr RParen Comma L End
void Parser::parse_main_action_4131() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xDDCB25);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma SLA LParen IY RParen End | SLA LParen IY RParen Comma L End
void Parser::parse_main_action_4132() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFDCB0025);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma SLA LParen IY expr RParen End | SLA LParen IY expr RParen Comma L End
void Parser::parse_main_action_4133() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xFDCB25);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma SLI LParen IX RParen End | LD L Comma SLL LParen IX RParen End | LD L Comma SLS LParen IX RParen End | SLI LParen IX RParen Comma L End | SLL LParen IX RParen Comma L End | SLS LParen IX RParen Comma L End
void Parser::parse_main_action_4134() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDDCB0035);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma SLI LParen IX expr RParen End | LD L Comma SLL LParen IX expr RParen End | LD L Comma SLS LParen IX expr RParen End | SLI LParen IX expr RParen Comma L End | SLL LParen IX expr RParen Comma L End | SLS LParen IX expr RParen Comma L End
void Parser::parse_main_action_4135() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xDDCB35);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma SLI LParen IY RParen End | LD L Comma SLL LParen IY RParen End | LD L Comma SLS LParen IY RParen End | SLI LParen IY RParen Comma L End | SLL LParen IY RParen Comma L End | SLS LParen IY RParen Comma L End
void Parser::parse_main_action_4136() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFDCB0035);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma SLI LParen IY expr RParen End | LD L Comma SLL LParen IY expr RParen End | LD L Comma SLS LParen IY expr RParen End | SLI LParen IY expr RParen Comma L End | SLL LParen IY expr RParen Comma L End | SLS LParen IY expr RParen Comma L End
void Parser::parse_main_action_4137() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xFDCB35);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma SRA LParen IX RParen End | SRA LParen IX RParen Comma L End
void Parser::parse_main_action_4138() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDDCB002D);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma SRA LParen IX expr RParen End | SRA LParen IX expr RParen Comma L End
void Parser::parse_main_action_4139() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xDDCB2D);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma SRA LParen IY RParen End | SRA LParen IY RParen Comma L End
void Parser::parse_main_action_4140() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFDCB002D);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma SRA LParen IY expr RParen End | SRA LParen IY expr RParen Comma L End
void Parser::parse_main_action_4141() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xFDCB2D);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma SRL LParen IX RParen End | SRL LParen IX RParen Comma L End
void Parser::parse_main_action_4142() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDDCB003D);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma SRL LParen IX expr RParen End | SRL LParen IX expr RParen Comma L End
void Parser::parse_main_action_4143() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xDDCB3D);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma SRL LParen IY RParen End | SRL LParen IY RParen Comma L End
void Parser::parse_main_action_4144() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFDCB003D);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma SRL LParen IY expr RParen End | SRL LParen IY expr RParen Comma L End
void Parser::parse_main_action_4145() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xFDCB3D);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma LParen AHL RParen End
void Parser::parse_main_action_4146() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0x6E);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma LParen AIX RParen End
void Parser::parse_main_action_4147() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xDD6E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma LParen AIX expr RParen End
void Parser::parse_main_action_4148() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xDD6E);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma LParen AIY RParen End
void Parser::parse_main_action_4149() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xFD6E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma LParen AIY expr RParen End
void Parser::parse_main_action_4150() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xFD6E);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma LParen DE Minus RParen End | LDD L Comma LParen DE RParen End
void Parser::parse_main_action_4151() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xEB);
	add_opcode(0x5E);
	add_opcode(0xEB);
	add_opcode(0x1B);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma LParen DE Plus RParen End | LDI L Comma LParen DE RParen End
void Parser::parse_main_action_4152() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xEB);
	add_opcode(0x5E);
	add_opcode(0xEB);
	add_opcode(0x13);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma LParen DE RParen End
void Parser::parse_main_action_4153() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xEB);
	add_opcode(0x5E);
	add_opcode(0xEB);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma LParen HL Minus RParen End | LD L Comma LParen HLD RParen End | LDD L Comma LParen HL RParen End
void Parser::parse_main_action_4154() {
	add_opcode(0x6E);
	add_opcode(0x2B);
}

// LD L Comma LParen HL Plus RParen End | LD L Comma LParen HLI RParen End | LDI L Comma LParen HL RParen End
void Parser::parse_main_action_4155() {
	add_opcode(0x6E);
	add_opcode(0x23);
}

// LD L Comma LParen HL RParen End | MOV L Comma M End
void Parser::parse_main_action_4156() {
	add_opcode(0x6E);
}

// LD L Comma LParen IX RParen End
void Parser::parse_main_action_4157() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xDD6E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma LParen IX expr RParen End
void Parser::parse_main_action_4158() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx(0xDD6E);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma LParen IY RParen End
void Parser::parse_main_action_4159() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xFD6E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma LParen IY expr RParen End
void Parser::parse_main_action_4160() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx(0xFD6E);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma LParen PHL RParen End
void Parser::parse_main_action_4161() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0x6E);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma LParen PIX RParen End
void Parser::parse_main_action_4162() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xDD6E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma LParen PIX expr RParen End
void Parser::parse_main_action_4163() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xDD6E);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma LParen PIY RParen End
void Parser::parse_main_action_4164() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xFD6E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma LParen PIY expr RParen End
void Parser::parse_main_action_4165() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xFD6E);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma LParen XHL RParen End
void Parser::parse_main_action_4166() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0x6E);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma LParen XIX RParen End
void Parser::parse_main_action_4167() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xDD6E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma LParen XIX expr RParen End
void Parser::parse_main_action_4168() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xDD6E);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma LParen XIY RParen End
void Parser::parse_main_action_4169() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xFD6E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma LParen XIY expr RParen End
void Parser::parse_main_action_4170() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xFD6E);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma LParen YHL RParen End
void Parser::parse_main_action_4171() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0x6E);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma LParen YIX RParen End
void Parser::parse_main_action_4172() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xDD6E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma LParen YIX expr RParen End
void Parser::parse_main_action_4173() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xDD6E);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma LParen YIY RParen End
void Parser::parse_main_action_4174() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xFD6E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma LParen YIY expr RParen End
void Parser::parse_main_action_4175() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xFD6E);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma LParen ZHL RParen End
void Parser::parse_main_action_4176() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0x6E);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma LParen ZIX RParen End
void Parser::parse_main_action_4177() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xDD6E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma LParen ZIX expr RParen End
void Parser::parse_main_action_4178() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xDD6E);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma LParen ZIY RParen End
void Parser::parse_main_action_4179() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xFD6E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma LParen ZIY expr RParen End
void Parser::parse_main_action_4180() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xFD6E);
	break;
	default:
	error_illegal_ident(); }
}

// LD L Comma expr End | MVI L Comma expr End
void Parser::parse_main_action_4181() {
	warn_if_expr_in_parens();
	add_opcode_n(0x2E);
}

// LD LXPC Comma HL End
void Parser::parse_main_action_4182() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x97);
	break;
	default:
	error_illegal_ident(); }
}

// LD MB Comma A End
void Parser::parse_main_action_4183() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xED6D);
	break;
	default:
	error_illegal_ident(); }
}

// LD PW Comma BCDE End
void Parser::parse_main_action_4184() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDD8D);
	break;
	default:
	error_illegal_ident(); }
}

// LD PW Comma JKHL End
void Parser::parse_main_action_4185() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFD8D);
	break;
	default:
	error_illegal_ident(); }
}

// LD PW Comma PW End
void Parser::parse_main_action_4186() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D07);
	break;
	default:
	error_illegal_ident(); }
}

// LD PW Comma PW Plus DE End
void Parser::parse_main_action_4187() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D06);
	break;
	default:
	error_illegal_ident(); }
}

// LD PW Comma PW Plus HL End
void Parser::parse_main_action_4188() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D0E);
	break;
	default:
	error_illegal_ident(); }
}

// LD PW Comma PW Plus IX End
void Parser::parse_main_action_4189() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D04);
	break;
	default:
	error_illegal_ident(); }
}

// LD PW Comma PW Plus IY End
void Parser::parse_main_action_4190() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D05);
	break;
	default:
	error_illegal_ident(); }
}

// LD PW Comma PW expr End
void Parser::parse_main_action_4191() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode_s(0x6D0C);
	break;
	default:
	error_illegal_ident(); }
}

// LD PW Comma PX End
void Parser::parse_main_action_4192() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D17);
	break;
	default:
	error_illegal_ident(); }
}

// LD PW Comma PX Plus DE End
void Parser::parse_main_action_4193() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D16);
	break;
	default:
	error_illegal_ident(); }
}

// LD PW Comma PX Plus HL End
void Parser::parse_main_action_4194() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D1E);
	break;
	default:
	error_illegal_ident(); }
}

// LD PW Comma PX Plus IX End
void Parser::parse_main_action_4195() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D14);
	break;
	default:
	error_illegal_ident(); }
}

// LD PW Comma PX Plus IY End
void Parser::parse_main_action_4196() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D15);
	break;
	default:
	error_illegal_ident(); }
}

// LD PW Comma PX expr End
void Parser::parse_main_action_4197() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode_s(0x6D1C);
	break;
	default:
	error_illegal_ident(); }
}

// LD PW Comma PY End
void Parser::parse_main_action_4198() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D27);
	break;
	default:
	error_illegal_ident(); }
}

// LD PW Comma PY Plus DE End
void Parser::parse_main_action_4199() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D26);
	break;
	default:
	error_illegal_ident(); }
}

// LD PW Comma PY Plus HL End
void Parser::parse_main_action_4200() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D2E);
	break;
	default:
	error_illegal_ident(); }
}

// LD PW Comma PY Plus IX End
void Parser::parse_main_action_4201() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D24);
	break;
	default:
	error_illegal_ident(); }
}

// LD PW Comma PY Plus IY End
void Parser::parse_main_action_4202() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D25);
	break;
	default:
	error_illegal_ident(); }
}

// LD PW Comma PY expr End
void Parser::parse_main_action_4203() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode_s(0x6D2C);
	break;
	default:
	error_illegal_ident(); }
}

// LD PW Comma PZ End
void Parser::parse_main_action_4204() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D37);
	break;
	default:
	error_illegal_ident(); }
}

// LD PW Comma PZ Plus DE End
void Parser::parse_main_action_4205() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D36);
	break;
	default:
	error_illegal_ident(); }
}

// LD PW Comma PZ Plus HL End
void Parser::parse_main_action_4206() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D3E);
	break;
	default:
	error_illegal_ident(); }
}

// LD PW Comma PZ Plus IX End
void Parser::parse_main_action_4207() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D34);
	break;
	default:
	error_illegal_ident(); }
}

// LD PW Comma PZ Plus IY End
void Parser::parse_main_action_4208() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D35);
	break;
	default:
	error_illegal_ident(); }
}

// LD PW Comma PZ expr End
void Parser::parse_main_action_4209() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode_s(0x6D3C);
	break;
	default:
	error_illegal_ident(); }
}

// LD PW Comma LParen HTR Plus HL RParen End
void Parser::parse_main_action_4210() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xED01);
	break;
	default:
	error_illegal_ident(); }
}

// LD PW Comma LParen PW Plus HL RParen End
void Parser::parse_main_action_4211() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D0A);
	break;
	default:
	error_illegal_ident(); }
}

// LD PW Comma LParen PW RParen End
void Parser::parse_main_action_4212() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D0800);
	break;
	default:
	error_illegal_ident(); }
}

// LD PW Comma LParen PW expr RParen End
void Parser::parse_main_action_4213() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x6D08);
	break;
	default:
	error_illegal_ident(); }
}

// LD PW Comma LParen PX Plus HL RParen End
void Parser::parse_main_action_4214() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D1A);
	break;
	default:
	error_illegal_ident(); }
}

// LD PW Comma LParen PX RParen End
void Parser::parse_main_action_4215() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D1800);
	break;
	default:
	error_illegal_ident(); }
}

// LD PW Comma LParen PX expr RParen End
void Parser::parse_main_action_4216() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x6D18);
	break;
	default:
	error_illegal_ident(); }
}

// LD PW Comma LParen PY Plus HL RParen End
void Parser::parse_main_action_4217() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D2A);
	break;
	default:
	error_illegal_ident(); }
}

// LD PW Comma LParen PY RParen End
void Parser::parse_main_action_4218() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D2800);
	break;
	default:
	error_illegal_ident(); }
}

// LD PW Comma LParen PY expr RParen End
void Parser::parse_main_action_4219() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x6D28);
	break;
	default:
	error_illegal_ident(); }
}

// LD PW Comma LParen PZ Plus HL RParen End
void Parser::parse_main_action_4220() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D3A);
	break;
	default:
	error_illegal_ident(); }
}

// LD PW Comma LParen PZ RParen End
void Parser::parse_main_action_4221() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D3800);
	break;
	default:
	error_illegal_ident(); }
}

// LD PW Comma LParen PZ expr RParen End
void Parser::parse_main_action_4222() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x6D38);
	break;
	default:
	error_illegal_ident(); }
}

// LD PW Comma LParen SP RParen End
void Parser::parse_main_action_4223() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xED0400);
	break;
	default:
	error_illegal_ident(); }
}

// LD PW Comma LParen SP expr RParen End
void Parser::parse_main_action_4224() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_n(0xED04);
	break;
	default:
	error_illegal_ident(); }
}

// LD PW Comma expr End
void Parser::parse_main_action_4225() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode_nnnn(0xED0C, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD PX Comma BCDE End
void Parser::parse_main_action_4226() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDD9D);
	break;
	default:
	error_illegal_ident(); }
}

// LD PX Comma JKHL End
void Parser::parse_main_action_4227() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFD9D);
	break;
	default:
	error_illegal_ident(); }
}

// LD PX Comma PW End
void Parser::parse_main_action_4228() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D47);
	break;
	default:
	error_illegal_ident(); }
}

// LD PX Comma PW Plus DE End
void Parser::parse_main_action_4229() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D46);
	break;
	default:
	error_illegal_ident(); }
}

// LD PX Comma PW Plus HL End
void Parser::parse_main_action_4230() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D4E);
	break;
	default:
	error_illegal_ident(); }
}

// LD PX Comma PW Plus IX End
void Parser::parse_main_action_4231() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D44);
	break;
	default:
	error_illegal_ident(); }
}

// LD PX Comma PW Plus IY End
void Parser::parse_main_action_4232() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D45);
	break;
	default:
	error_illegal_ident(); }
}

// LD PX Comma PW expr End
void Parser::parse_main_action_4233() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode_s(0x6D4C);
	break;
	default:
	error_illegal_ident(); }
}

// LD PX Comma PX End
void Parser::parse_main_action_4234() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D57);
	break;
	default:
	error_illegal_ident(); }
}

// LD PX Comma PX Plus DE End
void Parser::parse_main_action_4235() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D56);
	break;
	default:
	error_illegal_ident(); }
}

// LD PX Comma PX Plus HL End
void Parser::parse_main_action_4236() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D5E);
	break;
	default:
	error_illegal_ident(); }
}

// LD PX Comma PX Plus IX End
void Parser::parse_main_action_4237() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D54);
	break;
	default:
	error_illegal_ident(); }
}

// LD PX Comma PX Plus IY End
void Parser::parse_main_action_4238() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D55);
	break;
	default:
	error_illegal_ident(); }
}

// LD PX Comma PX expr End
void Parser::parse_main_action_4239() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode_s(0x6D5C);
	break;
	default:
	error_illegal_ident(); }
}

// LD PX Comma PY End
void Parser::parse_main_action_4240() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D67);
	break;
	default:
	error_illegal_ident(); }
}

// LD PX Comma PY Plus DE End
void Parser::parse_main_action_4241() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D66);
	break;
	default:
	error_illegal_ident(); }
}

// LD PX Comma PY Plus HL End
void Parser::parse_main_action_4242() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D6E);
	break;
	default:
	error_illegal_ident(); }
}

// LD PX Comma PY Plus IX End
void Parser::parse_main_action_4243() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D64);
	break;
	default:
	error_illegal_ident(); }
}

// LD PX Comma PY Plus IY End
void Parser::parse_main_action_4244() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D65);
	break;
	default:
	error_illegal_ident(); }
}

// LD PX Comma PY expr End
void Parser::parse_main_action_4245() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode_s(0x6D6C);
	break;
	default:
	error_illegal_ident(); }
}

// LD PX Comma PZ End
void Parser::parse_main_action_4246() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D77);
	break;
	default:
	error_illegal_ident(); }
}

// LD PX Comma PZ Plus DE End
void Parser::parse_main_action_4247() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D76);
	break;
	default:
	error_illegal_ident(); }
}

// LD PX Comma PZ Plus HL End
void Parser::parse_main_action_4248() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D7E);
	break;
	default:
	error_illegal_ident(); }
}

// LD PX Comma PZ Plus IX End
void Parser::parse_main_action_4249() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D74);
	break;
	default:
	error_illegal_ident(); }
}

// LD PX Comma PZ Plus IY End
void Parser::parse_main_action_4250() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D75);
	break;
	default:
	error_illegal_ident(); }
}

// LD PX Comma PZ expr End
void Parser::parse_main_action_4251() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode_s(0x6D7C);
	break;
	default:
	error_illegal_ident(); }
}

// LD PX Comma LParen HTR Plus HL RParen End
void Parser::parse_main_action_4252() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xED11);
	break;
	default:
	error_illegal_ident(); }
}

// LD PX Comma LParen PW Plus HL RParen End
void Parser::parse_main_action_4253() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D4A);
	break;
	default:
	error_illegal_ident(); }
}

// LD PX Comma LParen PW RParen End
void Parser::parse_main_action_4254() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D4800);
	break;
	default:
	error_illegal_ident(); }
}

// LD PX Comma LParen PW expr RParen End
void Parser::parse_main_action_4255() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x6D48);
	break;
	default:
	error_illegal_ident(); }
}

// LD PX Comma LParen PX Plus HL RParen End
void Parser::parse_main_action_4256() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D5A);
	break;
	default:
	error_illegal_ident(); }
}

// LD PX Comma LParen PX RParen End
void Parser::parse_main_action_4257() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D5800);
	break;
	default:
	error_illegal_ident(); }
}

// LD PX Comma LParen PX expr RParen End
void Parser::parse_main_action_4258() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x6D58);
	break;
	default:
	error_illegal_ident(); }
}

// LD PX Comma LParen PY Plus HL RParen End
void Parser::parse_main_action_4259() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D6A);
	break;
	default:
	error_illegal_ident(); }
}

// LD PX Comma LParen PY RParen End
void Parser::parse_main_action_4260() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D6800);
	break;
	default:
	error_illegal_ident(); }
}

// LD PX Comma LParen PY expr RParen End
void Parser::parse_main_action_4261() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x6D68);
	break;
	default:
	error_illegal_ident(); }
}

// LD PX Comma LParen PZ Plus HL RParen End
void Parser::parse_main_action_4262() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D7A);
	break;
	default:
	error_illegal_ident(); }
}

// LD PX Comma LParen PZ RParen End
void Parser::parse_main_action_4263() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D7800);
	break;
	default:
	error_illegal_ident(); }
}

// LD PX Comma LParen PZ expr RParen End
void Parser::parse_main_action_4264() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x6D78);
	break;
	default:
	error_illegal_ident(); }
}

// LD PX Comma LParen SP RParen End
void Parser::parse_main_action_4265() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xED1400);
	break;
	default:
	error_illegal_ident(); }
}

// LD PX Comma LParen SP expr RParen End
void Parser::parse_main_action_4266() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_n(0xED14);
	break;
	default:
	error_illegal_ident(); }
}

// LD PX Comma expr End
void Parser::parse_main_action_4267() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode_nnnn(0xED1C, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD PY Comma BCDE End
void Parser::parse_main_action_4268() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDDAD);
	break;
	default:
	error_illegal_ident(); }
}

// LD PY Comma JKHL End
void Parser::parse_main_action_4269() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFDAD);
	break;
	default:
	error_illegal_ident(); }
}

// LD PY Comma PW End
void Parser::parse_main_action_4270() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D87);
	break;
	default:
	error_illegal_ident(); }
}

// LD PY Comma PW Plus DE End
void Parser::parse_main_action_4271() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D86);
	break;
	default:
	error_illegal_ident(); }
}

// LD PY Comma PW Plus HL End
void Parser::parse_main_action_4272() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D8E);
	break;
	default:
	error_illegal_ident(); }
}

// LD PY Comma PW Plus IX End
void Parser::parse_main_action_4273() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D84);
	break;
	default:
	error_illegal_ident(); }
}

// LD PY Comma PW Plus IY End
void Parser::parse_main_action_4274() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D85);
	break;
	default:
	error_illegal_ident(); }
}

// LD PY Comma PW expr End
void Parser::parse_main_action_4275() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode_s(0x6D8C);
	break;
	default:
	error_illegal_ident(); }
}

// LD PY Comma PX End
void Parser::parse_main_action_4276() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D97);
	break;
	default:
	error_illegal_ident(); }
}

// LD PY Comma PX Plus DE End
void Parser::parse_main_action_4277() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D96);
	break;
	default:
	error_illegal_ident(); }
}

// LD PY Comma PX Plus HL End
void Parser::parse_main_action_4278() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D9E);
	break;
	default:
	error_illegal_ident(); }
}

// LD PY Comma PX Plus IX End
void Parser::parse_main_action_4279() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D94);
	break;
	default:
	error_illegal_ident(); }
}

// LD PY Comma PX Plus IY End
void Parser::parse_main_action_4280() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D95);
	break;
	default:
	error_illegal_ident(); }
}

// LD PY Comma PX expr End
void Parser::parse_main_action_4281() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode_s(0x6D9C);
	break;
	default:
	error_illegal_ident(); }
}

// LD PY Comma PY End
void Parser::parse_main_action_4282() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DA7);
	break;
	default:
	error_illegal_ident(); }
}

// LD PY Comma PY Plus DE End
void Parser::parse_main_action_4283() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DA6);
	break;
	default:
	error_illegal_ident(); }
}

// LD PY Comma PY Plus HL End
void Parser::parse_main_action_4284() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DAE);
	break;
	default:
	error_illegal_ident(); }
}

// LD PY Comma PY Plus IX End
void Parser::parse_main_action_4285() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DA4);
	break;
	default:
	error_illegal_ident(); }
}

// LD PY Comma PY Plus IY End
void Parser::parse_main_action_4286() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DA5);
	break;
	default:
	error_illegal_ident(); }
}

// LD PY Comma PY expr End
void Parser::parse_main_action_4287() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode_s(0x6DAC);
	break;
	default:
	error_illegal_ident(); }
}

// LD PY Comma PZ End
void Parser::parse_main_action_4288() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DB7);
	break;
	default:
	error_illegal_ident(); }
}

// LD PY Comma PZ Plus DE End
void Parser::parse_main_action_4289() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DB6);
	break;
	default:
	error_illegal_ident(); }
}

// LD PY Comma PZ Plus HL End
void Parser::parse_main_action_4290() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DBE);
	break;
	default:
	error_illegal_ident(); }
}

// LD PY Comma PZ Plus IX End
void Parser::parse_main_action_4291() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DB4);
	break;
	default:
	error_illegal_ident(); }
}

// LD PY Comma PZ Plus IY End
void Parser::parse_main_action_4292() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DB5);
	break;
	default:
	error_illegal_ident(); }
}

// LD PY Comma PZ expr End
void Parser::parse_main_action_4293() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode_s(0x6DBC);
	break;
	default:
	error_illegal_ident(); }
}

// LD PY Comma LParen HTR Plus HL RParen End
void Parser::parse_main_action_4294() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xED21);
	break;
	default:
	error_illegal_ident(); }
}

// LD PY Comma LParen PW Plus HL RParen End
void Parser::parse_main_action_4295() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D8A);
	break;
	default:
	error_illegal_ident(); }
}

// LD PY Comma LParen PW RParen End
void Parser::parse_main_action_4296() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D8800);
	break;
	default:
	error_illegal_ident(); }
}

// LD PY Comma LParen PW expr RParen End
void Parser::parse_main_action_4297() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x6D88);
	break;
	default:
	error_illegal_ident(); }
}

// LD PY Comma LParen PX Plus HL RParen End
void Parser::parse_main_action_4298() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D9A);
	break;
	default:
	error_illegal_ident(); }
}

// LD PY Comma LParen PX RParen End
void Parser::parse_main_action_4299() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D9800);
	break;
	default:
	error_illegal_ident(); }
}

// LD PY Comma LParen PX expr RParen End
void Parser::parse_main_action_4300() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x6D98);
	break;
	default:
	error_illegal_ident(); }
}

// LD PY Comma LParen PY Plus HL RParen End
void Parser::parse_main_action_4301() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DAA);
	break;
	default:
	error_illegal_ident(); }
}

// LD PY Comma LParen PY RParen End
void Parser::parse_main_action_4302() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DA800);
	break;
	default:
	error_illegal_ident(); }
}

// LD PY Comma LParen PY expr RParen End
void Parser::parse_main_action_4303() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x6DA8);
	break;
	default:
	error_illegal_ident(); }
}

// LD PY Comma LParen PZ Plus HL RParen End
void Parser::parse_main_action_4304() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DBA);
	break;
	default:
	error_illegal_ident(); }
}

// LD PY Comma LParen PZ RParen End
void Parser::parse_main_action_4305() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DB800);
	break;
	default:
	error_illegal_ident(); }
}

// LD PY Comma LParen PZ expr RParen End
void Parser::parse_main_action_4306() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x6DB8);
	break;
	default:
	error_illegal_ident(); }
}

// LD PY Comma LParen SP RParen End
void Parser::parse_main_action_4307() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xED2400);
	break;
	default:
	error_illegal_ident(); }
}

// LD PY Comma LParen SP expr RParen End
void Parser::parse_main_action_4308() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_n(0xED24);
	break;
	default:
	error_illegal_ident(); }
}

// LD PY Comma expr End
void Parser::parse_main_action_4309() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode_nnnn(0xED2C, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD PZ Comma BCDE End
void Parser::parse_main_action_4310() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDDBD);
	break;
	default:
	error_illegal_ident(); }
}

// LD PZ Comma JKHL End
void Parser::parse_main_action_4311() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFDBD);
	break;
	default:
	error_illegal_ident(); }
}

// LD PZ Comma PW End
void Parser::parse_main_action_4312() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DC7);
	break;
	default:
	error_illegal_ident(); }
}

// LD PZ Comma PW Plus DE End
void Parser::parse_main_action_4313() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DC6);
	break;
	default:
	error_illegal_ident(); }
}

// LD PZ Comma PW Plus HL End
void Parser::parse_main_action_4314() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DCE);
	break;
	default:
	error_illegal_ident(); }
}

// LD PZ Comma PW Plus IX End
void Parser::parse_main_action_4315() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DC4);
	break;
	default:
	error_illegal_ident(); }
}

// LD PZ Comma PW Plus IY End
void Parser::parse_main_action_4316() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DC5);
	break;
	default:
	error_illegal_ident(); }
}

// LD PZ Comma PW expr End
void Parser::parse_main_action_4317() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode_s(0x6DCC);
	break;
	default:
	error_illegal_ident(); }
}

// LD PZ Comma PX End
void Parser::parse_main_action_4318() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DD7);
	break;
	default:
	error_illegal_ident(); }
}

// LD PZ Comma PX Plus DE End
void Parser::parse_main_action_4319() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DD6);
	break;
	default:
	error_illegal_ident(); }
}

// LD PZ Comma PX Plus HL End
void Parser::parse_main_action_4320() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DDE);
	break;
	default:
	error_illegal_ident(); }
}

// LD PZ Comma PX Plus IX End
void Parser::parse_main_action_4321() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DD4);
	break;
	default:
	error_illegal_ident(); }
}

// LD PZ Comma PX Plus IY End
void Parser::parse_main_action_4322() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DD5);
	break;
	default:
	error_illegal_ident(); }
}

// LD PZ Comma PX expr End
void Parser::parse_main_action_4323() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode_s(0x6DDC);
	break;
	default:
	error_illegal_ident(); }
}

// LD PZ Comma PY End
void Parser::parse_main_action_4324() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DE7);
	break;
	default:
	error_illegal_ident(); }
}

// LD PZ Comma PY Plus DE End
void Parser::parse_main_action_4325() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DE6);
	break;
	default:
	error_illegal_ident(); }
}

// LD PZ Comma PY Plus HL End
void Parser::parse_main_action_4326() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DEE);
	break;
	default:
	error_illegal_ident(); }
}

// LD PZ Comma PY Plus IX End
void Parser::parse_main_action_4327() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DE4);
	break;
	default:
	error_illegal_ident(); }
}

// LD PZ Comma PY Plus IY End
void Parser::parse_main_action_4328() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DE5);
	break;
	default:
	error_illegal_ident(); }
}

// LD PZ Comma PY expr End
void Parser::parse_main_action_4329() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode_s(0x6DEC);
	break;
	default:
	error_illegal_ident(); }
}

// LD PZ Comma PZ End
void Parser::parse_main_action_4330() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DF7);
	break;
	default:
	error_illegal_ident(); }
}

// LD PZ Comma PZ Plus DE End
void Parser::parse_main_action_4331() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DF6);
	break;
	default:
	error_illegal_ident(); }
}

// LD PZ Comma PZ Plus HL End
void Parser::parse_main_action_4332() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DFE);
	break;
	default:
	error_illegal_ident(); }
}

// LD PZ Comma PZ Plus IX End
void Parser::parse_main_action_4333() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DF4);
	break;
	default:
	error_illegal_ident(); }
}

// LD PZ Comma PZ Plus IY End
void Parser::parse_main_action_4334() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DF5);
	break;
	default:
	error_illegal_ident(); }
}

// LD PZ Comma PZ expr End
void Parser::parse_main_action_4335() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode_s(0x6DFC);
	break;
	default:
	error_illegal_ident(); }
}

// LD PZ Comma LParen HTR Plus HL RParen End
void Parser::parse_main_action_4336() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xED31);
	break;
	default:
	error_illegal_ident(); }
}

// LD PZ Comma LParen PW Plus HL RParen End
void Parser::parse_main_action_4337() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DCA);
	break;
	default:
	error_illegal_ident(); }
}

// LD PZ Comma LParen PW RParen End
void Parser::parse_main_action_4338() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DC800);
	break;
	default:
	error_illegal_ident(); }
}

// LD PZ Comma LParen PW expr RParen End
void Parser::parse_main_action_4339() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x6DC8);
	break;
	default:
	error_illegal_ident(); }
}

// LD PZ Comma LParen PX Plus HL RParen End
void Parser::parse_main_action_4340() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DDA);
	break;
	default:
	error_illegal_ident(); }
}

// LD PZ Comma LParen PX RParen End
void Parser::parse_main_action_4341() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DD800);
	break;
	default:
	error_illegal_ident(); }
}

// LD PZ Comma LParen PX expr RParen End
void Parser::parse_main_action_4342() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x6DD8);
	break;
	default:
	error_illegal_ident(); }
}

// LD PZ Comma LParen PY Plus HL RParen End
void Parser::parse_main_action_4343() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DEA);
	break;
	default:
	error_illegal_ident(); }
}

// LD PZ Comma LParen PY RParen End
void Parser::parse_main_action_4344() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DE800);
	break;
	default:
	error_illegal_ident(); }
}

// LD PZ Comma LParen PY expr RParen End
void Parser::parse_main_action_4345() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x6DE8);
	break;
	default:
	error_illegal_ident(); }
}

// LD PZ Comma LParen PZ Plus HL RParen End
void Parser::parse_main_action_4346() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DFA);
	break;
	default:
	error_illegal_ident(); }
}

// LD PZ Comma LParen PZ RParen End
void Parser::parse_main_action_4347() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DF800);
	break;
	default:
	error_illegal_ident(); }
}

// LD PZ Comma LParen PZ expr RParen End
void Parser::parse_main_action_4348() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x6DF8);
	break;
	default:
	error_illegal_ident(); }
}

// LD PZ Comma LParen SP RParen End
void Parser::parse_main_action_4349() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xED3400);
	break;
	default:
	error_illegal_ident(); }
}

// LD PZ Comma LParen SP expr RParen End
void Parser::parse_main_action_4350() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_n(0xED34);
	break;
	default:
	error_illegal_ident(); }
}

// LD PZ Comma expr End
void Parser::parse_main_action_4351() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode_nnnn(0xED3C, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD R Comma A End
void Parser::parse_main_action_4352() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xED4F);
	break;
	default:
	error_illegal_ident(); }
}

// LD SP Comma HL End | SPHL End
void Parser::parse_main_action_4353() {
	add_opcode(0xF9);
}

// LD SP Comma IX End
void Parser::parse_main_action_4354() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xDDF9);
	break;
	default:
	error_illegal_ident(); }
}

// LD SP Comma IY End
void Parser::parse_main_action_4355() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xFDF9);
	break;
	default:
	error_illegal_ident(); }
}

// LD SP Comma LParen A Colon expr RParen End
void Parser::parse_main_action_4356() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	add_opcode_nn(0xED7B, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD SP Comma LParen AIX RParen End
void Parser::parse_main_action_4357() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xEDBD00);
	break;
	default:
	error_illegal_ident(); }
}

// LD SP Comma LParen AIX expr RParen End
void Parser::parse_main_action_4358() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xEDBD);
	break;
	default:
	error_illegal_ident(); }
}

// LD SP Comma LParen AIY RParen End
void Parser::parse_main_action_4359() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xEDBC00);
	break;
	default:
	error_illegal_ident(); }
}

// LD SP Comma LParen AIY expr RParen End
void Parser::parse_main_action_4360() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xEDBC);
	break;
	default:
	error_illegal_ident(); }
}

// LD SP Comma LParen IX RParen End
void Parser::parse_main_action_4361() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xEDBD00);
	break;
	default:
	error_illegal_ident(); }
}

// LD SP Comma LParen IX expr RParen End
void Parser::parse_main_action_4362() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode_idx(0xEDBD);
	break;
	default:
	error_illegal_ident(); }
}

// LD SP Comma LParen IY RParen End
void Parser::parse_main_action_4363() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xEDBC00);
	break;
	default:
	error_illegal_ident(); }
}

// LD SP Comma LParen IY expr RParen End
void Parser::parse_main_action_4364() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode_idx(0xEDBC);
	break;
	default:
	error_illegal_ident(); }
}

// LD SP Comma LParen PIX RParen End
void Parser::parse_main_action_4365() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xEDBD00);
	break;
	default:
	error_illegal_ident(); }
}

// LD SP Comma LParen PIX expr RParen End
void Parser::parse_main_action_4366() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xEDBD);
	break;
	default:
	error_illegal_ident(); }
}

// LD SP Comma LParen PIY RParen End
void Parser::parse_main_action_4367() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xEDBC00);
	break;
	default:
	error_illegal_ident(); }
}

// LD SP Comma LParen PIY expr RParen End
void Parser::parse_main_action_4368() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xEDBC);
	break;
	default:
	error_illegal_ident(); }
}

// LD SP Comma LParen PP Colon expr RParen End
void Parser::parse_main_action_4369() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x5B);
	add_opcode_nn(0xED7B, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD SP Comma LParen SP RParen End
void Parser::parse_main_action_4370() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xEDBE00);
	break;
	default:
	error_illegal_ident(); }
}

// LD SP Comma LParen SP expr RParen End
void Parser::parse_main_action_4371() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode_idx(0xEDBE);
	break;
	default:
	error_illegal_ident(); }
}

// LD SP Comma LParen XIX RParen End
void Parser::parse_main_action_4372() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xEDBD00);
	break;
	default:
	error_illegal_ident(); }
}

// LD SP Comma LParen XIX expr RParen End
void Parser::parse_main_action_4373() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xEDBD);
	break;
	default:
	error_illegal_ident(); }
}

// LD SP Comma LParen XIY RParen End
void Parser::parse_main_action_4374() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xEDBC00);
	break;
	default:
	error_illegal_ident(); }
}

// LD SP Comma LParen XIY expr RParen End
void Parser::parse_main_action_4375() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xEDBC);
	break;
	default:
	error_illegal_ident(); }
}

// LD SP Comma LParen XP Colon expr RParen End
void Parser::parse_main_action_4376() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x40);
	add_opcode_nn(0xED7B, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD SP Comma LParen YIX RParen End
void Parser::parse_main_action_4377() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xEDBD00);
	break;
	default:
	error_illegal_ident(); }
}

// LD SP Comma LParen YIX expr RParen End
void Parser::parse_main_action_4378() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xEDBD);
	break;
	default:
	error_illegal_ident(); }
}

// LD SP Comma LParen YIY RParen End
void Parser::parse_main_action_4379() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xEDBC00);
	break;
	default:
	error_illegal_ident(); }
}

// LD SP Comma LParen YIY expr RParen End
void Parser::parse_main_action_4380() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xEDBC);
	break;
	default:
	error_illegal_ident(); }
}

// LD SP Comma LParen YP Colon expr RParen End
void Parser::parse_main_action_4381() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	add_opcode_nn(0xED7B, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD SP Comma LParen ZIX RParen End
void Parser::parse_main_action_4382() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xEDBD00);
	break;
	default:
	error_illegal_ident(); }
}

// LD SP Comma LParen ZIX expr RParen End
void Parser::parse_main_action_4383() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xEDBD);
	break;
	default:
	error_illegal_ident(); }
}

// LD SP Comma LParen ZIY RParen End
void Parser::parse_main_action_4384() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xEDBC00);
	break;
	default:
	error_illegal_ident(); }
}

// LD SP Comma LParen ZIY expr RParen End
void Parser::parse_main_action_4385() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xEDBC);
	break;
	default:
	error_illegal_ident(); }
}

// LD SP Comma LParen ZP Colon expr RParen End
void Parser::parse_main_action_4386() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x7F);
	add_opcode_nn(0xED7B, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD SP Comma expr End
void Parser::parse_main_action_4387() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	if (expr_in_parens()) { add_opcode_nn(0xED7B, 0); } else { add_opcode_nn(0x31, 0); }
	break;
	case CPU_EZ80: 
	if (expr_in_parens()) { add_opcode_nnn(0xED7B, 0); } else { add_opcode_nnn(0x31, 0); }
	break;
	case CPU_8080: case CPU_8085: case CPU_GBZ80: 
	warn_if_expr_in_parens();
	add_opcode_nn(0x31, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD XIX Comma LParen AIX RParen End
void Parser::parse_main_action_4388() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xED0900);
	break;
	default:
	error_illegal_ident(); }
}

// LD XIX Comma LParen AIX expr RParen End
void Parser::parse_main_action_4389() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xED09);
	break;
	default:
	error_illegal_ident(); }
}

// LD XIX Comma LParen AIY RParen End
void Parser::parse_main_action_4390() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xED0800);
	break;
	default:
	error_illegal_ident(); }
}

// LD XIX Comma LParen AIY expr RParen End
void Parser::parse_main_action_4391() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xED08);
	break;
	default:
	error_illegal_ident(); }
}

// LD XIX Comma LParen IX RParen End
void Parser::parse_main_action_4392() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xED0900);
	break;
	default:
	error_illegal_ident(); }
}

// LD XIX Comma LParen IX expr RParen End
void Parser::parse_main_action_4393() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode_idx(0xED09);
	break;
	default:
	error_illegal_ident(); }
}

// LD XIX Comma LParen IY RParen End
void Parser::parse_main_action_4394() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xED0800);
	break;
	default:
	error_illegal_ident(); }
}

// LD XIX Comma LParen IY expr RParen End
void Parser::parse_main_action_4395() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode_idx(0xED08);
	break;
	default:
	error_illegal_ident(); }
}

// LD XIX Comma LParen PIX RParen End
void Parser::parse_main_action_4396() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xED0900);
	break;
	default:
	error_illegal_ident(); }
}

// LD XIX Comma LParen PIX expr RParen End
void Parser::parse_main_action_4397() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xED09);
	break;
	default:
	error_illegal_ident(); }
}

// LD XIX Comma LParen PIY RParen End
void Parser::parse_main_action_4398() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xED0800);
	break;
	default:
	error_illegal_ident(); }
}

// LD XIX Comma LParen PIY expr RParen End
void Parser::parse_main_action_4399() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xED08);
	break;
	default:
	error_illegal_ident(); }
}

// LD XIX Comma LParen SP RParen End
void Parser::parse_main_action_4400() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xED0A00);
	break;
	default:
	error_illegal_ident(); }
}

// LD XIX Comma LParen SP expr RParen End
void Parser::parse_main_action_4401() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode_idx(0xED0A);
	break;
	default:
	error_illegal_ident(); }
}

// LD XIX Comma LParen XIX RParen End
void Parser::parse_main_action_4402() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xED0900);
	break;
	default:
	error_illegal_ident(); }
}

// LD XIX Comma LParen XIX expr RParen End
void Parser::parse_main_action_4403() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xED09);
	break;
	default:
	error_illegal_ident(); }
}

// LD XIX Comma LParen XIY RParen End
void Parser::parse_main_action_4404() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xED0800);
	break;
	default:
	error_illegal_ident(); }
}

// LD XIX Comma LParen XIY expr RParen End
void Parser::parse_main_action_4405() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xED08);
	break;
	default:
	error_illegal_ident(); }
}

// LD XIX Comma LParen YIX RParen End
void Parser::parse_main_action_4406() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xED0900);
	break;
	default:
	error_illegal_ident(); }
}

// LD XIX Comma LParen YIX expr RParen End
void Parser::parse_main_action_4407() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xED09);
	break;
	default:
	error_illegal_ident(); }
}

// LD XIX Comma LParen YIY RParen End
void Parser::parse_main_action_4408() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xED0800);
	break;
	default:
	error_illegal_ident(); }
}

// LD XIX Comma LParen YIY expr RParen End
void Parser::parse_main_action_4409() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xED08);
	break;
	default:
	error_illegal_ident(); }
}

// LD XIX Comma LParen ZIX RParen End
void Parser::parse_main_action_4410() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xED0900);
	break;
	default:
	error_illegal_ident(); }
}

// LD XIX Comma LParen ZIX expr RParen End
void Parser::parse_main_action_4411() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xED09);
	break;
	default:
	error_illegal_ident(); }
}

// LD XIX Comma LParen ZIY RParen End
void Parser::parse_main_action_4412() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xED0800);
	break;
	default:
	error_illegal_ident(); }
}

// LD XIX Comma LParen ZIY expr RParen End
void Parser::parse_main_action_4413() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xED08);
	break;
	default:
	error_illegal_ident(); }
}

// LD XIX Comma expr End
void Parser::parse_main_action_4414() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	warn_if_expr_in_parens();
	add_opcode_nnn(0xED0E, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD XP Comma A End
void Parser::parse_main_action_4415() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xEDD5);
	break;
	default:
	error_illegal_ident(); }
}

// LD XP Comma YP End
void Parser::parse_main_action_4416() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xEDD4);
	break;
	default:
	error_illegal_ident(); }
}

// LD XP Comma ZP End
void Parser::parse_main_action_4417() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xEDDC);
	break;
	default:
	error_illegal_ident(); }
}

// LD XPC Comma A End
void Parser::parse_main_action_4418() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xED67);
	break;
	default:
	error_illegal_ident(); }
}

// LD YIY Comma LParen AIX RParen End
void Parser::parse_main_action_4419() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xED1900);
	break;
	default:
	error_illegal_ident(); }
}

// LD YIY Comma LParen AIX expr RParen End
void Parser::parse_main_action_4420() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xED19);
	break;
	default:
	error_illegal_ident(); }
}

// LD YIY Comma LParen AIY RParen End
void Parser::parse_main_action_4421() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xED1800);
	break;
	default:
	error_illegal_ident(); }
}

// LD YIY Comma LParen AIY expr RParen End
void Parser::parse_main_action_4422() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xED18);
	break;
	default:
	error_illegal_ident(); }
}

// LD YIY Comma LParen IX RParen End
void Parser::parse_main_action_4423() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xED1900);
	break;
	default:
	error_illegal_ident(); }
}

// LD YIY Comma LParen IX expr RParen End
void Parser::parse_main_action_4424() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode_idx(0xED19);
	break;
	default:
	error_illegal_ident(); }
}

// LD YIY Comma LParen IY RParen End
void Parser::parse_main_action_4425() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xED1800);
	break;
	default:
	error_illegal_ident(); }
}

// LD YIY Comma LParen IY expr RParen End
void Parser::parse_main_action_4426() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode_idx(0xED18);
	break;
	default:
	error_illegal_ident(); }
}

// LD YIY Comma LParen PIX RParen End
void Parser::parse_main_action_4427() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xED1900);
	break;
	default:
	error_illegal_ident(); }
}

// LD YIY Comma LParen PIX expr RParen End
void Parser::parse_main_action_4428() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xED19);
	break;
	default:
	error_illegal_ident(); }
}

// LD YIY Comma LParen PIY RParen End
void Parser::parse_main_action_4429() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xED1800);
	break;
	default:
	error_illegal_ident(); }
}

// LD YIY Comma LParen PIY expr RParen End
void Parser::parse_main_action_4430() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xED18);
	break;
	default:
	error_illegal_ident(); }
}

// LD YIY Comma LParen SP RParen End
void Parser::parse_main_action_4431() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xED1A00);
	break;
	default:
	error_illegal_ident(); }
}

// LD YIY Comma LParen SP expr RParen End
void Parser::parse_main_action_4432() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode_idx(0xED1A);
	break;
	default:
	error_illegal_ident(); }
}

// LD YIY Comma LParen XIX RParen End
void Parser::parse_main_action_4433() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xED1900);
	break;
	default:
	error_illegal_ident(); }
}

// LD YIY Comma LParen XIX expr RParen End
void Parser::parse_main_action_4434() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xED19);
	break;
	default:
	error_illegal_ident(); }
}

// LD YIY Comma LParen XIY RParen End
void Parser::parse_main_action_4435() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xED1800);
	break;
	default:
	error_illegal_ident(); }
}

// LD YIY Comma LParen XIY expr RParen End
void Parser::parse_main_action_4436() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xED18);
	break;
	default:
	error_illegal_ident(); }
}

// LD YIY Comma LParen YIX RParen End
void Parser::parse_main_action_4437() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xED1900);
	break;
	default:
	error_illegal_ident(); }
}

// LD YIY Comma LParen YIX expr RParen End
void Parser::parse_main_action_4438() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xED19);
	break;
	default:
	error_illegal_ident(); }
}

// LD YIY Comma LParen YIY RParen End
void Parser::parse_main_action_4439() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xED1800);
	break;
	default:
	error_illegal_ident(); }
}

// LD YIY Comma LParen YIY expr RParen End
void Parser::parse_main_action_4440() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xED18);
	break;
	default:
	error_illegal_ident(); }
}

// LD YIY Comma LParen ZIX RParen End
void Parser::parse_main_action_4441() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xED1900);
	break;
	default:
	error_illegal_ident(); }
}

// LD YIY Comma LParen ZIX expr RParen End
void Parser::parse_main_action_4442() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xED19);
	break;
	default:
	error_illegal_ident(); }
}

// LD YIY Comma LParen ZIY RParen End
void Parser::parse_main_action_4443() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xED1800);
	break;
	default:
	error_illegal_ident(); }
}

// LD YIY Comma LParen ZIY expr RParen End
void Parser::parse_main_action_4444() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xED18);
	break;
	default:
	error_illegal_ident(); }
}

// LD YIY Comma expr End
void Parser::parse_main_action_4445() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	warn_if_expr_in_parens();
	add_opcode_nnn(0xED1E, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD YP Comma A End
void Parser::parse_main_action_4446() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xEDEC);
	break;
	default:
	error_illegal_ident(); }
}

// LD YP Comma XP End
void Parser::parse_main_action_4447() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xEDE4);
	break;
	default:
	error_illegal_ident(); }
}

// LD YP Comma ZP End
void Parser::parse_main_action_4448() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xEDE5);
	break;
	default:
	error_illegal_ident(); }
}

// LD ZP Comma A End
void Parser::parse_main_action_4449() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xEDF4);
	break;
	default:
	error_illegal_ident(); }
}

// LD ZP Comma XP End
void Parser::parse_main_action_4450() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xEDFC);
	break;
	default:
	error_illegal_ident(); }
}

// LD ZP Comma YP End
void Parser::parse_main_action_4451() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xEDF5);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot IL A Comma expr End | LD Dot SIL A Comma expr End
void Parser::parse_main_action_4452() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0x52);
	add_opcode_nnn(0x3A, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot IL expr Comma A End | LD Dot SIL expr Comma A End
void Parser::parse_main_action_4453() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0x52);
	add_opcode_nnn(0x32, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot IS A Comma expr End | LD Dot LIS A Comma expr End
void Parser::parse_main_action_4454() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0x49);
	add_opcode_nn(0x3A, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot IS expr Comma A End | LD Dot LIS expr Comma A End
void Parser::parse_main_action_4455() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0x49);
	add_opcode_nn(0x32, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L A Comma LParen BC Minus RParen End | LD Dot LIS A Comma LParen BC Minus RParen End | LDD Dot L A Comma LParen BC RParen End | LDD Dot LIS A Comma LParen BC RParen End
void Parser::parse_main_action_4456() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x0A);
	add_opcode(0x0B);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L A Comma LParen BC Plus RParen End | LD Dot LIS A Comma LParen BC Plus RParen End | LDI Dot L A Comma LParen BC RParen End | LDI Dot LIS A Comma LParen BC RParen End
void Parser::parse_main_action_4457() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x0A);
	add_opcode(0x03);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L A Comma LParen BC RParen End | LD Dot LIS A Comma LParen BC RParen End
void Parser::parse_main_action_4458() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x0A);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L A Comma LParen DE Minus RParen End | LD Dot LIS A Comma LParen DE Minus RParen End | LDD Dot L A Comma LParen DE RParen End | LDD Dot LIS A Comma LParen DE RParen End
void Parser::parse_main_action_4459() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x1A);
	add_opcode(0x1B);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L A Comma LParen DE Plus RParen End | LD Dot LIS A Comma LParen DE Plus RParen End | LDI Dot L A Comma LParen DE RParen End | LDI Dot LIS A Comma LParen DE RParen End
void Parser::parse_main_action_4460() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x1A);
	add_opcode(0x13);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L A Comma LParen DE RParen End | LD Dot LIS A Comma LParen DE RParen End
void Parser::parse_main_action_4461() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x1A);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L A Comma LParen HL Minus RParen End | LD Dot L A Comma LParen HLD RParen End | LD Dot LIS A Comma LParen HL Minus RParen End | LD Dot LIS A Comma LParen HLD RParen End | LDD Dot L A Comma LParen HL RParen End | LDD Dot LIS A Comma LParen HL RParen End
void Parser::parse_main_action_4462() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x7E);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L A Comma LParen HL Plus RParen End | LD Dot L A Comma LParen HLI RParen End | LD Dot LIS A Comma LParen HL Plus RParen End | LD Dot LIS A Comma LParen HLI RParen End | LDI Dot L A Comma LParen HL RParen End | LDI Dot LIS A Comma LParen HL RParen End
void Parser::parse_main_action_4463() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x7E);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L A Comma LParen HL RParen End | LD Dot LIS A Comma LParen HL RParen End
void Parser::parse_main_action_4464() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x7E);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L A Comma LParen IX RParen End | LD Dot LIS A Comma LParen IX RParen End
void Parser::parse_main_action_4465() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xDD7E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L A Comma LParen IX expr RParen End | LD Dot LIS A Comma LParen IX expr RParen End
void Parser::parse_main_action_4466() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xDD7E);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L A Comma LParen IY RParen End | LD Dot LIS A Comma LParen IY RParen End
void Parser::parse_main_action_4467() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xFD7E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L A Comma LParen IY expr RParen End | LD Dot LIS A Comma LParen IY expr RParen End
void Parser::parse_main_action_4468() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xFD7E);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L B Comma LParen HL Minus RParen End | LD Dot L B Comma LParen HLD RParen End | LD Dot LIS B Comma LParen HL Minus RParen End | LD Dot LIS B Comma LParen HLD RParen End | LDD Dot L B Comma LParen HL RParen End | LDD Dot LIS B Comma LParen HL RParen End
void Parser::parse_main_action_4469() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x46);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L B Comma LParen HL Plus RParen End | LD Dot L B Comma LParen HLI RParen End | LD Dot LIS B Comma LParen HL Plus RParen End | LD Dot LIS B Comma LParen HLI RParen End | LDI Dot L B Comma LParen HL RParen End | LDI Dot LIS B Comma LParen HL RParen End
void Parser::parse_main_action_4470() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x46);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L B Comma LParen HL RParen End | LD Dot LIS B Comma LParen HL RParen End
void Parser::parse_main_action_4471() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x46);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L B Comma LParen IX RParen End | LD Dot LIS B Comma LParen IX RParen End
void Parser::parse_main_action_4472() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xDD4600);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L B Comma LParen IX expr RParen End | LD Dot LIS B Comma LParen IX expr RParen End
void Parser::parse_main_action_4473() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xDD46);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L B Comma LParen IY RParen End | LD Dot LIS B Comma LParen IY RParen End
void Parser::parse_main_action_4474() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xFD4600);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L B Comma LParen IY expr RParen End | LD Dot LIS B Comma LParen IY expr RParen End
void Parser::parse_main_action_4475() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xFD46);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L BC Comma LParen HL Plus RParen End | LD Dot LIS BC Comma LParen HL Plus RParen End | LDI Dot L BC Comma LParen HL RParen End | LDI Dot LIS BC Comma LParen HL RParen End
void Parser::parse_main_action_4476() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xED07);
	add_opcode(0x23);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L BC Comma LParen HL RParen End | LD Dot LIS BC Comma LParen HL RParen End
void Parser::parse_main_action_4477() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xED07);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L BC Comma LParen IX RParen End | LD Dot LIS BC Comma LParen IX RParen End
void Parser::parse_main_action_4478() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xDD0700);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L BC Comma LParen IX expr RParen End | LD Dot LIS BC Comma LParen IX expr RParen End
void Parser::parse_main_action_4479() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xDD07);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L BC Comma LParen IY RParen End | LD Dot LIS BC Comma LParen IY RParen End
void Parser::parse_main_action_4480() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xFD0700);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L BC Comma LParen IY expr RParen End | LD Dot LIS BC Comma LParen IY expr RParen End
void Parser::parse_main_action_4481() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xFD07);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L C Comma LParen HL Minus RParen End | LD Dot L C Comma LParen HLD RParen End | LD Dot LIS C Comma LParen HL Minus RParen End | LD Dot LIS C Comma LParen HLD RParen End | LDD Dot L C Comma LParen HL RParen End | LDD Dot LIS C Comma LParen HL RParen End
void Parser::parse_main_action_4482() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x4E);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L C Comma LParen HL Plus RParen End | LD Dot L C Comma LParen HLI RParen End | LD Dot LIS C Comma LParen HL Plus RParen End | LD Dot LIS C Comma LParen HLI RParen End | LDI Dot L C Comma LParen HL RParen End | LDI Dot LIS C Comma LParen HL RParen End
void Parser::parse_main_action_4483() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x4E);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L C Comma LParen HL RParen End | LD Dot LIS C Comma LParen HL RParen End
void Parser::parse_main_action_4484() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x4E);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L C Comma LParen IX RParen End | LD Dot LIS C Comma LParen IX RParen End
void Parser::parse_main_action_4485() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xDD4E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L C Comma LParen IX expr RParen End | LD Dot LIS C Comma LParen IX expr RParen End
void Parser::parse_main_action_4486() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xDD4E);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L C Comma LParen IY RParen End | LD Dot LIS C Comma LParen IY RParen End
void Parser::parse_main_action_4487() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xFD4E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L C Comma LParen IY expr RParen End | LD Dot LIS C Comma LParen IY expr RParen End
void Parser::parse_main_action_4488() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xFD4E);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L D Comma LParen HL Minus RParen End | LD Dot L D Comma LParen HLD RParen End | LD Dot LIS D Comma LParen HL Minus RParen End | LD Dot LIS D Comma LParen HLD RParen End | LDD Dot L D Comma LParen HL RParen End | LDD Dot LIS D Comma LParen HL RParen End
void Parser::parse_main_action_4489() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x56);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L D Comma LParen HL Plus RParen End | LD Dot L D Comma LParen HLI RParen End | LD Dot LIS D Comma LParen HL Plus RParen End | LD Dot LIS D Comma LParen HLI RParen End | LDI Dot L D Comma LParen HL RParen End | LDI Dot LIS D Comma LParen HL RParen End
void Parser::parse_main_action_4490() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x56);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L D Comma LParen HL RParen End | LD Dot LIS D Comma LParen HL RParen End
void Parser::parse_main_action_4491() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x56);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L D Comma LParen IX RParen End | LD Dot LIS D Comma LParen IX RParen End
void Parser::parse_main_action_4492() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xDD5600);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L D Comma LParen IX expr RParen End | LD Dot LIS D Comma LParen IX expr RParen End
void Parser::parse_main_action_4493() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xDD56);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L D Comma LParen IY RParen End | LD Dot LIS D Comma LParen IY RParen End
void Parser::parse_main_action_4494() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xFD5600);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L D Comma LParen IY expr RParen End | LD Dot LIS D Comma LParen IY expr RParen End
void Parser::parse_main_action_4495() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xFD56);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L DE Comma LParen HL Plus RParen End | LD Dot LIS DE Comma LParen HL Plus RParen End | LDI Dot L DE Comma LParen HL RParen End | LDI Dot LIS DE Comma LParen HL RParen End
void Parser::parse_main_action_4496() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xED17);
	add_opcode(0x23);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L DE Comma LParen HL RParen End | LD Dot LIS DE Comma LParen HL RParen End
void Parser::parse_main_action_4497() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xED17);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L DE Comma LParen IX RParen End | LD Dot LIS DE Comma LParen IX RParen End
void Parser::parse_main_action_4498() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xDD1700);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L DE Comma LParen IX expr RParen End | LD Dot LIS DE Comma LParen IX expr RParen End
void Parser::parse_main_action_4499() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xDD17);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L DE Comma LParen IY RParen End | LD Dot LIS DE Comma LParen IY RParen End
void Parser::parse_main_action_4500() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xFD1700);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L DE Comma LParen IY expr RParen End | LD Dot LIS DE Comma LParen IY expr RParen End
void Parser::parse_main_action_4501() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xFD17);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L E Comma LParen HL Minus RParen End | LD Dot L E Comma LParen HLD RParen End | LD Dot LIS E Comma LParen HL Minus RParen End | LD Dot LIS E Comma LParen HLD RParen End | LDD Dot L E Comma LParen HL RParen End | LDD Dot LIS E Comma LParen HL RParen End
void Parser::parse_main_action_4502() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x5E);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L E Comma LParen HL Plus RParen End | LD Dot L E Comma LParen HLI RParen End | LD Dot LIS E Comma LParen HL Plus RParen End | LD Dot LIS E Comma LParen HLI RParen End | LDI Dot L E Comma LParen HL RParen End | LDI Dot LIS E Comma LParen HL RParen End
void Parser::parse_main_action_4503() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x5E);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L E Comma LParen HL RParen End | LD Dot LIS E Comma LParen HL RParen End
void Parser::parse_main_action_4504() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x5E);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L E Comma LParen IX RParen End | LD Dot LIS E Comma LParen IX RParen End
void Parser::parse_main_action_4505() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xDD5E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L E Comma LParen IX expr RParen End | LD Dot LIS E Comma LParen IX expr RParen End
void Parser::parse_main_action_4506() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xDD5E);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L E Comma LParen IY RParen End | LD Dot LIS E Comma LParen IY RParen End
void Parser::parse_main_action_4507() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xFD5E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L E Comma LParen IY expr RParen End | LD Dot LIS E Comma LParen IY expr RParen End
void Parser::parse_main_action_4508() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xFD5E);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L H Comma LParen HL Minus RParen End | LD Dot L H Comma LParen HLD RParen End | LD Dot LIS H Comma LParen HL Minus RParen End | LD Dot LIS H Comma LParen HLD RParen End | LDD Dot L H Comma LParen HL RParen End | LDD Dot LIS H Comma LParen HL RParen End
void Parser::parse_main_action_4509() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x66);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L H Comma LParen HL Plus RParen End | LD Dot L H Comma LParen HLI RParen End | LD Dot LIS H Comma LParen HL Plus RParen End | LD Dot LIS H Comma LParen HLI RParen End | LDI Dot L H Comma LParen HL RParen End | LDI Dot LIS H Comma LParen HL RParen End
void Parser::parse_main_action_4510() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x66);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L H Comma LParen HL RParen End | LD Dot LIS H Comma LParen HL RParen End
void Parser::parse_main_action_4511() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x66);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L H Comma LParen IX RParen End | LD Dot LIS H Comma LParen IX RParen End
void Parser::parse_main_action_4512() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xDD6600);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L H Comma LParen IX expr RParen End | LD Dot LIS H Comma LParen IX expr RParen End
void Parser::parse_main_action_4513() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xDD66);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L H Comma LParen IY RParen End | LD Dot LIS H Comma LParen IY RParen End
void Parser::parse_main_action_4514() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xFD6600);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L H Comma LParen IY expr RParen End | LD Dot LIS H Comma LParen IY expr RParen End
void Parser::parse_main_action_4515() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xFD66);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L HL Comma LParen HL Plus RParen End | LD Dot LIS HL Comma LParen HL Plus RParen End | LDI Dot L HL Comma LParen HL RParen End | LDI Dot LIS HL Comma LParen HL RParen End
void Parser::parse_main_action_4516() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xED27);
	add_opcode(0x23);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L HL Comma LParen HL RParen End | LD Dot LIS HL Comma LParen HL RParen End
void Parser::parse_main_action_4517() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xED27);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L HL Comma LParen IX RParen End | LD Dot LIS HL Comma LParen IX RParen End
void Parser::parse_main_action_4518() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xDD2700);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L HL Comma LParen IX expr RParen End | LD Dot LIS HL Comma LParen IX expr RParen End
void Parser::parse_main_action_4519() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xDD27);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L HL Comma LParen IY RParen End | LD Dot LIS HL Comma LParen IY RParen End
void Parser::parse_main_action_4520() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xFD2700);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L HL Comma LParen IY expr RParen End | LD Dot LIS HL Comma LParen IY expr RParen End
void Parser::parse_main_action_4521() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xFD27);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L IX Comma LParen HL Plus RParen End | LD Dot LIS IX Comma LParen HL Plus RParen End | LDI Dot L IX Comma LParen HL RParen End | LDI Dot LIS IX Comma LParen HL RParen End
void Parser::parse_main_action_4522() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xED37);
	add_opcode(0x23);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L IX Comma LParen HL RParen End | LD Dot LIS IX Comma LParen HL RParen End
void Parser::parse_main_action_4523() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xED37);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L IX Comma LParen IX RParen End | LD Dot LIS IX Comma LParen IX RParen End
void Parser::parse_main_action_4524() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xDD3700);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L IX Comma LParen IX expr RParen End | LD Dot LIS IX Comma LParen IX expr RParen End
void Parser::parse_main_action_4525() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xDD37);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L IX Comma LParen IY RParen End | LD Dot LIS IX Comma LParen IY RParen End
void Parser::parse_main_action_4526() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xFD3100);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L IX Comma LParen IY expr RParen End | LD Dot LIS IX Comma LParen IY expr RParen End
void Parser::parse_main_action_4527() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xFD31);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L IY Comma LParen HL Plus RParen End | LD Dot LIS IY Comma LParen HL Plus RParen End | LDI Dot L IY Comma LParen HL RParen End | LDI Dot LIS IY Comma LParen HL RParen End
void Parser::parse_main_action_4528() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xED31);
	add_opcode(0x23);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L IY Comma LParen HL RParen End | LD Dot LIS IY Comma LParen HL RParen End
void Parser::parse_main_action_4529() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xED31);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L IY Comma LParen IX RParen End | LD Dot LIS IY Comma LParen IX RParen End
void Parser::parse_main_action_4530() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xDD3100);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L IY Comma LParen IX expr RParen End | LD Dot LIS IY Comma LParen IX expr RParen End
void Parser::parse_main_action_4531() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xDD31);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L IY Comma LParen IY RParen End | LD Dot LIS IY Comma LParen IY RParen End
void Parser::parse_main_action_4532() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xFD3700);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L IY Comma LParen IY expr RParen End | LD Dot LIS IY Comma LParen IY expr RParen End
void Parser::parse_main_action_4533() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xFD37);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L L Comma LParen HL Minus RParen End | LD Dot L L Comma LParen HLD RParen End | LD Dot LIS L Comma LParen HL Minus RParen End | LD Dot LIS L Comma LParen HLD RParen End | LDD Dot L L Comma LParen HL RParen End | LDD Dot LIS L Comma LParen HL RParen End
void Parser::parse_main_action_4534() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x6E);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L L Comma LParen HL Plus RParen End | LD Dot L L Comma LParen HLI RParen End | LD Dot LIS L Comma LParen HL Plus RParen End | LD Dot LIS L Comma LParen HLI RParen End | LDI Dot L L Comma LParen HL RParen End | LDI Dot LIS L Comma LParen HL RParen End
void Parser::parse_main_action_4535() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x6E);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L L Comma LParen HL RParen End | LD Dot LIS L Comma LParen HL RParen End
void Parser::parse_main_action_4536() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x6E);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L L Comma LParen IX RParen End | LD Dot LIS L Comma LParen IX RParen End
void Parser::parse_main_action_4537() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xDD6E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L L Comma LParen IX expr RParen End | LD Dot LIS L Comma LParen IX expr RParen End
void Parser::parse_main_action_4538() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xDD6E);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L L Comma LParen IY RParen End | LD Dot LIS L Comma LParen IY RParen End
void Parser::parse_main_action_4539() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xFD6E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L L Comma LParen IY expr RParen End | LD Dot LIS L Comma LParen IY expr RParen End
void Parser::parse_main_action_4540() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xFD6E);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L SP Comma HL End | LD Dot LIS SP Comma HL End
void Parser::parse_main_action_4541() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xF9);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L SP Comma IX End | LD Dot LIS SP Comma IX End
void Parser::parse_main_action_4542() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xDDF9);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L SP Comma IY End | LD Dot LIS SP Comma IY End
void Parser::parse_main_action_4543() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xFDF9);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen BC Minus RParen Comma A End | LD Dot LIS LParen BC Minus RParen Comma A End | LDD Dot L LParen BC RParen Comma A End | LDD Dot LIS LParen BC RParen Comma A End
void Parser::parse_main_action_4544() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x02);
	add_opcode(0x0B);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen BC Plus RParen Comma A End | LD Dot LIS LParen BC Plus RParen Comma A End | LDI Dot L LParen BC RParen Comma A End | LDI Dot LIS LParen BC RParen Comma A End
void Parser::parse_main_action_4545() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x02);
	add_opcode(0x03);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen BC RParen Comma A End | LD Dot LIS LParen BC RParen Comma A End
void Parser::parse_main_action_4546() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x02);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen DE Minus RParen Comma A End | LD Dot LIS LParen DE Minus RParen Comma A End | LDD Dot L LParen DE RParen Comma A End | LDD Dot LIS LParen DE RParen Comma A End
void Parser::parse_main_action_4547() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x12);
	add_opcode(0x1B);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen DE Plus RParen Comma A End | LD Dot LIS LParen DE Plus RParen Comma A End | LDI Dot L LParen DE RParen Comma A End | LDI Dot LIS LParen DE RParen Comma A End
void Parser::parse_main_action_4548() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x12);
	add_opcode(0x13);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen DE RParen Comma A End | LD Dot LIS LParen DE RParen Comma A End
void Parser::parse_main_action_4549() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x12);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen HL Minus RParen Comma A End | LD Dot L LParen HLD RParen Comma A End | LD Dot LIS LParen HL Minus RParen Comma A End | LD Dot LIS LParen HLD RParen Comma A End | LDD Dot L LParen HL RParen Comma A End | LDD Dot LIS LParen HL RParen Comma A End
void Parser::parse_main_action_4550() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x77);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen HL Minus RParen Comma B End | LD Dot L LParen HLD RParen Comma B End | LD Dot LIS LParen HL Minus RParen Comma B End | LD Dot LIS LParen HLD RParen Comma B End | LDD Dot L LParen HL RParen Comma B End | LDD Dot LIS LParen HL RParen Comma B End
void Parser::parse_main_action_4551() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x70);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen HL Minus RParen Comma C End | LD Dot L LParen HLD RParen Comma C End | LD Dot LIS LParen HL Minus RParen Comma C End | LD Dot LIS LParen HLD RParen Comma C End | LDD Dot L LParen HL RParen Comma C End | LDD Dot LIS LParen HL RParen Comma C End
void Parser::parse_main_action_4552() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x71);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen HL Minus RParen Comma D End | LD Dot L LParen HLD RParen Comma D End | LD Dot LIS LParen HL Minus RParen Comma D End | LD Dot LIS LParen HLD RParen Comma D End | LDD Dot L LParen HL RParen Comma D End | LDD Dot LIS LParen HL RParen Comma D End
void Parser::parse_main_action_4553() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x72);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen HL Minus RParen Comma E End | LD Dot L LParen HLD RParen Comma E End | LD Dot LIS LParen HL Minus RParen Comma E End | LD Dot LIS LParen HLD RParen Comma E End | LDD Dot L LParen HL RParen Comma E End | LDD Dot LIS LParen HL RParen Comma E End
void Parser::parse_main_action_4554() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x73);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen HL Minus RParen Comma H End | LD Dot L LParen HLD RParen Comma H End | LD Dot LIS LParen HL Minus RParen Comma H End | LD Dot LIS LParen HLD RParen Comma H End | LDD Dot L LParen HL RParen Comma H End | LDD Dot LIS LParen HL RParen Comma H End
void Parser::parse_main_action_4555() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x74);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen HL Minus RParen Comma L End | LD Dot L LParen HLD RParen Comma L End | LD Dot LIS LParen HL Minus RParen Comma L End | LD Dot LIS LParen HLD RParen Comma L End | LDD Dot L LParen HL RParen Comma L End | LDD Dot LIS LParen HL RParen Comma L End
void Parser::parse_main_action_4556() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x75);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen HL Minus RParen Comma expr End | LD Dot LIS LParen HL Minus RParen Comma expr End | LDD Dot L LParen HL RParen Comma expr End | LDD Dot LIS LParen HL RParen Comma expr End
void Parser::parse_main_action_4557() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	add_opcode_n(0x36);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen HL Plus RParen Comma A End | LD Dot L LParen HLI RParen Comma A End | LD Dot LIS LParen HL Plus RParen Comma A End | LD Dot LIS LParen HLI RParen Comma A End | LDI Dot L LParen HL RParen Comma A End | LDI Dot LIS LParen HL RParen Comma A End
void Parser::parse_main_action_4558() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x77);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen HL Plus RParen Comma B End | LD Dot L LParen HLI RParen Comma B End | LD Dot LIS LParen HL Plus RParen Comma B End | LD Dot LIS LParen HLI RParen Comma B End | LDI Dot L LParen HL RParen Comma B End | LDI Dot LIS LParen HL RParen Comma B End
void Parser::parse_main_action_4559() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x70);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen HL Plus RParen Comma BC End | LD Dot LIS LParen HL Plus RParen Comma BC End | LDI Dot L LParen HL RParen Comma BC End | LDI Dot LIS LParen HL RParen Comma BC End
void Parser::parse_main_action_4560() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xED0F);
	add_opcode(0x23);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen HL Plus RParen Comma C End | LD Dot L LParen HLI RParen Comma C End | LD Dot LIS LParen HL Plus RParen Comma C End | LD Dot LIS LParen HLI RParen Comma C End | LDI Dot L LParen HL RParen Comma C End | LDI Dot LIS LParen HL RParen Comma C End
void Parser::parse_main_action_4561() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x71);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen HL Plus RParen Comma D End | LD Dot L LParen HLI RParen Comma D End | LD Dot LIS LParen HL Plus RParen Comma D End | LD Dot LIS LParen HLI RParen Comma D End | LDI Dot L LParen HL RParen Comma D End | LDI Dot LIS LParen HL RParen Comma D End
void Parser::parse_main_action_4562() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x72);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen HL Plus RParen Comma DE End | LD Dot LIS LParen HL Plus RParen Comma DE End | LDI Dot L LParen HL RParen Comma DE End | LDI Dot LIS LParen HL RParen Comma DE End
void Parser::parse_main_action_4563() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xED1F);
	add_opcode(0x23);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen HL Plus RParen Comma E End | LD Dot L LParen HLI RParen Comma E End | LD Dot LIS LParen HL Plus RParen Comma E End | LD Dot LIS LParen HLI RParen Comma E End | LDI Dot L LParen HL RParen Comma E End | LDI Dot LIS LParen HL RParen Comma E End
void Parser::parse_main_action_4564() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x73);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen HL Plus RParen Comma H End | LD Dot L LParen HLI RParen Comma H End | LD Dot LIS LParen HL Plus RParen Comma H End | LD Dot LIS LParen HLI RParen Comma H End | LDI Dot L LParen HL RParen Comma H End | LDI Dot LIS LParen HL RParen Comma H End
void Parser::parse_main_action_4565() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x74);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen HL Plus RParen Comma HL End | LD Dot LIS LParen HL Plus RParen Comma HL End | LDI Dot L LParen HL RParen Comma HL End | LDI Dot LIS LParen HL RParen Comma HL End
void Parser::parse_main_action_4566() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xED2F);
	add_opcode(0x23);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen HL Plus RParen Comma IX End | LD Dot LIS LParen HL Plus RParen Comma IX End | LDI Dot L LParen HL RParen Comma IX End | LDI Dot LIS LParen HL RParen Comma IX End
void Parser::parse_main_action_4567() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xED3F);
	add_opcode(0x23);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen HL Plus RParen Comma IY End | LD Dot LIS LParen HL Plus RParen Comma IY End | LDI Dot L LParen HL RParen Comma IY End | LDI Dot LIS LParen HL RParen Comma IY End
void Parser::parse_main_action_4568() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xED3E);
	add_opcode(0x23);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen HL Plus RParen Comma L End | LD Dot L LParen HLI RParen Comma L End | LD Dot LIS LParen HL Plus RParen Comma L End | LD Dot LIS LParen HLI RParen Comma L End | LDI Dot L LParen HL RParen Comma L End | LDI Dot LIS LParen HL RParen Comma L End
void Parser::parse_main_action_4569() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x75);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen HL Plus RParen Comma expr End | LD Dot LIS LParen HL Plus RParen Comma expr End | LDI Dot L LParen HL RParen Comma expr End | LDI Dot LIS LParen HL RParen Comma expr End
void Parser::parse_main_action_4570() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	add_opcode_n(0x36);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen HL RParen Comma A End | LD Dot LIS LParen HL RParen Comma A End
void Parser::parse_main_action_4571() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x77);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen HL RParen Comma B End | LD Dot LIS LParen HL RParen Comma B End
void Parser::parse_main_action_4572() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x70);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen HL RParen Comma BC End | LD Dot LIS LParen HL RParen Comma BC End
void Parser::parse_main_action_4573() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xED0F);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen HL RParen Comma C End | LD Dot LIS LParen HL RParen Comma C End
void Parser::parse_main_action_4574() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x71);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen HL RParen Comma D End | LD Dot LIS LParen HL RParen Comma D End
void Parser::parse_main_action_4575() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x72);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen HL RParen Comma DE End | LD Dot LIS LParen HL RParen Comma DE End
void Parser::parse_main_action_4576() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xED1F);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen HL RParen Comma E End | LD Dot LIS LParen HL RParen Comma E End
void Parser::parse_main_action_4577() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x73);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen HL RParen Comma H End | LD Dot LIS LParen HL RParen Comma H End
void Parser::parse_main_action_4578() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x74);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen HL RParen Comma HL End | LD Dot LIS LParen HL RParen Comma HL End
void Parser::parse_main_action_4579() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xED2F);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen HL RParen Comma IX End | LD Dot LIS LParen HL RParen Comma IX End
void Parser::parse_main_action_4580() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xED3F);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen HL RParen Comma IY End | LD Dot LIS LParen HL RParen Comma IY End
void Parser::parse_main_action_4581() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xED3E);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen HL RParen Comma L End | LD Dot LIS LParen HL RParen Comma L End
void Parser::parse_main_action_4582() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x75);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen HL RParen Comma expr End | LD Dot LIS LParen HL RParen Comma expr End
void Parser::parse_main_action_4583() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	add_opcode_n(0x36);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen IX RParen Comma A End | LD Dot LIS LParen IX RParen Comma A End
void Parser::parse_main_action_4584() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xDD7700);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen IX RParen Comma B End | LD Dot LIS LParen IX RParen Comma B End
void Parser::parse_main_action_4585() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xDD7000);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen IX RParen Comma BC End | LD Dot LIS LParen IX RParen Comma BC End
void Parser::parse_main_action_4586() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xDD0F00);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen IX RParen Comma C End | LD Dot LIS LParen IX RParen Comma C End
void Parser::parse_main_action_4587() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xDD7100);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen IX RParen Comma D End | LD Dot LIS LParen IX RParen Comma D End
void Parser::parse_main_action_4588() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xDD7200);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen IX RParen Comma DE End | LD Dot LIS LParen IX RParen Comma DE End
void Parser::parse_main_action_4589() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xDD1F00);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen IX RParen Comma E End | LD Dot LIS LParen IX RParen Comma E End
void Parser::parse_main_action_4590() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xDD7300);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen IX RParen Comma H End | LD Dot LIS LParen IX RParen Comma H End
void Parser::parse_main_action_4591() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xDD7400);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen IX RParen Comma HL End | LD Dot LIS LParen IX RParen Comma HL End
void Parser::parse_main_action_4592() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xDD2F00);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen IX RParen Comma IX End | LD Dot LIS LParen IX RParen Comma IX End
void Parser::parse_main_action_4593() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xDD3F00);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen IX RParen Comma IY End | LD Dot LIS LParen IX RParen Comma IY End
void Parser::parse_main_action_4594() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xDD3E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen IX RParen Comma L End | LD Dot LIS LParen IX RParen Comma L End
void Parser::parse_main_action_4595() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xDD7500);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen IX RParen Comma expr End | LD Dot LIS LParen IX RParen Comma expr End
void Parser::parse_main_action_4596() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	add_opcode_n(0xDD3600);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen IX expr RParen Comma A End | LD Dot LIS LParen IX expr RParen Comma A End
void Parser::parse_main_action_4597() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xDD77);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen IX expr RParen Comma B End | LD Dot LIS LParen IX expr RParen Comma B End
void Parser::parse_main_action_4598() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xDD70);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen IX expr RParen Comma BC End | LD Dot LIS LParen IX expr RParen Comma BC End
void Parser::parse_main_action_4599() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xDD0F);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen IX expr RParen Comma C End | LD Dot LIS LParen IX expr RParen Comma C End
void Parser::parse_main_action_4600() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xDD71);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen IX expr RParen Comma D End | LD Dot LIS LParen IX expr RParen Comma D End
void Parser::parse_main_action_4601() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xDD72);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen IX expr RParen Comma DE End | LD Dot LIS LParen IX expr RParen Comma DE End
void Parser::parse_main_action_4602() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xDD1F);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen IX expr RParen Comma E End | LD Dot LIS LParen IX expr RParen Comma E End
void Parser::parse_main_action_4603() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xDD73);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen IX expr RParen Comma H End | LD Dot LIS LParen IX expr RParen Comma H End
void Parser::parse_main_action_4604() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xDD74);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen IX expr RParen Comma HL End | LD Dot LIS LParen IX expr RParen Comma HL End
void Parser::parse_main_action_4605() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xDD2F);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen IX expr RParen Comma IX End | LD Dot LIS LParen IX expr RParen Comma IX End
void Parser::parse_main_action_4606() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xDD3F);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen IX expr RParen Comma IY End | LD Dot LIS LParen IX expr RParen Comma IY End
void Parser::parse_main_action_4607() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xDD3E);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen IX expr RParen Comma L End | LD Dot LIS LParen IX expr RParen Comma L End
void Parser::parse_main_action_4608() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xDD75);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen IX expr RParen Comma expr End | LD Dot LIS LParen IX expr RParen Comma expr End
void Parser::parse_main_action_4609() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	add_opcode_idx_n(0xDD36);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen IY RParen Comma A End | LD Dot LIS LParen IY RParen Comma A End
void Parser::parse_main_action_4610() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xFD7700);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen IY RParen Comma B End | LD Dot LIS LParen IY RParen Comma B End
void Parser::parse_main_action_4611() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xFD7000);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen IY RParen Comma BC End | LD Dot LIS LParen IY RParen Comma BC End
void Parser::parse_main_action_4612() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xFD0F00);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen IY RParen Comma C End | LD Dot LIS LParen IY RParen Comma C End
void Parser::parse_main_action_4613() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xFD7100);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen IY RParen Comma D End | LD Dot LIS LParen IY RParen Comma D End
void Parser::parse_main_action_4614() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xFD7200);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen IY RParen Comma DE End | LD Dot LIS LParen IY RParen Comma DE End
void Parser::parse_main_action_4615() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xFD1F00);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen IY RParen Comma E End | LD Dot LIS LParen IY RParen Comma E End
void Parser::parse_main_action_4616() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xFD7300);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen IY RParen Comma H End | LD Dot LIS LParen IY RParen Comma H End
void Parser::parse_main_action_4617() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xFD7400);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen IY RParen Comma HL End | LD Dot LIS LParen IY RParen Comma HL End
void Parser::parse_main_action_4618() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xFD2F00);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen IY RParen Comma IX End | LD Dot LIS LParen IY RParen Comma IX End
void Parser::parse_main_action_4619() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xFD3E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen IY RParen Comma IY End | LD Dot LIS LParen IY RParen Comma IY End
void Parser::parse_main_action_4620() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xFD3F00);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen IY RParen Comma L End | LD Dot LIS LParen IY RParen Comma L End
void Parser::parse_main_action_4621() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xFD7500);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen IY RParen Comma expr End | LD Dot LIS LParen IY RParen Comma expr End
void Parser::parse_main_action_4622() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	add_opcode_n(0xFD3600);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen IY expr RParen Comma A End | LD Dot LIS LParen IY expr RParen Comma A End
void Parser::parse_main_action_4623() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xFD77);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen IY expr RParen Comma B End | LD Dot LIS LParen IY expr RParen Comma B End
void Parser::parse_main_action_4624() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xFD70);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen IY expr RParen Comma BC End | LD Dot LIS LParen IY expr RParen Comma BC End
void Parser::parse_main_action_4625() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xFD0F);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen IY expr RParen Comma C End | LD Dot LIS LParen IY expr RParen Comma C End
void Parser::parse_main_action_4626() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xFD71);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen IY expr RParen Comma D End | LD Dot LIS LParen IY expr RParen Comma D End
void Parser::parse_main_action_4627() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xFD72);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen IY expr RParen Comma DE End | LD Dot LIS LParen IY expr RParen Comma DE End
void Parser::parse_main_action_4628() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xFD1F);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen IY expr RParen Comma E End | LD Dot LIS LParen IY expr RParen Comma E End
void Parser::parse_main_action_4629() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xFD73);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen IY expr RParen Comma H End | LD Dot LIS LParen IY expr RParen Comma H End
void Parser::parse_main_action_4630() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xFD74);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen IY expr RParen Comma HL End | LD Dot LIS LParen IY expr RParen Comma HL End
void Parser::parse_main_action_4631() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xFD2F);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen IY expr RParen Comma IX End | LD Dot LIS LParen IY expr RParen Comma IX End
void Parser::parse_main_action_4632() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xFD3E);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen IY expr RParen Comma IY End | LD Dot LIS LParen IY expr RParen Comma IY End
void Parser::parse_main_action_4633() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xFD3F);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen IY expr RParen Comma L End | LD Dot LIS LParen IY expr RParen Comma L End
void Parser::parse_main_action_4634() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xFD75);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot L LParen IY expr RParen Comma expr End | LD Dot LIS LParen IY expr RParen Comma expr End
void Parser::parse_main_action_4635() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	add_opcode_idx_n(0xFD36);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot LIL BC Comma expr End
void Parser::parse_main_action_4636() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	if (expr_in_parens()) { add_opcode(0x5B);
	add_opcode_nnn(0xED4B, 0); } else { add_opcode(0x5B);
	add_opcode_nnn(0x01, 0); }
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot LIL DE Comma expr End
void Parser::parse_main_action_4637() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	if (expr_in_parens()) { add_opcode(0x5B);
	add_opcode_nnn(0xED5B, 0); } else { add_opcode(0x5B);
	add_opcode_nnn(0x11, 0); }
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot LIL HL Comma expr End
void Parser::parse_main_action_4638() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	if (expr_in_parens()) { add_opcode(0x5B);
	add_opcode_nnn(0x2A, 0); } else { add_opcode(0x5B);
	add_opcode_nnn(0x21, 0); }
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot LIL IX Comma expr End
void Parser::parse_main_action_4639() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	if (expr_in_parens()) { add_opcode(0x5B);
	add_opcode_nnn(0xDD2A, 0); } else { add_opcode(0x5B);
	add_opcode_nnn(0xDD21, 0); }
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot LIL IY Comma expr End
void Parser::parse_main_action_4640() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	if (expr_in_parens()) { add_opcode(0x5B);
	add_opcode_nnn(0xFD2A, 0); } else { add_opcode(0x5B);
	add_opcode_nnn(0xFD21, 0); }
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot LIL SP Comma expr End
void Parser::parse_main_action_4641() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	if (expr_in_parens()) { add_opcode(0x5B);
	add_opcode_nnn(0xED7B, 0); } else { add_opcode(0x5B);
	add_opcode_nnn(0x31, 0); }
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot LIL expr Comma BC End
void Parser::parse_main_action_4642() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0x5B);
	add_opcode_nnn(0xED43, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot LIL expr Comma DE End
void Parser::parse_main_action_4643() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0x5B);
	add_opcode_nnn(0xED53, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot LIL expr Comma HL End
void Parser::parse_main_action_4644() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0x5B);
	add_opcode_nnn(0x22, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot LIL expr Comma IX End
void Parser::parse_main_action_4645() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0x5B);
	add_opcode_nnn(0xDD22, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot LIL expr Comma IY End
void Parser::parse_main_action_4646() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0x5B);
	add_opcode_nnn(0xFD22, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot LIL expr Comma SP End
void Parser::parse_main_action_4647() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0x5B);
	add_opcode_nnn(0xED73, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot LIS BC Comma expr End
void Parser::parse_main_action_4648() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	add_opcode_nn(0x01, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot LIS DE Comma expr End
void Parser::parse_main_action_4649() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	add_opcode_nn(0x11, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot LIS HL Comma expr End
void Parser::parse_main_action_4650() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	add_opcode_nn(0x21, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot LIS SP Comma expr End
void Parser::parse_main_action_4651() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	add_opcode_nn(0x31, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S A Comma LParen BC Minus RParen End | LD Dot SIL A Comma LParen BC Minus RParen End | LDD Dot S A Comma LParen BC RParen End | LDD Dot SIL A Comma LParen BC RParen End
void Parser::parse_main_action_4652() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x0A);
	add_opcode(0x0B);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S A Comma LParen BC Plus RParen End | LD Dot SIL A Comma LParen BC Plus RParen End | LDI Dot S A Comma LParen BC RParen End | LDI Dot SIL A Comma LParen BC RParen End
void Parser::parse_main_action_4653() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x0A);
	add_opcode(0x03);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S A Comma LParen BC RParen End | LD Dot SIL A Comma LParen BC RParen End
void Parser::parse_main_action_4654() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x0A);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S A Comma LParen DE Minus RParen End | LD Dot SIL A Comma LParen DE Minus RParen End | LDD Dot S A Comma LParen DE RParen End | LDD Dot SIL A Comma LParen DE RParen End
void Parser::parse_main_action_4655() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x1A);
	add_opcode(0x1B);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S A Comma LParen DE Plus RParen End | LD Dot SIL A Comma LParen DE Plus RParen End | LDI Dot S A Comma LParen DE RParen End | LDI Dot SIL A Comma LParen DE RParen End
void Parser::parse_main_action_4656() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x1A);
	add_opcode(0x13);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S A Comma LParen DE RParen End | LD Dot SIL A Comma LParen DE RParen End
void Parser::parse_main_action_4657() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x1A);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S A Comma LParen HL Minus RParen End | LD Dot S A Comma LParen HLD RParen End | LD Dot SIL A Comma LParen HL Minus RParen End | LD Dot SIL A Comma LParen HLD RParen End | LDD Dot S A Comma LParen HL RParen End | LDD Dot SIL A Comma LParen HL RParen End
void Parser::parse_main_action_4658() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x7E);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S A Comma LParen HL Plus RParen End | LD Dot S A Comma LParen HLI RParen End | LD Dot SIL A Comma LParen HL Plus RParen End | LD Dot SIL A Comma LParen HLI RParen End | LDI Dot S A Comma LParen HL RParen End | LDI Dot SIL A Comma LParen HL RParen End
void Parser::parse_main_action_4659() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x7E);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S A Comma LParen HL RParen End | LD Dot SIL A Comma LParen HL RParen End
void Parser::parse_main_action_4660() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x7E);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S A Comma LParen IX RParen End | LD Dot SIL A Comma LParen IX RParen End
void Parser::parse_main_action_4661() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xDD7E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S A Comma LParen IX expr RParen End | LD Dot SIL A Comma LParen IX expr RParen End
void Parser::parse_main_action_4662() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xDD7E);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S A Comma LParen IY RParen End | LD Dot SIL A Comma LParen IY RParen End
void Parser::parse_main_action_4663() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xFD7E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S A Comma LParen IY expr RParen End | LD Dot SIL A Comma LParen IY expr RParen End
void Parser::parse_main_action_4664() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xFD7E);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S B Comma LParen HL Minus RParen End | LD Dot S B Comma LParen HLD RParen End | LD Dot SIL B Comma LParen HL Minus RParen End | LD Dot SIL B Comma LParen HLD RParen End | LDD Dot S B Comma LParen HL RParen End | LDD Dot SIL B Comma LParen HL RParen End
void Parser::parse_main_action_4665() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x46);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S B Comma LParen HL Plus RParen End | LD Dot S B Comma LParen HLI RParen End | LD Dot SIL B Comma LParen HL Plus RParen End | LD Dot SIL B Comma LParen HLI RParen End | LDI Dot S B Comma LParen HL RParen End | LDI Dot SIL B Comma LParen HL RParen End
void Parser::parse_main_action_4666() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x46);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S B Comma LParen HL RParen End | LD Dot SIL B Comma LParen HL RParen End
void Parser::parse_main_action_4667() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x46);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S B Comma LParen IX RParen End | LD Dot SIL B Comma LParen IX RParen End
void Parser::parse_main_action_4668() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xDD4600);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S B Comma LParen IX expr RParen End | LD Dot SIL B Comma LParen IX expr RParen End
void Parser::parse_main_action_4669() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xDD46);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S B Comma LParen IY RParen End | LD Dot SIL B Comma LParen IY RParen End
void Parser::parse_main_action_4670() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xFD4600);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S B Comma LParen IY expr RParen End | LD Dot SIL B Comma LParen IY expr RParen End
void Parser::parse_main_action_4671() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xFD46);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S BC Comma LParen HL Plus RParen End | LD Dot SIL BC Comma LParen HL Plus RParen End | LDI Dot S BC Comma LParen HL RParen End | LDI Dot SIL BC Comma LParen HL RParen End
void Parser::parse_main_action_4672() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xED07);
	add_opcode(0x23);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S BC Comma LParen HL RParen End | LD Dot SIL BC Comma LParen HL RParen End
void Parser::parse_main_action_4673() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xED07);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S BC Comma LParen IX RParen End | LD Dot SIL BC Comma LParen IX RParen End
void Parser::parse_main_action_4674() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xDD0700);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S BC Comma LParen IX expr RParen End | LD Dot SIL BC Comma LParen IX expr RParen End
void Parser::parse_main_action_4675() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xDD07);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S BC Comma LParen IY RParen End | LD Dot SIL BC Comma LParen IY RParen End
void Parser::parse_main_action_4676() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xFD0700);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S BC Comma LParen IY expr RParen End | LD Dot SIL BC Comma LParen IY expr RParen End
void Parser::parse_main_action_4677() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xFD07);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S C Comma LParen HL Minus RParen End | LD Dot S C Comma LParen HLD RParen End | LD Dot SIL C Comma LParen HL Minus RParen End | LD Dot SIL C Comma LParen HLD RParen End | LDD Dot S C Comma LParen HL RParen End | LDD Dot SIL C Comma LParen HL RParen End
void Parser::parse_main_action_4678() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x4E);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S C Comma LParen HL Plus RParen End | LD Dot S C Comma LParen HLI RParen End | LD Dot SIL C Comma LParen HL Plus RParen End | LD Dot SIL C Comma LParen HLI RParen End | LDI Dot S C Comma LParen HL RParen End | LDI Dot SIL C Comma LParen HL RParen End
void Parser::parse_main_action_4679() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x4E);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S C Comma LParen HL RParen End | LD Dot SIL C Comma LParen HL RParen End
void Parser::parse_main_action_4680() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x4E);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S C Comma LParen IX RParen End | LD Dot SIL C Comma LParen IX RParen End
void Parser::parse_main_action_4681() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xDD4E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S C Comma LParen IX expr RParen End | LD Dot SIL C Comma LParen IX expr RParen End
void Parser::parse_main_action_4682() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xDD4E);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S C Comma LParen IY RParen End | LD Dot SIL C Comma LParen IY RParen End
void Parser::parse_main_action_4683() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xFD4E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S C Comma LParen IY expr RParen End | LD Dot SIL C Comma LParen IY expr RParen End
void Parser::parse_main_action_4684() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xFD4E);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S D Comma LParen HL Minus RParen End | LD Dot S D Comma LParen HLD RParen End | LD Dot SIL D Comma LParen HL Minus RParen End | LD Dot SIL D Comma LParen HLD RParen End | LDD Dot S D Comma LParen HL RParen End | LDD Dot SIL D Comma LParen HL RParen End
void Parser::parse_main_action_4685() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x56);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S D Comma LParen HL Plus RParen End | LD Dot S D Comma LParen HLI RParen End | LD Dot SIL D Comma LParen HL Plus RParen End | LD Dot SIL D Comma LParen HLI RParen End | LDI Dot S D Comma LParen HL RParen End | LDI Dot SIL D Comma LParen HL RParen End
void Parser::parse_main_action_4686() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x56);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S D Comma LParen HL RParen End | LD Dot SIL D Comma LParen HL RParen End
void Parser::parse_main_action_4687() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x56);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S D Comma LParen IX RParen End | LD Dot SIL D Comma LParen IX RParen End
void Parser::parse_main_action_4688() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xDD5600);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S D Comma LParen IX expr RParen End | LD Dot SIL D Comma LParen IX expr RParen End
void Parser::parse_main_action_4689() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xDD56);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S D Comma LParen IY RParen End | LD Dot SIL D Comma LParen IY RParen End
void Parser::parse_main_action_4690() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xFD5600);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S D Comma LParen IY expr RParen End | LD Dot SIL D Comma LParen IY expr RParen End
void Parser::parse_main_action_4691() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xFD56);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S DE Comma LParen HL Plus RParen End | LD Dot SIL DE Comma LParen HL Plus RParen End | LDI Dot S DE Comma LParen HL RParen End | LDI Dot SIL DE Comma LParen HL RParen End
void Parser::parse_main_action_4692() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xED17);
	add_opcode(0x23);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S DE Comma LParen HL RParen End | LD Dot SIL DE Comma LParen HL RParen End
void Parser::parse_main_action_4693() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xED17);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S DE Comma LParen IX RParen End | LD Dot SIL DE Comma LParen IX RParen End
void Parser::parse_main_action_4694() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xDD1700);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S DE Comma LParen IX expr RParen End | LD Dot SIL DE Comma LParen IX expr RParen End
void Parser::parse_main_action_4695() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xDD17);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S DE Comma LParen IY RParen End | LD Dot SIL DE Comma LParen IY RParen End
void Parser::parse_main_action_4696() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xFD1700);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S DE Comma LParen IY expr RParen End | LD Dot SIL DE Comma LParen IY expr RParen End
void Parser::parse_main_action_4697() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xFD17);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S E Comma LParen HL Minus RParen End | LD Dot S E Comma LParen HLD RParen End | LD Dot SIL E Comma LParen HL Minus RParen End | LD Dot SIL E Comma LParen HLD RParen End | LDD Dot S E Comma LParen HL RParen End | LDD Dot SIL E Comma LParen HL RParen End
void Parser::parse_main_action_4698() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x5E);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S E Comma LParen HL Plus RParen End | LD Dot S E Comma LParen HLI RParen End | LD Dot SIL E Comma LParen HL Plus RParen End | LD Dot SIL E Comma LParen HLI RParen End | LDI Dot S E Comma LParen HL RParen End | LDI Dot SIL E Comma LParen HL RParen End
void Parser::parse_main_action_4699() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x5E);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S E Comma LParen HL RParen End | LD Dot SIL E Comma LParen HL RParen End
void Parser::parse_main_action_4700() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x5E);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S E Comma LParen IX RParen End | LD Dot SIL E Comma LParen IX RParen End
void Parser::parse_main_action_4701() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xDD5E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S E Comma LParen IX expr RParen End | LD Dot SIL E Comma LParen IX expr RParen End
void Parser::parse_main_action_4702() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xDD5E);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S E Comma LParen IY RParen End | LD Dot SIL E Comma LParen IY RParen End
void Parser::parse_main_action_4703() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xFD5E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S E Comma LParen IY expr RParen End | LD Dot SIL E Comma LParen IY expr RParen End
void Parser::parse_main_action_4704() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xFD5E);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S H Comma LParen HL Minus RParen End | LD Dot S H Comma LParen HLD RParen End | LD Dot SIL H Comma LParen HL Minus RParen End | LD Dot SIL H Comma LParen HLD RParen End | LDD Dot S H Comma LParen HL RParen End | LDD Dot SIL H Comma LParen HL RParen End
void Parser::parse_main_action_4705() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x66);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S H Comma LParen HL Plus RParen End | LD Dot S H Comma LParen HLI RParen End | LD Dot SIL H Comma LParen HL Plus RParen End | LD Dot SIL H Comma LParen HLI RParen End | LDI Dot S H Comma LParen HL RParen End | LDI Dot SIL H Comma LParen HL RParen End
void Parser::parse_main_action_4706() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x66);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S H Comma LParen HL RParen End | LD Dot SIL H Comma LParen HL RParen End
void Parser::parse_main_action_4707() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x66);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S H Comma LParen IX RParen End | LD Dot SIL H Comma LParen IX RParen End
void Parser::parse_main_action_4708() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xDD6600);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S H Comma LParen IX expr RParen End | LD Dot SIL H Comma LParen IX expr RParen End
void Parser::parse_main_action_4709() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xDD66);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S H Comma LParen IY RParen End | LD Dot SIL H Comma LParen IY RParen End
void Parser::parse_main_action_4710() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xFD6600);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S H Comma LParen IY expr RParen End | LD Dot SIL H Comma LParen IY expr RParen End
void Parser::parse_main_action_4711() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xFD66);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S HL Comma LParen HL Plus RParen End | LD Dot SIL HL Comma LParen HL Plus RParen End | LDI Dot S HL Comma LParen HL RParen End | LDI Dot SIL HL Comma LParen HL RParen End
void Parser::parse_main_action_4712() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xED27);
	add_opcode(0x23);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S HL Comma LParen HL RParen End | LD Dot SIL HL Comma LParen HL RParen End
void Parser::parse_main_action_4713() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xED27);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S HL Comma LParen IX RParen End | LD Dot SIL HL Comma LParen IX RParen End
void Parser::parse_main_action_4714() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xDD2700);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S HL Comma LParen IX expr RParen End | LD Dot SIL HL Comma LParen IX expr RParen End
void Parser::parse_main_action_4715() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xDD27);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S HL Comma LParen IY RParen End | LD Dot SIL HL Comma LParen IY RParen End
void Parser::parse_main_action_4716() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xFD2700);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S HL Comma LParen IY expr RParen End | LD Dot SIL HL Comma LParen IY expr RParen End
void Parser::parse_main_action_4717() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xFD27);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S IX Comma LParen HL Plus RParen End | LD Dot SIL IX Comma LParen HL Plus RParen End | LDI Dot S IX Comma LParen HL RParen End | LDI Dot SIL IX Comma LParen HL RParen End
void Parser::parse_main_action_4718() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xED37);
	add_opcode(0x23);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S IX Comma LParen HL RParen End | LD Dot SIL IX Comma LParen HL RParen End
void Parser::parse_main_action_4719() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xED37);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S IX Comma LParen IX RParen End | LD Dot SIL IX Comma LParen IX RParen End
void Parser::parse_main_action_4720() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xDD3700);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S IX Comma LParen IX expr RParen End | LD Dot SIL IX Comma LParen IX expr RParen End
void Parser::parse_main_action_4721() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xDD37);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S IX Comma LParen IY RParen End | LD Dot SIL IX Comma LParen IY RParen End
void Parser::parse_main_action_4722() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xFD3100);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S IX Comma LParen IY expr RParen End | LD Dot SIL IX Comma LParen IY expr RParen End
void Parser::parse_main_action_4723() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xFD31);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S IY Comma LParen HL Plus RParen End | LD Dot SIL IY Comma LParen HL Plus RParen End | LDI Dot S IY Comma LParen HL RParen End | LDI Dot SIL IY Comma LParen HL RParen End
void Parser::parse_main_action_4724() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xED31);
	add_opcode(0x23);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S IY Comma LParen HL RParen End | LD Dot SIL IY Comma LParen HL RParen End
void Parser::parse_main_action_4725() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xED31);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S IY Comma LParen IX RParen End | LD Dot SIL IY Comma LParen IX RParen End
void Parser::parse_main_action_4726() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xDD3100);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S IY Comma LParen IX expr RParen End | LD Dot SIL IY Comma LParen IX expr RParen End
void Parser::parse_main_action_4727() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xDD31);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S IY Comma LParen IY RParen End | LD Dot SIL IY Comma LParen IY RParen End
void Parser::parse_main_action_4728() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xFD3700);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S IY Comma LParen IY expr RParen End | LD Dot SIL IY Comma LParen IY expr RParen End
void Parser::parse_main_action_4729() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xFD37);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S L Comma LParen HL Minus RParen End | LD Dot S L Comma LParen HLD RParen End | LD Dot SIL L Comma LParen HL Minus RParen End | LD Dot SIL L Comma LParen HLD RParen End | LDD Dot S L Comma LParen HL RParen End | LDD Dot SIL L Comma LParen HL RParen End
void Parser::parse_main_action_4730() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x6E);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S L Comma LParen HL Plus RParen End | LD Dot S L Comma LParen HLI RParen End | LD Dot SIL L Comma LParen HL Plus RParen End | LD Dot SIL L Comma LParen HLI RParen End | LDI Dot S L Comma LParen HL RParen End | LDI Dot SIL L Comma LParen HL RParen End
void Parser::parse_main_action_4731() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x6E);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S L Comma LParen HL RParen End | LD Dot SIL L Comma LParen HL RParen End
void Parser::parse_main_action_4732() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x6E);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S L Comma LParen IX RParen End | LD Dot SIL L Comma LParen IX RParen End
void Parser::parse_main_action_4733() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xDD6E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S L Comma LParen IX expr RParen End | LD Dot SIL L Comma LParen IX expr RParen End
void Parser::parse_main_action_4734() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xDD6E);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S L Comma LParen IY RParen End | LD Dot SIL L Comma LParen IY RParen End
void Parser::parse_main_action_4735() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xFD6E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S L Comma LParen IY expr RParen End | LD Dot SIL L Comma LParen IY expr RParen End
void Parser::parse_main_action_4736() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xFD6E);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S SP Comma HL End | LD Dot SIL SP Comma HL End
void Parser::parse_main_action_4737() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xF9);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S SP Comma IX End | LD Dot SIL SP Comma IX End
void Parser::parse_main_action_4738() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xDDF9);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S SP Comma IY End | LD Dot SIL SP Comma IY End
void Parser::parse_main_action_4739() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xFDF9);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen BC Minus RParen Comma A End | LD Dot SIL LParen BC Minus RParen Comma A End | LDD Dot S LParen BC RParen Comma A End | LDD Dot SIL LParen BC RParen Comma A End
void Parser::parse_main_action_4740() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x02);
	add_opcode(0x0B);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen BC Plus RParen Comma A End | LD Dot SIL LParen BC Plus RParen Comma A End | LDI Dot S LParen BC RParen Comma A End | LDI Dot SIL LParen BC RParen Comma A End
void Parser::parse_main_action_4741() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x02);
	add_opcode(0x03);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen BC RParen Comma A End | LD Dot SIL LParen BC RParen Comma A End
void Parser::parse_main_action_4742() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x02);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen DE Minus RParen Comma A End | LD Dot SIL LParen DE Minus RParen Comma A End | LDD Dot S LParen DE RParen Comma A End | LDD Dot SIL LParen DE RParen Comma A End
void Parser::parse_main_action_4743() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x12);
	add_opcode(0x1B);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen DE Plus RParen Comma A End | LD Dot SIL LParen DE Plus RParen Comma A End | LDI Dot S LParen DE RParen Comma A End | LDI Dot SIL LParen DE RParen Comma A End
void Parser::parse_main_action_4744() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x12);
	add_opcode(0x13);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen DE RParen Comma A End | LD Dot SIL LParen DE RParen Comma A End
void Parser::parse_main_action_4745() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x12);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen HL Minus RParen Comma A End | LD Dot S LParen HLD RParen Comma A End | LD Dot SIL LParen HL Minus RParen Comma A End | LD Dot SIL LParen HLD RParen Comma A End | LDD Dot S LParen HL RParen Comma A End | LDD Dot SIL LParen HL RParen Comma A End
void Parser::parse_main_action_4746() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x77);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen HL Minus RParen Comma B End | LD Dot S LParen HLD RParen Comma B End | LD Dot SIL LParen HL Minus RParen Comma B End | LD Dot SIL LParen HLD RParen Comma B End | LDD Dot S LParen HL RParen Comma B End | LDD Dot SIL LParen HL RParen Comma B End
void Parser::parse_main_action_4747() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x70);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen HL Minus RParen Comma C End | LD Dot S LParen HLD RParen Comma C End | LD Dot SIL LParen HL Minus RParen Comma C End | LD Dot SIL LParen HLD RParen Comma C End | LDD Dot S LParen HL RParen Comma C End | LDD Dot SIL LParen HL RParen Comma C End
void Parser::parse_main_action_4748() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x71);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen HL Minus RParen Comma D End | LD Dot S LParen HLD RParen Comma D End | LD Dot SIL LParen HL Minus RParen Comma D End | LD Dot SIL LParen HLD RParen Comma D End | LDD Dot S LParen HL RParen Comma D End | LDD Dot SIL LParen HL RParen Comma D End
void Parser::parse_main_action_4749() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x72);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen HL Minus RParen Comma E End | LD Dot S LParen HLD RParen Comma E End | LD Dot SIL LParen HL Minus RParen Comma E End | LD Dot SIL LParen HLD RParen Comma E End | LDD Dot S LParen HL RParen Comma E End | LDD Dot SIL LParen HL RParen Comma E End
void Parser::parse_main_action_4750() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x73);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen HL Minus RParen Comma H End | LD Dot S LParen HLD RParen Comma H End | LD Dot SIL LParen HL Minus RParen Comma H End | LD Dot SIL LParen HLD RParen Comma H End | LDD Dot S LParen HL RParen Comma H End | LDD Dot SIL LParen HL RParen Comma H End
void Parser::parse_main_action_4751() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x74);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen HL Minus RParen Comma L End | LD Dot S LParen HLD RParen Comma L End | LD Dot SIL LParen HL Minus RParen Comma L End | LD Dot SIL LParen HLD RParen Comma L End | LDD Dot S LParen HL RParen Comma L End | LDD Dot SIL LParen HL RParen Comma L End
void Parser::parse_main_action_4752() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x75);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen HL Minus RParen Comma expr End | LD Dot SIL LParen HL Minus RParen Comma expr End | LDD Dot S LParen HL RParen Comma expr End | LDD Dot SIL LParen HL RParen Comma expr End
void Parser::parse_main_action_4753() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	add_opcode_n(0x36);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen HL Plus RParen Comma A End | LD Dot S LParen HLI RParen Comma A End | LD Dot SIL LParen HL Plus RParen Comma A End | LD Dot SIL LParen HLI RParen Comma A End | LDI Dot S LParen HL RParen Comma A End | LDI Dot SIL LParen HL RParen Comma A End
void Parser::parse_main_action_4754() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x77);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen HL Plus RParen Comma B End | LD Dot S LParen HLI RParen Comma B End | LD Dot SIL LParen HL Plus RParen Comma B End | LD Dot SIL LParen HLI RParen Comma B End | LDI Dot S LParen HL RParen Comma B End | LDI Dot SIL LParen HL RParen Comma B End
void Parser::parse_main_action_4755() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x70);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen HL Plus RParen Comma BC End | LD Dot SIL LParen HL Plus RParen Comma BC End | LDI Dot S LParen HL RParen Comma BC End | LDI Dot SIL LParen HL RParen Comma BC End
void Parser::parse_main_action_4756() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xED0F);
	add_opcode(0x23);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen HL Plus RParen Comma C End | LD Dot S LParen HLI RParen Comma C End | LD Dot SIL LParen HL Plus RParen Comma C End | LD Dot SIL LParen HLI RParen Comma C End | LDI Dot S LParen HL RParen Comma C End | LDI Dot SIL LParen HL RParen Comma C End
void Parser::parse_main_action_4757() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x71);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen HL Plus RParen Comma D End | LD Dot S LParen HLI RParen Comma D End | LD Dot SIL LParen HL Plus RParen Comma D End | LD Dot SIL LParen HLI RParen Comma D End | LDI Dot S LParen HL RParen Comma D End | LDI Dot SIL LParen HL RParen Comma D End
void Parser::parse_main_action_4758() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x72);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen HL Plus RParen Comma DE End | LD Dot SIL LParen HL Plus RParen Comma DE End | LDI Dot S LParen HL RParen Comma DE End | LDI Dot SIL LParen HL RParen Comma DE End
void Parser::parse_main_action_4759() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xED1F);
	add_opcode(0x23);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen HL Plus RParen Comma E End | LD Dot S LParen HLI RParen Comma E End | LD Dot SIL LParen HL Plus RParen Comma E End | LD Dot SIL LParen HLI RParen Comma E End | LDI Dot S LParen HL RParen Comma E End | LDI Dot SIL LParen HL RParen Comma E End
void Parser::parse_main_action_4760() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x73);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen HL Plus RParen Comma H End | LD Dot S LParen HLI RParen Comma H End | LD Dot SIL LParen HL Plus RParen Comma H End | LD Dot SIL LParen HLI RParen Comma H End | LDI Dot S LParen HL RParen Comma H End | LDI Dot SIL LParen HL RParen Comma H End
void Parser::parse_main_action_4761() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x74);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen HL Plus RParen Comma HL End | LD Dot SIL LParen HL Plus RParen Comma HL End | LDI Dot S LParen HL RParen Comma HL End | LDI Dot SIL LParen HL RParen Comma HL End
void Parser::parse_main_action_4762() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xED2F);
	add_opcode(0x23);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen HL Plus RParen Comma IX End | LD Dot SIL LParen HL Plus RParen Comma IX End | LDI Dot S LParen HL RParen Comma IX End | LDI Dot SIL LParen HL RParen Comma IX End
void Parser::parse_main_action_4763() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xED3F);
	add_opcode(0x23);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen HL Plus RParen Comma IY End | LD Dot SIL LParen HL Plus RParen Comma IY End | LDI Dot S LParen HL RParen Comma IY End | LDI Dot SIL LParen HL RParen Comma IY End
void Parser::parse_main_action_4764() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xED3E);
	add_opcode(0x23);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen HL Plus RParen Comma L End | LD Dot S LParen HLI RParen Comma L End | LD Dot SIL LParen HL Plus RParen Comma L End | LD Dot SIL LParen HLI RParen Comma L End | LDI Dot S LParen HL RParen Comma L End | LDI Dot SIL LParen HL RParen Comma L End
void Parser::parse_main_action_4765() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x75);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen HL Plus RParen Comma expr End | LD Dot SIL LParen HL Plus RParen Comma expr End | LDI Dot S LParen HL RParen Comma expr End | LDI Dot SIL LParen HL RParen Comma expr End
void Parser::parse_main_action_4766() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	add_opcode_n(0x36);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen HL RParen Comma A End | LD Dot SIL LParen HL RParen Comma A End
void Parser::parse_main_action_4767() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x77);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen HL RParen Comma B End | LD Dot SIL LParen HL RParen Comma B End
void Parser::parse_main_action_4768() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x70);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen HL RParen Comma BC End | LD Dot SIL LParen HL RParen Comma BC End
void Parser::parse_main_action_4769() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xED0F);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen HL RParen Comma C End | LD Dot SIL LParen HL RParen Comma C End
void Parser::parse_main_action_4770() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x71);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen HL RParen Comma D End | LD Dot SIL LParen HL RParen Comma D End
void Parser::parse_main_action_4771() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x72);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen HL RParen Comma DE End | LD Dot SIL LParen HL RParen Comma DE End
void Parser::parse_main_action_4772() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xED1F);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen HL RParen Comma E End | LD Dot SIL LParen HL RParen Comma E End
void Parser::parse_main_action_4773() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x73);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen HL RParen Comma H End | LD Dot SIL LParen HL RParen Comma H End
void Parser::parse_main_action_4774() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x74);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen HL RParen Comma HL End | LD Dot SIL LParen HL RParen Comma HL End
void Parser::parse_main_action_4775() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xED2F);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen HL RParen Comma IX End | LD Dot SIL LParen HL RParen Comma IX End
void Parser::parse_main_action_4776() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xED3F);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen HL RParen Comma IY End | LD Dot SIL LParen HL RParen Comma IY End
void Parser::parse_main_action_4777() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xED3E);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen HL RParen Comma L End | LD Dot SIL LParen HL RParen Comma L End
void Parser::parse_main_action_4778() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x75);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen HL RParen Comma expr End | LD Dot SIL LParen HL RParen Comma expr End
void Parser::parse_main_action_4779() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	add_opcode_n(0x36);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen IX RParen Comma A End | LD Dot SIL LParen IX RParen Comma A End
void Parser::parse_main_action_4780() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xDD7700);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen IX RParen Comma B End | LD Dot SIL LParen IX RParen Comma B End
void Parser::parse_main_action_4781() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xDD7000);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen IX RParen Comma BC End | LD Dot SIL LParen IX RParen Comma BC End
void Parser::parse_main_action_4782() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xDD0F00);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen IX RParen Comma C End | LD Dot SIL LParen IX RParen Comma C End
void Parser::parse_main_action_4783() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xDD7100);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen IX RParen Comma D End | LD Dot SIL LParen IX RParen Comma D End
void Parser::parse_main_action_4784() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xDD7200);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen IX RParen Comma DE End | LD Dot SIL LParen IX RParen Comma DE End
void Parser::parse_main_action_4785() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xDD1F00);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen IX RParen Comma E End | LD Dot SIL LParen IX RParen Comma E End
void Parser::parse_main_action_4786() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xDD7300);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen IX RParen Comma H End | LD Dot SIL LParen IX RParen Comma H End
void Parser::parse_main_action_4787() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xDD7400);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen IX RParen Comma HL End | LD Dot SIL LParen IX RParen Comma HL End
void Parser::parse_main_action_4788() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xDD2F00);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen IX RParen Comma IX End | LD Dot SIL LParen IX RParen Comma IX End
void Parser::parse_main_action_4789() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xDD3F00);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen IX RParen Comma IY End | LD Dot SIL LParen IX RParen Comma IY End
void Parser::parse_main_action_4790() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xDD3E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen IX RParen Comma L End | LD Dot SIL LParen IX RParen Comma L End
void Parser::parse_main_action_4791() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xDD7500);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen IX RParen Comma expr End | LD Dot SIL LParen IX RParen Comma expr End
void Parser::parse_main_action_4792() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	add_opcode_n(0xDD3600);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen IX expr RParen Comma A End | LD Dot SIL LParen IX expr RParen Comma A End
void Parser::parse_main_action_4793() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xDD77);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen IX expr RParen Comma B End | LD Dot SIL LParen IX expr RParen Comma B End
void Parser::parse_main_action_4794() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xDD70);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen IX expr RParen Comma BC End | LD Dot SIL LParen IX expr RParen Comma BC End
void Parser::parse_main_action_4795() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xDD0F);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen IX expr RParen Comma C End | LD Dot SIL LParen IX expr RParen Comma C End
void Parser::parse_main_action_4796() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xDD71);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen IX expr RParen Comma D End | LD Dot SIL LParen IX expr RParen Comma D End
void Parser::parse_main_action_4797() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xDD72);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen IX expr RParen Comma DE End | LD Dot SIL LParen IX expr RParen Comma DE End
void Parser::parse_main_action_4798() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xDD1F);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen IX expr RParen Comma E End | LD Dot SIL LParen IX expr RParen Comma E End
void Parser::parse_main_action_4799() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xDD73);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen IX expr RParen Comma H End | LD Dot SIL LParen IX expr RParen Comma H End
void Parser::parse_main_action_4800() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xDD74);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen IX expr RParen Comma HL End | LD Dot SIL LParen IX expr RParen Comma HL End
void Parser::parse_main_action_4801() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xDD2F);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen IX expr RParen Comma IX End | LD Dot SIL LParen IX expr RParen Comma IX End
void Parser::parse_main_action_4802() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xDD3F);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen IX expr RParen Comma IY End | LD Dot SIL LParen IX expr RParen Comma IY End
void Parser::parse_main_action_4803() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xDD3E);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen IX expr RParen Comma L End | LD Dot SIL LParen IX expr RParen Comma L End
void Parser::parse_main_action_4804() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xDD75);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen IX expr RParen Comma expr End | LD Dot SIL LParen IX expr RParen Comma expr End
void Parser::parse_main_action_4805() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	add_opcode_idx_n(0xDD36);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen IY RParen Comma A End | LD Dot SIL LParen IY RParen Comma A End
void Parser::parse_main_action_4806() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xFD7700);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen IY RParen Comma B End | LD Dot SIL LParen IY RParen Comma B End
void Parser::parse_main_action_4807() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xFD7000);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen IY RParen Comma BC End | LD Dot SIL LParen IY RParen Comma BC End
void Parser::parse_main_action_4808() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xFD0F00);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen IY RParen Comma C End | LD Dot SIL LParen IY RParen Comma C End
void Parser::parse_main_action_4809() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xFD7100);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen IY RParen Comma D End | LD Dot SIL LParen IY RParen Comma D End
void Parser::parse_main_action_4810() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xFD7200);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen IY RParen Comma DE End | LD Dot SIL LParen IY RParen Comma DE End
void Parser::parse_main_action_4811() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xFD1F00);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen IY RParen Comma E End | LD Dot SIL LParen IY RParen Comma E End
void Parser::parse_main_action_4812() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xFD7300);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen IY RParen Comma H End | LD Dot SIL LParen IY RParen Comma H End
void Parser::parse_main_action_4813() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xFD7400);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen IY RParen Comma HL End | LD Dot SIL LParen IY RParen Comma HL End
void Parser::parse_main_action_4814() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xFD2F00);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen IY RParen Comma IX End | LD Dot SIL LParen IY RParen Comma IX End
void Parser::parse_main_action_4815() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xFD3E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen IY RParen Comma IY End | LD Dot SIL LParen IY RParen Comma IY End
void Parser::parse_main_action_4816() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xFD3F00);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen IY RParen Comma L End | LD Dot SIL LParen IY RParen Comma L End
void Parser::parse_main_action_4817() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xFD7500);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen IY RParen Comma expr End | LD Dot SIL LParen IY RParen Comma expr End
void Parser::parse_main_action_4818() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	add_opcode_n(0xFD3600);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen IY expr RParen Comma A End | LD Dot SIL LParen IY expr RParen Comma A End
void Parser::parse_main_action_4819() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xFD77);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen IY expr RParen Comma B End | LD Dot SIL LParen IY expr RParen Comma B End
void Parser::parse_main_action_4820() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xFD70);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen IY expr RParen Comma BC End | LD Dot SIL LParen IY expr RParen Comma BC End
void Parser::parse_main_action_4821() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xFD0F);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen IY expr RParen Comma C End | LD Dot SIL LParen IY expr RParen Comma C End
void Parser::parse_main_action_4822() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xFD71);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen IY expr RParen Comma D End | LD Dot SIL LParen IY expr RParen Comma D End
void Parser::parse_main_action_4823() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xFD72);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen IY expr RParen Comma DE End | LD Dot SIL LParen IY expr RParen Comma DE End
void Parser::parse_main_action_4824() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xFD1F);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen IY expr RParen Comma E End | LD Dot SIL LParen IY expr RParen Comma E End
void Parser::parse_main_action_4825() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xFD73);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen IY expr RParen Comma H End | LD Dot SIL LParen IY expr RParen Comma H End
void Parser::parse_main_action_4826() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xFD74);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen IY expr RParen Comma HL End | LD Dot SIL LParen IY expr RParen Comma HL End
void Parser::parse_main_action_4827() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xFD2F);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen IY expr RParen Comma IX End | LD Dot SIL LParen IY expr RParen Comma IX End
void Parser::parse_main_action_4828() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xFD3E);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen IY expr RParen Comma IY End | LD Dot SIL LParen IY expr RParen Comma IY End
void Parser::parse_main_action_4829() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xFD3F);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen IY expr RParen Comma L End | LD Dot SIL LParen IY expr RParen Comma L End
void Parser::parse_main_action_4830() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xFD75);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot S LParen IY expr RParen Comma expr End | LD Dot SIL LParen IY expr RParen Comma expr End
void Parser::parse_main_action_4831() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	add_opcode_idx_n(0xFD36);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot SIS BC Comma expr End
void Parser::parse_main_action_4832() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	if (expr_in_parens()) { add_opcode(0x40);
	add_opcode_nn(0xED4B, 0); } else { add_opcode(0x40);
	add_opcode_nn(0x01, 0); }
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot SIS DE Comma expr End
void Parser::parse_main_action_4833() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	if (expr_in_parens()) { add_opcode(0x40);
	add_opcode_nn(0xED5B, 0); } else { add_opcode(0x40);
	add_opcode_nn(0x11, 0); }
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot SIS HL Comma expr End
void Parser::parse_main_action_4834() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	if (expr_in_parens()) { add_opcode(0x40);
	add_opcode_nn(0x2A, 0); } else { add_opcode(0x40);
	add_opcode_nn(0x21, 0); }
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot SIS IX Comma expr End
void Parser::parse_main_action_4835() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	if (expr_in_parens()) { add_opcode(0x40);
	add_opcode_nn(0xDD2A, 0); } else { add_opcode(0x40);
	add_opcode_nn(0xDD21, 0); }
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot SIS IY Comma expr End
void Parser::parse_main_action_4836() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	if (expr_in_parens()) { add_opcode(0x40);
	add_opcode_nn(0xFD2A, 0); } else { add_opcode(0x40);
	add_opcode_nn(0xFD21, 0); }
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot SIS SP Comma expr End
void Parser::parse_main_action_4837() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	if (expr_in_parens()) { add_opcode(0x40);
	add_opcode_nn(0xED7B, 0); } else { add_opcode(0x40);
	add_opcode_nn(0x31, 0); }
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot SIS expr Comma BC End
void Parser::parse_main_action_4838() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0x40);
	add_opcode_nn(0xED43, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot SIS expr Comma DE End
void Parser::parse_main_action_4839() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0x40);
	add_opcode_nn(0xED53, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot SIS expr Comma HL End
void Parser::parse_main_action_4840() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0x40);
	add_opcode_nn(0x22, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot SIS expr Comma IX End
void Parser::parse_main_action_4841() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0x40);
	add_opcode_nn(0xDD22, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot SIS expr Comma IY End
void Parser::parse_main_action_4842() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0x40);
	add_opcode_nn(0xFD22, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD Dot SIS expr Comma SP End
void Parser::parse_main_action_4843() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0x40);
	add_opcode_nn(0xED73, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen A Colon expr RParen Comma A End
void Parser::parse_main_action_4844() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	add_opcode_nn(0x32, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen A Colon expr RParen Comma BC End
void Parser::parse_main_action_4845() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	add_opcode_nn(0xED43, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen A Colon expr RParen Comma DE End
void Parser::parse_main_action_4846() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	add_opcode_nn(0xED53, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen A Colon expr RParen Comma HL End
void Parser::parse_main_action_4847() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	add_opcode_nn(0x22, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen A Colon expr RParen Comma IX End
void Parser::parse_main_action_4848() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	add_opcode_nn(0xDD22, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen A Colon expr RParen Comma IY End
void Parser::parse_main_action_4849() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	add_opcode_nn(0xFD22, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen A Colon expr RParen Comma SP End
void Parser::parse_main_action_4850() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	add_opcode_nn(0xED73, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ABC RParen Comma A End
void Parser::parse_main_action_4851() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0x02);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ADE RParen Comma A End
void Parser::parse_main_action_4852() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0x12);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AHL RParen Comma A End
void Parser::parse_main_action_4853() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0x77);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AHL RParen Comma B End
void Parser::parse_main_action_4854() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0x70);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AHL RParen Comma C End
void Parser::parse_main_action_4855() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0x71);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AHL RParen Comma D End
void Parser::parse_main_action_4856() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0x72);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AHL RParen Comma E End
void Parser::parse_main_action_4857() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0x73);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AHL RParen Comma H End
void Parser::parse_main_action_4858() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0x74);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AHL RParen Comma L End
void Parser::parse_main_action_4859() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0x75);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AHL RParen Comma expr End
void Parser::parse_main_action_4860() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	add_opcode_n(0x36);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AIX RParen Comma A End
void Parser::parse_main_action_4861() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xDD7700);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AIX RParen Comma AHL End
void Parser::parse_main_action_4862() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xED2100);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AIX RParen Comma B End
void Parser::parse_main_action_4863() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xDD7000);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AIX RParen Comma BC End
void Parser::parse_main_action_4864() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xED8500);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AIX RParen Comma C End
void Parser::parse_main_action_4865() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xDD7100);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AIX RParen Comma D End
void Parser::parse_main_action_4866() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xDD7200);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AIX RParen Comma DE End
void Parser::parse_main_action_4867() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xED9500);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AIX RParen Comma E End
void Parser::parse_main_action_4868() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xDD7300);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AIX RParen Comma H End
void Parser::parse_main_action_4869() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xDD7400);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AIX RParen Comma HL End
void Parser::parse_main_action_4870() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xEDA500);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AIX RParen Comma IX End
void Parser::parse_main_action_4871() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xED8100);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AIX RParen Comma IY End
void Parser::parse_main_action_4872() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xED9100);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AIX RParen Comma L End
void Parser::parse_main_action_4873() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xDD7500);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AIX RParen Comma SP End
void Parser::parse_main_action_4874() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xEDB500);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AIX RParen Comma XIX End
void Parser::parse_main_action_4875() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xED0100);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AIX RParen Comma YIY End
void Parser::parse_main_action_4876() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xED1100);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AIX RParen Comma expr End
void Parser::parse_main_action_4877() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	add_opcode_n(0xDD3600);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AIX expr RParen Comma A End
void Parser::parse_main_action_4878() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xDD77);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AIX expr RParen Comma AHL End
void Parser::parse_main_action_4879() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xED21);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AIX expr RParen Comma B End
void Parser::parse_main_action_4880() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xDD70);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AIX expr RParen Comma BC End
void Parser::parse_main_action_4881() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xED85);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AIX expr RParen Comma C End
void Parser::parse_main_action_4882() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xDD71);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AIX expr RParen Comma D End
void Parser::parse_main_action_4883() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xDD72);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AIX expr RParen Comma DE End
void Parser::parse_main_action_4884() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xED95);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AIX expr RParen Comma E End
void Parser::parse_main_action_4885() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xDD73);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AIX expr RParen Comma H End
void Parser::parse_main_action_4886() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xDD74);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AIX expr RParen Comma HL End
void Parser::parse_main_action_4887() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xEDA5);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AIX expr RParen Comma IX End
void Parser::parse_main_action_4888() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xED81);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AIX expr RParen Comma IY End
void Parser::parse_main_action_4889() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xED91);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AIX expr RParen Comma L End
void Parser::parse_main_action_4890() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xDD75);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AIX expr RParen Comma SP End
void Parser::parse_main_action_4891() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xEDB5);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AIX expr RParen Comma XIX End
void Parser::parse_main_action_4892() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xED01);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AIX expr RParen Comma YIY End
void Parser::parse_main_action_4893() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xED11);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AIX expr RParen Comma expr End
void Parser::parse_main_action_4894() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	add_opcode_idx_n(0xDD36);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AIY RParen Comma A End
void Parser::parse_main_action_4895() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xFD7700);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AIY RParen Comma AHL End
void Parser::parse_main_action_4896() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xED2000);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AIY RParen Comma B End
void Parser::parse_main_action_4897() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xFD7000);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AIY RParen Comma BC End
void Parser::parse_main_action_4898() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xED8400);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AIY RParen Comma C End
void Parser::parse_main_action_4899() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xFD7100);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AIY RParen Comma D End
void Parser::parse_main_action_4900() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xFD7200);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AIY RParen Comma DE End
void Parser::parse_main_action_4901() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xED9400);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AIY RParen Comma E End
void Parser::parse_main_action_4902() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xFD7300);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AIY RParen Comma H End
void Parser::parse_main_action_4903() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xFD7400);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AIY RParen Comma HL End
void Parser::parse_main_action_4904() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xEDA400);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AIY RParen Comma IX End
void Parser::parse_main_action_4905() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xED8000);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AIY RParen Comma IY End
void Parser::parse_main_action_4906() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xED9000);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AIY RParen Comma L End
void Parser::parse_main_action_4907() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xFD7500);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AIY RParen Comma SP End
void Parser::parse_main_action_4908() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xEDB400);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AIY RParen Comma XIX End
void Parser::parse_main_action_4909() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xED0000);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AIY RParen Comma YIY End
void Parser::parse_main_action_4910() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xED1000);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AIY RParen Comma expr End
void Parser::parse_main_action_4911() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	add_opcode_n(0xFD3600);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AIY expr RParen Comma A End
void Parser::parse_main_action_4912() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xFD77);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AIY expr RParen Comma AHL End
void Parser::parse_main_action_4913() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xED20);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AIY expr RParen Comma B End
void Parser::parse_main_action_4914() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xFD70);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AIY expr RParen Comma BC End
void Parser::parse_main_action_4915() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xED84);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AIY expr RParen Comma C End
void Parser::parse_main_action_4916() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xFD71);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AIY expr RParen Comma D End
void Parser::parse_main_action_4917() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xFD72);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AIY expr RParen Comma DE End
void Parser::parse_main_action_4918() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xED94);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AIY expr RParen Comma E End
void Parser::parse_main_action_4919() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xFD73);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AIY expr RParen Comma H End
void Parser::parse_main_action_4920() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xFD74);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AIY expr RParen Comma HL End
void Parser::parse_main_action_4921() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xEDA4);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AIY expr RParen Comma IX End
void Parser::parse_main_action_4922() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xED80);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AIY expr RParen Comma IY End
void Parser::parse_main_action_4923() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xED90);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AIY expr RParen Comma L End
void Parser::parse_main_action_4924() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xFD75);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AIY expr RParen Comma SP End
void Parser::parse_main_action_4925() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xEDB4);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AIY expr RParen Comma XIX End
void Parser::parse_main_action_4926() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xED00);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AIY expr RParen Comma YIY End
void Parser::parse_main_action_4927() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xED10);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen AIY expr RParen Comma expr End
void Parser::parse_main_action_4928() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	add_opcode_idx_n(0xFD36);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen BC Minus RParen Comma A End | LDD LParen BC RParen Comma A End
void Parser::parse_main_action_4929() {
	add_opcode(0x02);
	add_opcode(0x0B);
}

// LD LParen BC Plus RParen Comma A End | LDI LParen BC RParen Comma A End
void Parser::parse_main_action_4930() {
	add_opcode(0x02);
	add_opcode(0x03);
}

// LD LParen BC RParen Comma A End | STAX B End | STAX BC End
void Parser::parse_main_action_4931() {
	add_opcode(0x02);
}

// LD LParen C RParen Comma A End | LDH LParen C RParen Comma A End
void Parser::parse_main_action_4932() {
	switch (g_args.cpu()) {
	case CPU_GBZ80: 
	add_opcode(0xE2);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen DE Minus RParen Comma A End | LDD LParen DE RParen Comma A End
void Parser::parse_main_action_4933() {
	add_opcode(0x12);
	add_opcode(0x1B);
}

// LD LParen DE Minus RParen Comma B End | LDD LParen DE RParen Comma B End
void Parser::parse_main_action_4934() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xEB);
	add_opcode(0x70);
	add_opcode(0xEB);
	add_opcode(0x1B);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen DE Minus RParen Comma C End | LDD LParen DE RParen Comma C End
void Parser::parse_main_action_4935() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xEB);
	add_opcode(0x71);
	add_opcode(0xEB);
	add_opcode(0x1B);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen DE Minus RParen Comma D End | LDD LParen DE RParen Comma D End
void Parser::parse_main_action_4936() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xEB);
	add_opcode(0x74);
	add_opcode(0xEB);
	add_opcode(0x1B);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen DE Minus RParen Comma E End | LDD LParen DE RParen Comma E End
void Parser::parse_main_action_4937() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xEB);
	add_opcode(0x75);
	add_opcode(0xEB);
	add_opcode(0x1B);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen DE Minus RParen Comma H End | LDD LParen DE RParen Comma H End
void Parser::parse_main_action_4938() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xEB);
	add_opcode(0x72);
	add_opcode(0xEB);
	add_opcode(0x1B);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen DE Minus RParen Comma L End | LDD LParen DE RParen Comma L End
void Parser::parse_main_action_4939() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xEB);
	add_opcode(0x73);
	add_opcode(0xEB);
	add_opcode(0x1B);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen DE Minus RParen Comma expr End | LDD LParen DE RParen Comma expr End
void Parser::parse_main_action_4940() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_opcode(0xEB);
	add_opcode_n(0x36);
	add_opcode(0xEB);
	add_opcode(0x1B);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen DE Plus RParen Comma A End | LDI LParen DE RParen Comma A End
void Parser::parse_main_action_4941() {
	add_opcode(0x12);
	add_opcode(0x13);
}

// LD LParen DE Plus RParen Comma B End | LDI LParen DE RParen Comma B End
void Parser::parse_main_action_4942() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xEB);
	add_opcode(0x70);
	add_opcode(0xEB);
	add_opcode(0x13);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen DE Plus RParen Comma C End | LDI LParen DE RParen Comma C End
void Parser::parse_main_action_4943() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xEB);
	add_opcode(0x71);
	add_opcode(0xEB);
	add_opcode(0x13);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen DE Plus RParen Comma D End | LDI LParen DE RParen Comma D End
void Parser::parse_main_action_4944() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xEB);
	add_opcode(0x74);
	add_opcode(0xEB);
	add_opcode(0x13);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen DE Plus RParen Comma E End | LDI LParen DE RParen Comma E End
void Parser::parse_main_action_4945() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xEB);
	add_opcode(0x75);
	add_opcode(0xEB);
	add_opcode(0x13);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen DE Plus RParen Comma H End | LDI LParen DE RParen Comma H End
void Parser::parse_main_action_4946() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xEB);
	add_opcode(0x72);
	add_opcode(0xEB);
	add_opcode(0x13);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen DE Plus RParen Comma L End | LDI LParen DE RParen Comma L End
void Parser::parse_main_action_4947() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xEB);
	add_opcode(0x73);
	add_opcode(0xEB);
	add_opcode(0x13);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen DE Plus RParen Comma expr End | LDI LParen DE RParen Comma expr End
void Parser::parse_main_action_4948() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_opcode(0xEB);
	add_opcode_n(0x36);
	add_opcode(0xEB);
	add_opcode(0x13);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen DE RParen Comma A End | STAX D End | STAX DE End
void Parser::parse_main_action_4949() {
	add_opcode(0x12);
}

// LD LParen DE RParen Comma B End
void Parser::parse_main_action_4950() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xEB);
	add_opcode(0x70);
	add_opcode(0xEB);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen DE RParen Comma C End
void Parser::parse_main_action_4951() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xEB);
	add_opcode(0x71);
	add_opcode(0xEB);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen DE RParen Comma D End
void Parser::parse_main_action_4952() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xEB);
	add_opcode(0x74);
	add_opcode(0xEB);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen DE RParen Comma E End
void Parser::parse_main_action_4953() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xEB);
	add_opcode(0x75);
	add_opcode(0xEB);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen DE RParen Comma H End
void Parser::parse_main_action_4954() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xEB);
	add_opcode(0x72);
	add_opcode(0xEB);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen DE RParen Comma HL End | SHLDE End | SHLX End
void Parser::parse_main_action_4955() {
	switch (g_args.cpu()) {
	case CPU_8085: 
	add_opcode(0xD9);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen DE RParen Comma L End
void Parser::parse_main_action_4956() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xEB);
	add_opcode(0x73);
	add_opcode(0xEB);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen DE RParen Comma expr End
void Parser::parse_main_action_4957() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_opcode(0xEB);
	add_opcode_n(0x36);
	add_opcode(0xEB);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen HL Minus RParen Comma A End | LD LParen HLD RParen Comma A End | LDD LParen HL RParen Comma A End
void Parser::parse_main_action_4958() {
	switch (g_args.cpu()) {
	case CPU_GBZ80: 
	add_opcode(0x32);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x77);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen HL Minus RParen Comma B End | LD LParen HLD RParen Comma B End | LDD LParen HL RParen Comma B End
void Parser::parse_main_action_4959() {
	add_opcode(0x70);
	add_opcode(0x2B);
}

// LD LParen HL Minus RParen Comma C End | LD LParen HLD RParen Comma C End | LDD LParen HL RParen Comma C End
void Parser::parse_main_action_4960() {
	add_opcode(0x71);
	add_opcode(0x2B);
}

// LD LParen HL Minus RParen Comma D End | LD LParen HLD RParen Comma D End | LDD LParen HL RParen Comma D End
void Parser::parse_main_action_4961() {
	add_opcode(0x72);
	add_opcode(0x2B);
}

// LD LParen HL Minus RParen Comma E End | LD LParen HLD RParen Comma E End | LDD LParen HL RParen Comma E End
void Parser::parse_main_action_4962() {
	add_opcode(0x73);
	add_opcode(0x2B);
}

// LD LParen HL Minus RParen Comma H End | LD LParen HLD RParen Comma H End | LDD LParen HL RParen Comma H End
void Parser::parse_main_action_4963() {
	add_opcode(0x74);
	add_opcode(0x2B);
}

// LD LParen HL Minus RParen Comma L End | LD LParen HLD RParen Comma L End | LDD LParen HL RParen Comma L End
void Parser::parse_main_action_4964() {
	add_opcode(0x75);
	add_opcode(0x2B);
}

// LD LParen HL Minus RParen Comma expr End | LDD LParen HL RParen Comma expr End
void Parser::parse_main_action_4965() {
	warn_if_expr_in_parens();
	add_opcode_n(0x36);
	add_opcode(0x2B);
}

// LD LParen HL Plus RParen Comma A End | LD LParen HLI RParen Comma A End | LDI LParen HL RParen Comma A End
void Parser::parse_main_action_4966() {
	switch (g_args.cpu()) {
	case CPU_GBZ80: 
	add_opcode(0x22);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x77);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen HL Plus RParen Comma B End | LD LParen HLI RParen Comma B End | LDI LParen HL RParen Comma B End
void Parser::parse_main_action_4967() {
	add_opcode(0x70);
	add_opcode(0x23);
}

// LD LParen HL Plus RParen Comma BC End | LDI LParen HL RParen Comma BC End
void Parser::parse_main_action_4968() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x71);
	add_opcode(0x23);
	add_opcode(0x70);
	add_opcode(0x23);
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xED0F);
	add_opcode(0x23);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen HL Plus RParen Comma C End | LD LParen HLI RParen Comma C End | LDI LParen HL RParen Comma C End
void Parser::parse_main_action_4969() {
	add_opcode(0x71);
	add_opcode(0x23);
}

// LD LParen HL Plus RParen Comma D End | LD LParen HLI RParen Comma D End | LDI LParen HL RParen Comma D End
void Parser::parse_main_action_4970() {
	add_opcode(0x72);
	add_opcode(0x23);
}

// LD LParen HL Plus RParen Comma DE End | LDI LParen HL RParen Comma DE End
void Parser::parse_main_action_4971() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x73);
	add_opcode(0x23);
	add_opcode(0x72);
	add_opcode(0x23);
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xED1F);
	add_opcode(0x23);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen HL Plus RParen Comma E End | LD LParen HLI RParen Comma E End | LDI LParen HL RParen Comma E End
void Parser::parse_main_action_4972() {
	add_opcode(0x73);
	add_opcode(0x23);
}

// LD LParen HL Plus RParen Comma H End | LD LParen HLI RParen Comma H End | LDI LParen HL RParen Comma H End
void Parser::parse_main_action_4973() {
	add_opcode(0x74);
	add_opcode(0x23);
}

// LD LParen HL Plus RParen Comma HL End | LDI LParen HL RParen Comma HL End
void Parser::parse_main_action_4974() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xED2F);
	add_opcode(0x23);
	add_opcode(0x23);
	break;
	case CPU_8080: case CPU_8085: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xF5);
	add_opcode(0x7C);
	add_opcode(0x75);
	add_opcode(0x23);
	add_opcode(0x77);
	add_opcode(0xF1);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen HL Plus RParen Comma IX End | LDI LParen HL RParen Comma IX End
void Parser::parse_main_action_4975() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xD5);
	add_opcode(0xDDE5);
	add_opcode(0xD1);
	add_opcode(0x73);
	add_opcode(0x23);
	add_opcode(0x72);
	add_opcode(0x23);
	add_opcode(0xD1);
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xED3F);
	add_opcode(0x23);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen HL Plus RParen Comma IY End | LDI LParen HL RParen Comma IY End
void Parser::parse_main_action_4976() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xD5);
	add_opcode(0xFDE5);
	add_opcode(0xD1);
	add_opcode(0x73);
	add_opcode(0x23);
	add_opcode(0x72);
	add_opcode(0x23);
	add_opcode(0xD1);
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xED3E);
	add_opcode(0x23);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen HL Plus RParen Comma L End | LD LParen HLI RParen Comma L End | LDI LParen HL RParen Comma L End
void Parser::parse_main_action_4977() {
	add_opcode(0x75);
	add_opcode(0x23);
}

// LD LParen HL Plus RParen Comma expr End | LDI LParen HL RParen Comma expr End
void Parser::parse_main_action_4978() {
	warn_if_expr_in_parens();
	add_opcode_n(0x36);
	add_opcode(0x23);
}

// LD LParen HL RParen Comma A End | MOV M Comma A End
void Parser::parse_main_action_4979() {
	add_opcode(0x77);
}

// LD LParen HL RParen Comma B End | MOV M Comma B End
void Parser::parse_main_action_4980() {
	add_opcode(0x70);
}

// LD LParen HL RParen Comma BC End
void Parser::parse_main_action_4981() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x71);
	add_opcode(0x23);
	add_opcode(0x70);
	add_opcode(0x2B);
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xED0F);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen HL RParen Comma BCDE End
void Parser::parse_main_action_4982() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDD1B);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen HL RParen Comma C End | MOV M Comma C End
void Parser::parse_main_action_4983() {
	add_opcode(0x71);
}

// LD LParen HL RParen Comma D End | MOV M Comma D End
void Parser::parse_main_action_4984() {
	add_opcode(0x72);
}

// LD LParen HL RParen Comma DE End
void Parser::parse_main_action_4985() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x73);
	add_opcode(0x23);
	add_opcode(0x72);
	add_opcode(0x2B);
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xED1F);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen HL RParen Comma E End | MOV M Comma E End
void Parser::parse_main_action_4986() {
	add_opcode(0x73);
}

// LD LParen HL RParen Comma H End | MOV M Comma H End
void Parser::parse_main_action_4987() {
	add_opcode(0x74);
}

// LD LParen HL RParen Comma HL End
void Parser::parse_main_action_4988() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDDF400);
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xED2F);
	break;
	case CPU_8080: case CPU_8085: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xF5);
	add_opcode(0x7C);
	add_opcode(0x75);
	add_opcode(0x23);
	add_opcode(0x77);
	add_opcode(0xF1);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen HL RParen Comma IX End
void Parser::parse_main_action_4989() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xD5);
	add_opcode(0xDDE5);
	add_opcode(0xD1);
	add_opcode(0x73);
	add_opcode(0x23);
	add_opcode(0x72);
	add_opcode(0x2B);
	add_opcode(0xD1);
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xED3F);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen HL RParen Comma IY End
void Parser::parse_main_action_4990() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xD5);
	add_opcode(0xFDE5);
	add_opcode(0xD1);
	add_opcode(0x73);
	add_opcode(0x23);
	add_opcode(0x72);
	add_opcode(0x2B);
	add_opcode(0xD1);
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xED3E);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen HL RParen Comma JKHL End
void Parser::parse_main_action_4991() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFD1B);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen HL RParen Comma L End | MOV M Comma L End
void Parser::parse_main_action_4992() {
	add_opcode(0x75);
}

// LD LParen HL RParen Comma expr End | MVI M Comma expr End
void Parser::parse_main_action_4993() {
	warn_if_expr_in_parens();
	add_opcode_n(0x36);
}

// LD LParen HL expr RParen Comma HL End
void Parser::parse_main_action_4994() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0xDDF4);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IX RParen Comma A End
void Parser::parse_main_action_4995() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xDD7700);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IX RParen Comma AHL End
void Parser::parse_main_action_4996() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xED2100);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IX RParen Comma B End
void Parser::parse_main_action_4997() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xDD7000);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IX RParen Comma BC End
void Parser::parse_main_action_4998() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xDD0F00);
	break;
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xDD7100);
	add_opcode(0xDD7001);
	break;
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xED8500);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IX RParen Comma BCDE End
void Parser::parse_main_action_4999() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDDCF00);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IX RParen Comma C End
void Parser::parse_main_action_5000() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xDD7100);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IX RParen Comma D End
void Parser::parse_main_action_5001() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xDD7200);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IX RParen Comma DE End
void Parser::parse_main_action_5002() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xDD1F00);
	break;
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xDD7300);
	add_opcode(0xDD7201);
	break;
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xED9500);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IX RParen Comma E End
void Parser::parse_main_action_5003() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xDD7300);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IX RParen Comma H End
void Parser::parse_main_action_5004() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xDD7400);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IX RParen Comma HL End
void Parser::parse_main_action_5005() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xDD2F00);
	break;
	case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xDD7500);
	add_opcode(0xDD7401);
	break;
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xEDA500);
	break;
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xF400);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IX RParen Comma IX End
void Parser::parse_main_action_5006() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xDD3F00);
	break;
	case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xDDE5);
	add_opcode(0xE3);
	add_opcode(0xDD7500);
	add_opcode(0xDD7401);
	add_opcode(0xE3);
	add_opcode(0xDDE1);
	break;
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDDE5);
	add_opcode(0xED54);
	add_opcode(0xDD7500);
	add_opcode(0xDD7401);
	add_opcode(0xED54);
	add_opcode(0xDDE1);
	break;
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xED8100);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IX RParen Comma IY End
void Parser::parse_main_action_5007() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xDD3E00);
	break;
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xED9100);
	break;
	case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xFDE5);
	add_opcode(0xE3);
	add_opcode(0xDD7500);
	add_opcode(0xDD7401);
	add_opcode(0xE3);
	add_opcode(0xFDE1);
	break;
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFDE5);
	add_opcode(0xED54);
	add_opcode(0xDD7500);
	add_opcode(0xDD7401);
	add_opcode(0xED54);
	add_opcode(0xFDE1);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IX RParen Comma JKHL End
void Parser::parse_main_action_5008() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFDCF00);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IX RParen Comma L End
void Parser::parse_main_action_5009() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xDD7500);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IX RParen Comma SP End
void Parser::parse_main_action_5010() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xEDB500);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IX RParen Comma XIX End
void Parser::parse_main_action_5011() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xED0100);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IX RParen Comma YIY End
void Parser::parse_main_action_5012() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xED1100);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IX RParen Comma expr End
void Parser::parse_main_action_5013() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_opcode_n(0xDD3600);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IX expr RParen Comma A End
void Parser::parse_main_action_5014() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx(0xDD77);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IX expr RParen Comma AHL End
void Parser::parse_main_action_5015() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode_idx(0xED21);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IX expr RParen Comma B End
void Parser::parse_main_action_5016() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx(0xDD70);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IX expr RParen Comma BC End
void Parser::parse_main_action_5017() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode_idx(0xDD0F);
	break;
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode_idx(0xED85);
	break;
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx_idx1(0xDD71, 0xDD70);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IX expr RParen Comma BCDE End
void Parser::parse_main_action_5018() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0xDDCF);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IX expr RParen Comma C End
void Parser::parse_main_action_5019() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx(0xDD71);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IX expr RParen Comma D End
void Parser::parse_main_action_5020() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx(0xDD72);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IX expr RParen Comma DE End
void Parser::parse_main_action_5021() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode_idx(0xDD1F);
	break;
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode_idx(0xED95);
	break;
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx_idx1(0xDD73, 0xDD72);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IX expr RParen Comma E End
void Parser::parse_main_action_5022() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx(0xDD73);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IX expr RParen Comma H End
void Parser::parse_main_action_5023() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx(0xDD74);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IX expr RParen Comma HL End
void Parser::parse_main_action_5024() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode_idx(0xDD2F);
	break;
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode_idx(0xEDA5);
	break;
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0xF4);
	break;
	case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx_idx1(0xDD75, 0xDD74);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IX expr RParen Comma IX End
void Parser::parse_main_action_5025() {
	switch (g_args.cpu()) {
	case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xDDE5);
	add_opcode(0xE3);
	add_opcode_idx_idx1(0xDD75, 0xDD74);
	add_opcode(0xE3);
	add_opcode(0xDDE1);
	break;
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDDE5);
	add_opcode(0xED54);
	add_opcode_idx_idx1(0xDD75, 0xDD74);
	add_opcode(0xED54);
	add_opcode(0xDDE1);
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode_idx(0xDD3F);
	break;
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode_idx(0xED81);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IX expr RParen Comma IY End
void Parser::parse_main_action_5026() {
	switch (g_args.cpu()) {
	case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xFDE5);
	add_opcode(0xE3);
	add_opcode_idx_idx1(0xDD75, 0xDD74);
	add_opcode(0xE3);
	add_opcode(0xFDE1);
	break;
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFDE5);
	add_opcode(0xED54);
	add_opcode_idx_idx1(0xDD75, 0xDD74);
	add_opcode(0xED54);
	add_opcode(0xFDE1);
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode_idx(0xDD3E);
	break;
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode_idx(0xED91);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IX expr RParen Comma JKHL End
void Parser::parse_main_action_5027() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0xFDCF);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IX expr RParen Comma L End
void Parser::parse_main_action_5028() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx(0xDD75);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IX expr RParen Comma SP End
void Parser::parse_main_action_5029() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode_idx(0xEDB5);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IX expr RParen Comma XIX End
void Parser::parse_main_action_5030() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode_idx(0xED01);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IX expr RParen Comma YIY End
void Parser::parse_main_action_5031() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode_idx(0xED11);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IX expr RParen Comma expr End
void Parser::parse_main_action_5032() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_opcode_idx_n(0xDD36);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IY RParen Comma A End
void Parser::parse_main_action_5033() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xFD7700);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IY RParen Comma AHL End
void Parser::parse_main_action_5034() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xED2000);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IY RParen Comma B End
void Parser::parse_main_action_5035() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xFD7000);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IY RParen Comma BC End
void Parser::parse_main_action_5036() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xED8400);
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xFD0F00);
	break;
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xFD7100);
	add_opcode(0xFD7001);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IY RParen Comma BCDE End
void Parser::parse_main_action_5037() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDDDF00);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IY RParen Comma C End
void Parser::parse_main_action_5038() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xFD7100);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IY RParen Comma D End
void Parser::parse_main_action_5039() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xFD7200);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IY RParen Comma DE End
void Parser::parse_main_action_5040() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xED9400);
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xFD1F00);
	break;
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xFD7300);
	add_opcode(0xFD7201);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IY RParen Comma E End
void Parser::parse_main_action_5041() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xFD7300);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IY RParen Comma H End
void Parser::parse_main_action_5042() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xFD7400);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IY RParen Comma HL End
void Parser::parse_main_action_5043() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xEDA400);
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xFD2F00);
	break;
	case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xFD7500);
	add_opcode(0xFD7401);
	break;
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFDF400);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IY RParen Comma IX End
void Parser::parse_main_action_5044() {
	switch (g_args.cpu()) {
	case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xDDE5);
	add_opcode(0xE3);
	add_opcode(0xFD7500);
	add_opcode(0xFD7401);
	add_opcode(0xE3);
	add_opcode(0xDDE1);
	break;
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDDE5);
	add_opcode(0xED54);
	add_opcode(0xFD7500);
	add_opcode(0xFD7401);
	add_opcode(0xED54);
	add_opcode(0xDDE1);
	break;
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xED8000);
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xFD3E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IY RParen Comma IY End
void Parser::parse_main_action_5045() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xED9000);
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xFD3F00);
	break;
	case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xFDE5);
	add_opcode(0xE3);
	add_opcode(0xFD7500);
	add_opcode(0xFD7401);
	add_opcode(0xE3);
	add_opcode(0xFDE1);
	break;
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFDE5);
	add_opcode(0xED54);
	add_opcode(0xFD7500);
	add_opcode(0xFD7401);
	add_opcode(0xED54);
	add_opcode(0xFDE1);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IY RParen Comma JKHL End
void Parser::parse_main_action_5046() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFDDF00);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IY RParen Comma L End
void Parser::parse_main_action_5047() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xFD7500);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IY RParen Comma SP End
void Parser::parse_main_action_5048() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xEDB400);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IY RParen Comma XIX End
void Parser::parse_main_action_5049() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xED0000);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IY RParen Comma YIY End
void Parser::parse_main_action_5050() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xED1000);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IY RParen Comma expr End
void Parser::parse_main_action_5051() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_opcode_n(0xFD3600);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IY expr RParen Comma A End
void Parser::parse_main_action_5052() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx(0xFD77);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IY expr RParen Comma AHL End
void Parser::parse_main_action_5053() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode_idx(0xED20);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IY expr RParen Comma B End
void Parser::parse_main_action_5054() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx(0xFD70);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IY expr RParen Comma BC End
void Parser::parse_main_action_5055() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode_idx(0xED84);
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode_idx(0xFD0F);
	break;
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx_idx1(0xFD71, 0xFD70);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IY expr RParen Comma BCDE End
void Parser::parse_main_action_5056() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0xDDDF);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IY expr RParen Comma C End
void Parser::parse_main_action_5057() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx(0xFD71);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IY expr RParen Comma D End
void Parser::parse_main_action_5058() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx(0xFD72);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IY expr RParen Comma DE End
void Parser::parse_main_action_5059() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode_idx(0xED94);
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode_idx(0xFD1F);
	break;
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx_idx1(0xFD73, 0xFD72);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IY expr RParen Comma E End
void Parser::parse_main_action_5060() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx(0xFD73);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IY expr RParen Comma H End
void Parser::parse_main_action_5061() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx(0xFD74);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IY expr RParen Comma HL End
void Parser::parse_main_action_5062() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode_idx(0xEDA4);
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode_idx(0xFD2F);
	break;
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0xFDF4);
	break;
	case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx_idx1(0xFD75, 0xFD74);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IY expr RParen Comma IX End
void Parser::parse_main_action_5063() {
	switch (g_args.cpu()) {
	case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xDDE5);
	add_opcode(0xE3);
	add_opcode_idx_idx1(0xFD75, 0xFD74);
	add_opcode(0xE3);
	add_opcode(0xDDE1);
	break;
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDDE5);
	add_opcode(0xED54);
	add_opcode_idx_idx1(0xFD75, 0xFD74);
	add_opcode(0xED54);
	add_opcode(0xDDE1);
	break;
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode_idx(0xED80);
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode_idx(0xFD3E);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IY expr RParen Comma IY End
void Parser::parse_main_action_5064() {
	switch (g_args.cpu()) {
	case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xFDE5);
	add_opcode(0xE3);
	add_opcode_idx_idx1(0xFD75, 0xFD74);
	add_opcode(0xE3);
	add_opcode(0xFDE1);
	break;
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFDE5);
	add_opcode(0xED54);
	add_opcode_idx_idx1(0xFD75, 0xFD74);
	add_opcode(0xED54);
	add_opcode(0xFDE1);
	break;
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode_idx(0xED90);
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode_idx(0xFD3F);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IY expr RParen Comma JKHL End
void Parser::parse_main_action_5065() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0xFDDF);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IY expr RParen Comma L End
void Parser::parse_main_action_5066() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx(0xFD75);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IY expr RParen Comma SP End
void Parser::parse_main_action_5067() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode_idx(0xEDB4);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IY expr RParen Comma XIX End
void Parser::parse_main_action_5068() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode_idx(0xED00);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IY expr RParen Comma YIY End
void Parser::parse_main_action_5069() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode_idx(0xED10);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen IY expr RParen Comma expr End
void Parser::parse_main_action_5070() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_opcode_idx_n(0xFD36);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PBC RParen Comma A End
void Parser::parse_main_action_5071() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0x02);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PDE RParen Comma A End
void Parser::parse_main_action_5072() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0x12);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PHL RParen Comma A End
void Parser::parse_main_action_5073() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0x77);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PHL RParen Comma B End
void Parser::parse_main_action_5074() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0x70);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PHL RParen Comma C End
void Parser::parse_main_action_5075() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0x71);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PHL RParen Comma D End
void Parser::parse_main_action_5076() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0x72);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PHL RParen Comma E End
void Parser::parse_main_action_5077() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0x73);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PHL RParen Comma H End
void Parser::parse_main_action_5078() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0x74);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PHL RParen Comma L End
void Parser::parse_main_action_5079() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0x75);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PHL RParen Comma expr End
void Parser::parse_main_action_5080() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x5B);
	add_opcode_n(0x36);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PIX RParen Comma A End
void Parser::parse_main_action_5081() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xDD7700);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PIX RParen Comma AHL End
void Parser::parse_main_action_5082() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xED2100);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PIX RParen Comma B End
void Parser::parse_main_action_5083() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xDD7000);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PIX RParen Comma BC End
void Parser::parse_main_action_5084() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xED8500);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PIX RParen Comma C End
void Parser::parse_main_action_5085() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xDD7100);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PIX RParen Comma D End
void Parser::parse_main_action_5086() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xDD7200);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PIX RParen Comma DE End
void Parser::parse_main_action_5087() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xED9500);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PIX RParen Comma E End
void Parser::parse_main_action_5088() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xDD7300);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PIX RParen Comma H End
void Parser::parse_main_action_5089() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xDD7400);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PIX RParen Comma HL End
void Parser::parse_main_action_5090() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xEDA500);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PIX RParen Comma IX End
void Parser::parse_main_action_5091() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xED8100);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PIX RParen Comma IY End
void Parser::parse_main_action_5092() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xED9100);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PIX RParen Comma L End
void Parser::parse_main_action_5093() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xDD7500);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PIX RParen Comma SP End
void Parser::parse_main_action_5094() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xEDB500);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PIX RParen Comma XIX End
void Parser::parse_main_action_5095() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xED0100);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PIX RParen Comma YIY End
void Parser::parse_main_action_5096() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xED1100);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PIX RParen Comma expr End
void Parser::parse_main_action_5097() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x5B);
	add_opcode_n(0xDD3600);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PIX expr RParen Comma A End
void Parser::parse_main_action_5098() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xDD77);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PIX expr RParen Comma AHL End
void Parser::parse_main_action_5099() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xED21);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PIX expr RParen Comma B End
void Parser::parse_main_action_5100() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xDD70);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PIX expr RParen Comma BC End
void Parser::parse_main_action_5101() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xED85);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PIX expr RParen Comma C End
void Parser::parse_main_action_5102() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xDD71);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PIX expr RParen Comma D End
void Parser::parse_main_action_5103() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xDD72);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PIX expr RParen Comma DE End
void Parser::parse_main_action_5104() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xED95);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PIX expr RParen Comma E End
void Parser::parse_main_action_5105() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xDD73);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PIX expr RParen Comma H End
void Parser::parse_main_action_5106() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xDD74);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PIX expr RParen Comma HL End
void Parser::parse_main_action_5107() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xEDA5);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PIX expr RParen Comma IX End
void Parser::parse_main_action_5108() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xED81);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PIX expr RParen Comma IY End
void Parser::parse_main_action_5109() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xED91);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PIX expr RParen Comma L End
void Parser::parse_main_action_5110() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xDD75);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PIX expr RParen Comma SP End
void Parser::parse_main_action_5111() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xEDB5);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PIX expr RParen Comma XIX End
void Parser::parse_main_action_5112() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xED01);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PIX expr RParen Comma YIY End
void Parser::parse_main_action_5113() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xED11);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PIX expr RParen Comma expr End
void Parser::parse_main_action_5114() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x5B);
	add_opcode_idx_n(0xDD36);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PIY RParen Comma A End
void Parser::parse_main_action_5115() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xFD7700);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PIY RParen Comma AHL End
void Parser::parse_main_action_5116() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xED2000);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PIY RParen Comma B End
void Parser::parse_main_action_5117() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xFD7000);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PIY RParen Comma BC End
void Parser::parse_main_action_5118() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xED8400);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PIY RParen Comma C End
void Parser::parse_main_action_5119() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xFD7100);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PIY RParen Comma D End
void Parser::parse_main_action_5120() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xFD7200);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PIY RParen Comma DE End
void Parser::parse_main_action_5121() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xED9400);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PIY RParen Comma E End
void Parser::parse_main_action_5122() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xFD7300);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PIY RParen Comma H End
void Parser::parse_main_action_5123() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xFD7400);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PIY RParen Comma HL End
void Parser::parse_main_action_5124() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xEDA400);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PIY RParen Comma IX End
void Parser::parse_main_action_5125() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xED8000);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PIY RParen Comma IY End
void Parser::parse_main_action_5126() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xED9000);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PIY RParen Comma L End
void Parser::parse_main_action_5127() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xFD7500);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PIY RParen Comma SP End
void Parser::parse_main_action_5128() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xEDB400);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PIY RParen Comma XIX End
void Parser::parse_main_action_5129() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xED0000);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PIY RParen Comma YIY End
void Parser::parse_main_action_5130() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xED1000);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PIY RParen Comma expr End
void Parser::parse_main_action_5131() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x5B);
	add_opcode_n(0xFD3600);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PIY expr RParen Comma A End
void Parser::parse_main_action_5132() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xFD77);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PIY expr RParen Comma AHL End
void Parser::parse_main_action_5133() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xED20);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PIY expr RParen Comma B End
void Parser::parse_main_action_5134() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xFD70);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PIY expr RParen Comma BC End
void Parser::parse_main_action_5135() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xED84);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PIY expr RParen Comma C End
void Parser::parse_main_action_5136() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xFD71);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PIY expr RParen Comma D End
void Parser::parse_main_action_5137() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xFD72);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PIY expr RParen Comma DE End
void Parser::parse_main_action_5138() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xED94);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PIY expr RParen Comma E End
void Parser::parse_main_action_5139() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xFD73);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PIY expr RParen Comma H End
void Parser::parse_main_action_5140() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xFD74);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PIY expr RParen Comma HL End
void Parser::parse_main_action_5141() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xEDA4);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PIY expr RParen Comma IX End
void Parser::parse_main_action_5142() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xED80);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PIY expr RParen Comma IY End
void Parser::parse_main_action_5143() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xED90);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PIY expr RParen Comma L End
void Parser::parse_main_action_5144() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xFD75);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PIY expr RParen Comma SP End
void Parser::parse_main_action_5145() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xEDB4);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PIY expr RParen Comma XIX End
void Parser::parse_main_action_5146() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xED00);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PIY expr RParen Comma YIY End
void Parser::parse_main_action_5147() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xED10);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PIY expr RParen Comma expr End
void Parser::parse_main_action_5148() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x5B);
	add_opcode_idx_n(0xFD36);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PP Colon expr RParen Comma A End
void Parser::parse_main_action_5149() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x5B);
	add_opcode_nn(0x32, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PP Colon expr RParen Comma BC End
void Parser::parse_main_action_5150() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x5B);
	add_opcode_nn(0xED43, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PP Colon expr RParen Comma DE End
void Parser::parse_main_action_5151() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x5B);
	add_opcode_nn(0xED53, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PP Colon expr RParen Comma HL End
void Parser::parse_main_action_5152() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x5B);
	add_opcode_nn(0x22, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PP Colon expr RParen Comma IX End
void Parser::parse_main_action_5153() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x5B);
	add_opcode_nn(0xDD22, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PP Colon expr RParen Comma IY End
void Parser::parse_main_action_5154() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x5B);
	add_opcode_nn(0xFD22, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PP Colon expr RParen Comma SP End
void Parser::parse_main_action_5155() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x5B);
	add_opcode_nn(0xED73, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PW Plus BC RParen Comma HL End
void Parser::parse_main_action_5156() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xED07);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PW Plus HL RParen Comma A End
void Parser::parse_main_action_5157() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x8C);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PW Plus HL RParen Comma BC End
void Parser::parse_main_action_5158() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D03);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PW Plus HL RParen Comma BCDE End
void Parser::parse_main_action_5159() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDD0D);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PW Plus HL RParen Comma DE End
void Parser::parse_main_action_5160() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D43);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PW Plus HL RParen Comma IX End
void Parser::parse_main_action_5161() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D83);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PW Plus HL RParen Comma IY End
void Parser::parse_main_action_5162() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DC3);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PW Plus HL RParen Comma JKHL End
void Parser::parse_main_action_5163() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFD0D);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PW Plus HL RParen Comma PW End
void Parser::parse_main_action_5164() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D0B);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PW Plus HL RParen Comma PX End
void Parser::parse_main_action_5165() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D4B);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PW Plus HL RParen Comma PY End
void Parser::parse_main_action_5166() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D8B);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PW Plus HL RParen Comma PZ End
void Parser::parse_main_action_5167() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DCB);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PW RParen Comma A End
void Parser::parse_main_action_5168() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x8E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PW RParen Comma BC End
void Parser::parse_main_action_5169() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D0100);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PW RParen Comma BCDE End
void Parser::parse_main_action_5170() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDD0F00);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PW RParen Comma DE End
void Parser::parse_main_action_5171() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D4100);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PW RParen Comma HL End
void Parser::parse_main_action_5172() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x8600);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PW RParen Comma IX End
void Parser::parse_main_action_5173() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D8100);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PW RParen Comma IY End
void Parser::parse_main_action_5174() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DC100);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PW RParen Comma JKHL End
void Parser::parse_main_action_5175() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFD0F00);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PW RParen Comma PW End
void Parser::parse_main_action_5176() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D0900);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PW RParen Comma PX End
void Parser::parse_main_action_5177() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D4900);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PW RParen Comma PY End
void Parser::parse_main_action_5178() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D8900);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PW RParen Comma PZ End
void Parser::parse_main_action_5179() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DC900);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PW expr RParen Comma A End
void Parser::parse_main_action_5180() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x8E);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PW expr RParen Comma BC End
void Parser::parse_main_action_5181() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x6D01);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PW expr RParen Comma BCDE End
void Parser::parse_main_action_5182() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0xDD0F);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PW expr RParen Comma DE End
void Parser::parse_main_action_5183() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x6D41);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PW expr RParen Comma HL End
void Parser::parse_main_action_5184() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x86);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PW expr RParen Comma IX End
void Parser::parse_main_action_5185() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x6D81);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PW expr RParen Comma IY End
void Parser::parse_main_action_5186() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x6DC1);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PW expr RParen Comma JKHL End
void Parser::parse_main_action_5187() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0xFD0F);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PW expr RParen Comma PW End
void Parser::parse_main_action_5188() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x6D09);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PW expr RParen Comma PX End
void Parser::parse_main_action_5189() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x6D49);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PW expr RParen Comma PY End
void Parser::parse_main_action_5190() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x6D89);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PW expr RParen Comma PZ End
void Parser::parse_main_action_5191() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x6DC9);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PX Plus BC RParen Comma HL End
void Parser::parse_main_action_5192() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xED17);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PX Plus HL RParen Comma A End
void Parser::parse_main_action_5193() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x9C);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PX Plus HL RParen Comma BC End
void Parser::parse_main_action_5194() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D13);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PX Plus HL RParen Comma BCDE End
void Parser::parse_main_action_5195() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDD1D);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PX Plus HL RParen Comma DE End
void Parser::parse_main_action_5196() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D53);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PX Plus HL RParen Comma IX End
void Parser::parse_main_action_5197() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D93);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PX Plus HL RParen Comma IY End
void Parser::parse_main_action_5198() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DD3);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PX Plus HL RParen Comma JKHL End
void Parser::parse_main_action_5199() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFD1D);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PX Plus HL RParen Comma PW End
void Parser::parse_main_action_5200() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D1B);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PX Plus HL RParen Comma PX End
void Parser::parse_main_action_5201() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D5B);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PX Plus HL RParen Comma PY End
void Parser::parse_main_action_5202() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D9B);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PX Plus HL RParen Comma PZ End
void Parser::parse_main_action_5203() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DDB);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PX RParen Comma A End
void Parser::parse_main_action_5204() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x9E00);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PX RParen Comma BC End
void Parser::parse_main_action_5205() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D1100);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PX RParen Comma BCDE End
void Parser::parse_main_action_5206() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDD1F00);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PX RParen Comma DE End
void Parser::parse_main_action_5207() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D5100);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PX RParen Comma HL End
void Parser::parse_main_action_5208() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x9600);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PX RParen Comma IX End
void Parser::parse_main_action_5209() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D9100);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PX RParen Comma IY End
void Parser::parse_main_action_5210() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DD100);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PX RParen Comma JKHL End
void Parser::parse_main_action_5211() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFD1F00);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PX RParen Comma PW End
void Parser::parse_main_action_5212() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D1900);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PX RParen Comma PX End
void Parser::parse_main_action_5213() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D5900);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PX RParen Comma PY End
void Parser::parse_main_action_5214() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D9900);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PX RParen Comma PZ End
void Parser::parse_main_action_5215() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DD900);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PX expr RParen Comma A End
void Parser::parse_main_action_5216() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x9E);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PX expr RParen Comma BC End
void Parser::parse_main_action_5217() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x6D11);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PX expr RParen Comma BCDE End
void Parser::parse_main_action_5218() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0xDD1F);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PX expr RParen Comma DE End
void Parser::parse_main_action_5219() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x6D51);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PX expr RParen Comma HL End
void Parser::parse_main_action_5220() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x96);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PX expr RParen Comma IX End
void Parser::parse_main_action_5221() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x6D91);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PX expr RParen Comma IY End
void Parser::parse_main_action_5222() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x6DD1);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PX expr RParen Comma JKHL End
void Parser::parse_main_action_5223() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0xFD1F);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PX expr RParen Comma PW End
void Parser::parse_main_action_5224() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x6D19);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PX expr RParen Comma PX End
void Parser::parse_main_action_5225() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x6D59);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PX expr RParen Comma PY End
void Parser::parse_main_action_5226() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x6D99);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PX expr RParen Comma PZ End
void Parser::parse_main_action_5227() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x6DD9);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PY Plus BC RParen Comma HL End
void Parser::parse_main_action_5228() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xED27);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PY Plus HL RParen Comma A End
void Parser::parse_main_action_5229() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xAC);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PY Plus HL RParen Comma BC End
void Parser::parse_main_action_5230() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D23);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PY Plus HL RParen Comma BCDE End
void Parser::parse_main_action_5231() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDD2D);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PY Plus HL RParen Comma DE End
void Parser::parse_main_action_5232() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D63);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PY Plus HL RParen Comma IX End
void Parser::parse_main_action_5233() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DA3);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PY Plus HL RParen Comma IY End
void Parser::parse_main_action_5234() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DE3);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PY Plus HL RParen Comma JKHL End
void Parser::parse_main_action_5235() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFD2D);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PY Plus HL RParen Comma PW End
void Parser::parse_main_action_5236() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D2B);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PY Plus HL RParen Comma PX End
void Parser::parse_main_action_5237() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D6B);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PY Plus HL RParen Comma PY End
void Parser::parse_main_action_5238() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DAB);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PY Plus HL RParen Comma PZ End
void Parser::parse_main_action_5239() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DEB);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PY RParen Comma A End
void Parser::parse_main_action_5240() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xAE00);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PY RParen Comma BC End
void Parser::parse_main_action_5241() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D2100);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PY RParen Comma BCDE End
void Parser::parse_main_action_5242() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDD2F00);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PY RParen Comma DE End
void Parser::parse_main_action_5243() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D6100);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PY RParen Comma HL End
void Parser::parse_main_action_5244() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xA600);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PY RParen Comma IX End
void Parser::parse_main_action_5245() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DA100);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PY RParen Comma IY End
void Parser::parse_main_action_5246() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DE100);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PY RParen Comma JKHL End
void Parser::parse_main_action_5247() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFD2F00);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PY RParen Comma PW End
void Parser::parse_main_action_5248() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D2900);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PY RParen Comma PX End
void Parser::parse_main_action_5249() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D6900);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PY RParen Comma PY End
void Parser::parse_main_action_5250() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DA900);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PY RParen Comma PZ End
void Parser::parse_main_action_5251() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DE900);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PY expr RParen Comma A End
void Parser::parse_main_action_5252() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0xAE);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PY expr RParen Comma BC End
void Parser::parse_main_action_5253() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x6D21);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PY expr RParen Comma BCDE End
void Parser::parse_main_action_5254() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0xDD2F);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PY expr RParen Comma DE End
void Parser::parse_main_action_5255() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x6D61);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PY expr RParen Comma HL End
void Parser::parse_main_action_5256() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0xA6);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PY expr RParen Comma IX End
void Parser::parse_main_action_5257() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x6DA1);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PY expr RParen Comma IY End
void Parser::parse_main_action_5258() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x6DE1);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PY expr RParen Comma JKHL End
void Parser::parse_main_action_5259() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0xFD2F);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PY expr RParen Comma PW End
void Parser::parse_main_action_5260() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x6D29);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PY expr RParen Comma PX End
void Parser::parse_main_action_5261() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x6D69);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PY expr RParen Comma PY End
void Parser::parse_main_action_5262() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x6DA9);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PY expr RParen Comma PZ End
void Parser::parse_main_action_5263() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x6DE9);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PZ Plus BC RParen Comma HL End
void Parser::parse_main_action_5264() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xED37);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PZ Plus HL RParen Comma A End
void Parser::parse_main_action_5265() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xBC);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PZ Plus HL RParen Comma BC End
void Parser::parse_main_action_5266() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D33);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PZ Plus HL RParen Comma BCDE End
void Parser::parse_main_action_5267() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDD3D);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PZ Plus HL RParen Comma DE End
void Parser::parse_main_action_5268() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D73);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PZ Plus HL RParen Comma IX End
void Parser::parse_main_action_5269() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DB3);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PZ Plus HL RParen Comma IY End
void Parser::parse_main_action_5270() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DF3);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PZ Plus HL RParen Comma JKHL End
void Parser::parse_main_action_5271() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFD3D);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PZ Plus HL RParen Comma PW End
void Parser::parse_main_action_5272() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D3B);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PZ Plus HL RParen Comma PX End
void Parser::parse_main_action_5273() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D7B);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PZ Plus HL RParen Comma PY End
void Parser::parse_main_action_5274() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DBB);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PZ Plus HL RParen Comma PZ End
void Parser::parse_main_action_5275() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DFB);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PZ RParen Comma A End
void Parser::parse_main_action_5276() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xBE00);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PZ RParen Comma BC End
void Parser::parse_main_action_5277() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D3100);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PZ RParen Comma BCDE End
void Parser::parse_main_action_5278() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDD3F00);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PZ RParen Comma DE End
void Parser::parse_main_action_5279() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D7100);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PZ RParen Comma HL End
void Parser::parse_main_action_5280() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xB600);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PZ RParen Comma IX End
void Parser::parse_main_action_5281() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DB100);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PZ RParen Comma IY End
void Parser::parse_main_action_5282() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DF100);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PZ RParen Comma JKHL End
void Parser::parse_main_action_5283() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFD3F00);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PZ RParen Comma PW End
void Parser::parse_main_action_5284() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D3900);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PZ RParen Comma PX End
void Parser::parse_main_action_5285() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6D7900);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PZ RParen Comma PY End
void Parser::parse_main_action_5286() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DB900);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PZ RParen Comma PZ End
void Parser::parse_main_action_5287() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x6DF900);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PZ expr RParen Comma A End
void Parser::parse_main_action_5288() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0xBE);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PZ expr RParen Comma BC End
void Parser::parse_main_action_5289() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x6D31);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PZ expr RParen Comma BCDE End
void Parser::parse_main_action_5290() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0xDD3F);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PZ expr RParen Comma DE End
void Parser::parse_main_action_5291() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x6D71);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PZ expr RParen Comma HL End
void Parser::parse_main_action_5292() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0xB6);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PZ expr RParen Comma IX End
void Parser::parse_main_action_5293() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x6DB1);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PZ expr RParen Comma IY End
void Parser::parse_main_action_5294() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x6DF1);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PZ expr RParen Comma JKHL End
void Parser::parse_main_action_5295() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0xFD3F);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PZ expr RParen Comma PW End
void Parser::parse_main_action_5296() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x6D39);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PZ expr RParen Comma PX End
void Parser::parse_main_action_5297() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x6D79);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PZ expr RParen Comma PY End
void Parser::parse_main_action_5298() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x6DB9);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen PZ expr RParen Comma PZ End
void Parser::parse_main_action_5299() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_idx(0x6DF9);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen SP Plus HL RParen Comma BCDE End
void Parser::parse_main_action_5300() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDDFF);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen SP Plus HL RParen Comma JKHL End
void Parser::parse_main_action_5301() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFDFF);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen SP RParen Comma AHL End
void Parser::parse_main_action_5302() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xED2200);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen SP RParen Comma BC End
void Parser::parse_main_action_5303() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xED8600);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen SP RParen Comma BCDE End
void Parser::parse_main_action_5304() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDDEF00);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen SP RParen Comma DE End
void Parser::parse_main_action_5305() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xED9600);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen SP RParen Comma HL End
void Parser::parse_main_action_5306() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xD400);
	break;
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xEDA600);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen SP RParen Comma IX End
void Parser::parse_main_action_5307() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDDD400);
	break;
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xED8200);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen SP RParen Comma IY End
void Parser::parse_main_action_5308() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xED9200);
	break;
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFDD400);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen SP RParen Comma JKHL End
void Parser::parse_main_action_5309() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFDEF00);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen SP RParen Comma PW End
void Parser::parse_main_action_5310() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xED0500);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen SP RParen Comma PX End
void Parser::parse_main_action_5311() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xED1500);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen SP RParen Comma PY End
void Parser::parse_main_action_5312() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xED2500);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen SP RParen Comma PZ End
void Parser::parse_main_action_5313() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xED3500);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen SP RParen Comma SP End
void Parser::parse_main_action_5314() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xEDB600);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen SP RParen Comma XIX End
void Parser::parse_main_action_5315() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xED0200);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen SP RParen Comma YIY End
void Parser::parse_main_action_5316() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xED1200);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen SP expr RParen Comma AHL End
void Parser::parse_main_action_5317() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode_idx(0xED22);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen SP expr RParen Comma BC End
void Parser::parse_main_action_5318() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode_idx(0xED86);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen SP expr RParen Comma BCDE End
void Parser::parse_main_action_5319() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_n(0xDDEF);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen SP expr RParen Comma DE End
void Parser::parse_main_action_5320() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode_idx(0xED96);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen SP expr RParen Comma HL End
void Parser::parse_main_action_5321() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode_idx(0xEDA6);
	break;
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode_n(0xD4);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen SP expr RParen Comma IX End
void Parser::parse_main_action_5322() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode_idx(0xED82);
	break;
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode_n(0xDDD4);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen SP expr RParen Comma IY End
void Parser::parse_main_action_5323() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode_idx(0xED92);
	break;
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode_n(0xFDD4);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen SP expr RParen Comma JKHL End
void Parser::parse_main_action_5324() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_n(0xFDEF);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen SP expr RParen Comma PW End
void Parser::parse_main_action_5325() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_n(0xED05);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen SP expr RParen Comma PX End
void Parser::parse_main_action_5326() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_n(0xED15);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen SP expr RParen Comma PY End
void Parser::parse_main_action_5327() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_n(0xED25);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen SP expr RParen Comma PZ End
void Parser::parse_main_action_5328() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_n(0xED35);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen SP expr RParen Comma SP End
void Parser::parse_main_action_5329() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode_idx(0xEDB6);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen SP expr RParen Comma XIX End
void Parser::parse_main_action_5330() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode_idx(0xED02);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen SP expr RParen Comma YIY End
void Parser::parse_main_action_5331() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode_idx(0xED12);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XBC RParen Comma A End
void Parser::parse_main_action_5332() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0x02);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XDE RParen Comma A End
void Parser::parse_main_action_5333() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0x12);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XHL RParen Comma A End
void Parser::parse_main_action_5334() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0x77);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XHL RParen Comma B End
void Parser::parse_main_action_5335() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0x70);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XHL RParen Comma C End
void Parser::parse_main_action_5336() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0x71);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XHL RParen Comma D End
void Parser::parse_main_action_5337() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0x72);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XHL RParen Comma E End
void Parser::parse_main_action_5338() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0x73);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XHL RParen Comma H End
void Parser::parse_main_action_5339() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0x74);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XHL RParen Comma L End
void Parser::parse_main_action_5340() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0x75);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XHL RParen Comma expr End
void Parser::parse_main_action_5341() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x40);
	add_opcode_n(0x36);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XIX RParen Comma A End
void Parser::parse_main_action_5342() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xDD7700);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XIX RParen Comma AHL End
void Parser::parse_main_action_5343() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xED2100);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XIX RParen Comma B End
void Parser::parse_main_action_5344() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xDD7000);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XIX RParen Comma BC End
void Parser::parse_main_action_5345() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xED8500);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XIX RParen Comma C End
void Parser::parse_main_action_5346() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xDD7100);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XIX RParen Comma D End
void Parser::parse_main_action_5347() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xDD7200);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XIX RParen Comma DE End
void Parser::parse_main_action_5348() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xED9500);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XIX RParen Comma E End
void Parser::parse_main_action_5349() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xDD7300);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XIX RParen Comma H End
void Parser::parse_main_action_5350() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xDD7400);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XIX RParen Comma HL End
void Parser::parse_main_action_5351() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xEDA500);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XIX RParen Comma IX End
void Parser::parse_main_action_5352() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xED8100);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XIX RParen Comma IY End
void Parser::parse_main_action_5353() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xED9100);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XIX RParen Comma L End
void Parser::parse_main_action_5354() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xDD7500);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XIX RParen Comma SP End
void Parser::parse_main_action_5355() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xEDB500);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XIX RParen Comma XIX End
void Parser::parse_main_action_5356() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xED0100);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XIX RParen Comma YIY End
void Parser::parse_main_action_5357() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xED1100);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XIX RParen Comma expr End
void Parser::parse_main_action_5358() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x40);
	add_opcode_n(0xDD3600);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XIX expr RParen Comma A End
void Parser::parse_main_action_5359() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xDD77);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XIX expr RParen Comma AHL End
void Parser::parse_main_action_5360() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xED21);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XIX expr RParen Comma B End
void Parser::parse_main_action_5361() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xDD70);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XIX expr RParen Comma BC End
void Parser::parse_main_action_5362() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xED85);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XIX expr RParen Comma C End
void Parser::parse_main_action_5363() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xDD71);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XIX expr RParen Comma D End
void Parser::parse_main_action_5364() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xDD72);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XIX expr RParen Comma DE End
void Parser::parse_main_action_5365() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xED95);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XIX expr RParen Comma E End
void Parser::parse_main_action_5366() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xDD73);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XIX expr RParen Comma H End
void Parser::parse_main_action_5367() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xDD74);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XIX expr RParen Comma HL End
void Parser::parse_main_action_5368() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xEDA5);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XIX expr RParen Comma IX End
void Parser::parse_main_action_5369() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xED81);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XIX expr RParen Comma IY End
void Parser::parse_main_action_5370() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xED91);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XIX expr RParen Comma L End
void Parser::parse_main_action_5371() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xDD75);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XIX expr RParen Comma SP End
void Parser::parse_main_action_5372() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xEDB5);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XIX expr RParen Comma XIX End
void Parser::parse_main_action_5373() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xED01);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XIX expr RParen Comma YIY End
void Parser::parse_main_action_5374() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xED11);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XIX expr RParen Comma expr End
void Parser::parse_main_action_5375() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x40);
	add_opcode_idx_n(0xDD36);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XIY RParen Comma A End
void Parser::parse_main_action_5376() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xFD7700);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XIY RParen Comma AHL End
void Parser::parse_main_action_5377() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xED2000);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XIY RParen Comma B End
void Parser::parse_main_action_5378() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xFD7000);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XIY RParen Comma BC End
void Parser::parse_main_action_5379() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xED8400);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XIY RParen Comma C End
void Parser::parse_main_action_5380() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xFD7100);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XIY RParen Comma D End
void Parser::parse_main_action_5381() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xFD7200);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XIY RParen Comma DE End
void Parser::parse_main_action_5382() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xED9400);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XIY RParen Comma E End
void Parser::parse_main_action_5383() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xFD7300);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XIY RParen Comma H End
void Parser::parse_main_action_5384() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xFD7400);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XIY RParen Comma HL End
void Parser::parse_main_action_5385() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xEDA400);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XIY RParen Comma IX End
void Parser::parse_main_action_5386() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xED8000);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XIY RParen Comma IY End
void Parser::parse_main_action_5387() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xED9000);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XIY RParen Comma L End
void Parser::parse_main_action_5388() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xFD7500);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XIY RParen Comma SP End
void Parser::parse_main_action_5389() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xEDB400);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XIY RParen Comma XIX End
void Parser::parse_main_action_5390() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xED0000);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XIY RParen Comma YIY End
void Parser::parse_main_action_5391() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xED1000);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XIY RParen Comma expr End
void Parser::parse_main_action_5392() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x40);
	add_opcode_n(0xFD3600);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XIY expr RParen Comma A End
void Parser::parse_main_action_5393() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xFD77);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XIY expr RParen Comma AHL End
void Parser::parse_main_action_5394() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xED20);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XIY expr RParen Comma B End
void Parser::parse_main_action_5395() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xFD70);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XIY expr RParen Comma BC End
void Parser::parse_main_action_5396() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xED84);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XIY expr RParen Comma C End
void Parser::parse_main_action_5397() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xFD71);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XIY expr RParen Comma D End
void Parser::parse_main_action_5398() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xFD72);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XIY expr RParen Comma DE End
void Parser::parse_main_action_5399() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xED94);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XIY expr RParen Comma E End
void Parser::parse_main_action_5400() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xFD73);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XIY expr RParen Comma H End
void Parser::parse_main_action_5401() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xFD74);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XIY expr RParen Comma HL End
void Parser::parse_main_action_5402() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xEDA4);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XIY expr RParen Comma IX End
void Parser::parse_main_action_5403() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xED80);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XIY expr RParen Comma IY End
void Parser::parse_main_action_5404() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xED90);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XIY expr RParen Comma L End
void Parser::parse_main_action_5405() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xFD75);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XIY expr RParen Comma SP End
void Parser::parse_main_action_5406() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xEDB4);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XIY expr RParen Comma XIX End
void Parser::parse_main_action_5407() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xED00);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XIY expr RParen Comma YIY End
void Parser::parse_main_action_5408() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xED10);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XIY expr RParen Comma expr End
void Parser::parse_main_action_5409() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x40);
	add_opcode_idx_n(0xFD36);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XP Colon expr RParen Comma A End
void Parser::parse_main_action_5410() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x40);
	add_opcode_nn(0x32, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XP Colon expr RParen Comma BC End
void Parser::parse_main_action_5411() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x40);
	add_opcode_nn(0xED43, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XP Colon expr RParen Comma DE End
void Parser::parse_main_action_5412() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x40);
	add_opcode_nn(0xED53, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XP Colon expr RParen Comma HL End
void Parser::parse_main_action_5413() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x40);
	add_opcode_nn(0x22, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XP Colon expr RParen Comma IX End
void Parser::parse_main_action_5414() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x40);
	add_opcode_nn(0xDD22, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XP Colon expr RParen Comma IY End
void Parser::parse_main_action_5415() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x40);
	add_opcode_nn(0xFD22, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen XP Colon expr RParen Comma SP End
void Parser::parse_main_action_5416() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x40);
	add_opcode_nn(0xED73, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YBC RParen Comma A End
void Parser::parse_main_action_5417() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0x02);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YDE RParen Comma A End
void Parser::parse_main_action_5418() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0x12);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YHL RParen Comma A End
void Parser::parse_main_action_5419() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0x77);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YHL RParen Comma B End
void Parser::parse_main_action_5420() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0x70);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YHL RParen Comma C End
void Parser::parse_main_action_5421() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0x71);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YHL RParen Comma D End
void Parser::parse_main_action_5422() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0x72);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YHL RParen Comma E End
void Parser::parse_main_action_5423() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0x73);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YHL RParen Comma H End
void Parser::parse_main_action_5424() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0x74);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YHL RParen Comma L End
void Parser::parse_main_action_5425() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0x75);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YHL RParen Comma expr End
void Parser::parse_main_action_5426() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	add_opcode_n(0x36);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YIX RParen Comma A End
void Parser::parse_main_action_5427() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xDD7700);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YIX RParen Comma AHL End
void Parser::parse_main_action_5428() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xED2100);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YIX RParen Comma B End
void Parser::parse_main_action_5429() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xDD7000);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YIX RParen Comma BC End
void Parser::parse_main_action_5430() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xED8500);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YIX RParen Comma C End
void Parser::parse_main_action_5431() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xDD7100);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YIX RParen Comma D End
void Parser::parse_main_action_5432() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xDD7200);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YIX RParen Comma DE End
void Parser::parse_main_action_5433() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xED9500);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YIX RParen Comma E End
void Parser::parse_main_action_5434() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xDD7300);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YIX RParen Comma H End
void Parser::parse_main_action_5435() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xDD7400);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YIX RParen Comma HL End
void Parser::parse_main_action_5436() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xEDA500);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YIX RParen Comma IX End
void Parser::parse_main_action_5437() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xED8100);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YIX RParen Comma IY End
void Parser::parse_main_action_5438() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xED9100);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YIX RParen Comma L End
void Parser::parse_main_action_5439() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xDD7500);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YIX RParen Comma SP End
void Parser::parse_main_action_5440() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xEDB500);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YIX RParen Comma XIX End
void Parser::parse_main_action_5441() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xED0100);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YIX RParen Comma YIY End
void Parser::parse_main_action_5442() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xED1100);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YIX RParen Comma expr End
void Parser::parse_main_action_5443() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	add_opcode_n(0xDD3600);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YIX expr RParen Comma A End
void Parser::parse_main_action_5444() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xDD77);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YIX expr RParen Comma AHL End
void Parser::parse_main_action_5445() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xED21);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YIX expr RParen Comma B End
void Parser::parse_main_action_5446() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xDD70);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YIX expr RParen Comma BC End
void Parser::parse_main_action_5447() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xED85);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YIX expr RParen Comma C End
void Parser::parse_main_action_5448() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xDD71);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YIX expr RParen Comma D End
void Parser::parse_main_action_5449() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xDD72);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YIX expr RParen Comma DE End
void Parser::parse_main_action_5450() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xED95);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YIX expr RParen Comma E End
void Parser::parse_main_action_5451() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xDD73);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YIX expr RParen Comma H End
void Parser::parse_main_action_5452() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xDD74);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YIX expr RParen Comma HL End
void Parser::parse_main_action_5453() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xEDA5);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YIX expr RParen Comma IX End
void Parser::parse_main_action_5454() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xED81);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YIX expr RParen Comma IY End
void Parser::parse_main_action_5455() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xED91);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YIX expr RParen Comma L End
void Parser::parse_main_action_5456() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xDD75);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YIX expr RParen Comma SP End
void Parser::parse_main_action_5457() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xEDB5);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YIX expr RParen Comma XIX End
void Parser::parse_main_action_5458() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xED01);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YIX expr RParen Comma YIY End
void Parser::parse_main_action_5459() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xED11);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YIX expr RParen Comma expr End
void Parser::parse_main_action_5460() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	add_opcode_idx_n(0xDD36);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YIY RParen Comma A End
void Parser::parse_main_action_5461() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xFD7700);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YIY RParen Comma AHL End
void Parser::parse_main_action_5462() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xED2000);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YIY RParen Comma B End
void Parser::parse_main_action_5463() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xFD7000);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YIY RParen Comma BC End
void Parser::parse_main_action_5464() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xED8400);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YIY RParen Comma C End
void Parser::parse_main_action_5465() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xFD7100);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YIY RParen Comma D End
void Parser::parse_main_action_5466() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xFD7200);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YIY RParen Comma DE End
void Parser::parse_main_action_5467() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xED9400);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YIY RParen Comma E End
void Parser::parse_main_action_5468() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xFD7300);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YIY RParen Comma H End
void Parser::parse_main_action_5469() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xFD7400);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YIY RParen Comma HL End
void Parser::parse_main_action_5470() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xEDA400);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YIY RParen Comma IX End
void Parser::parse_main_action_5471() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xED8000);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YIY RParen Comma IY End
void Parser::parse_main_action_5472() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xED9000);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YIY RParen Comma L End
void Parser::parse_main_action_5473() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xFD7500);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YIY RParen Comma SP End
void Parser::parse_main_action_5474() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xEDB400);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YIY RParen Comma XIX End
void Parser::parse_main_action_5475() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xED0000);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YIY RParen Comma YIY End
void Parser::parse_main_action_5476() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xED1000);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YIY RParen Comma expr End
void Parser::parse_main_action_5477() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	add_opcode_n(0xFD3600);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YIY expr RParen Comma A End
void Parser::parse_main_action_5478() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xFD77);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YIY expr RParen Comma AHL End
void Parser::parse_main_action_5479() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xED20);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YIY expr RParen Comma B End
void Parser::parse_main_action_5480() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xFD70);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YIY expr RParen Comma BC End
void Parser::parse_main_action_5481() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xED84);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YIY expr RParen Comma C End
void Parser::parse_main_action_5482() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xFD71);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YIY expr RParen Comma D End
void Parser::parse_main_action_5483() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xFD72);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YIY expr RParen Comma DE End
void Parser::parse_main_action_5484() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xED94);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YIY expr RParen Comma E End
void Parser::parse_main_action_5485() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xFD73);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YIY expr RParen Comma H End
void Parser::parse_main_action_5486() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xFD74);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YIY expr RParen Comma HL End
void Parser::parse_main_action_5487() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xEDA4);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YIY expr RParen Comma IX End
void Parser::parse_main_action_5488() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xED80);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YIY expr RParen Comma IY End
void Parser::parse_main_action_5489() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xED90);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YIY expr RParen Comma L End
void Parser::parse_main_action_5490() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xFD75);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YIY expr RParen Comma SP End
void Parser::parse_main_action_5491() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xEDB4);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YIY expr RParen Comma XIX End
void Parser::parse_main_action_5492() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xED00);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YIY expr RParen Comma YIY End
void Parser::parse_main_action_5493() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xED10);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YIY expr RParen Comma expr End
void Parser::parse_main_action_5494() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	add_opcode_idx_n(0xFD36);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YP Colon expr RParen Comma A End
void Parser::parse_main_action_5495() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	add_opcode_nn(0x32, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YP Colon expr RParen Comma BC End
void Parser::parse_main_action_5496() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	add_opcode_nn(0xED43, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YP Colon expr RParen Comma DE End
void Parser::parse_main_action_5497() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	add_opcode_nn(0xED53, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YP Colon expr RParen Comma HL End
void Parser::parse_main_action_5498() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	add_opcode_nn(0x22, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YP Colon expr RParen Comma IX End
void Parser::parse_main_action_5499() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	add_opcode_nn(0xDD22, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YP Colon expr RParen Comma IY End
void Parser::parse_main_action_5500() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	add_opcode_nn(0xFD22, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen YP Colon expr RParen Comma SP End
void Parser::parse_main_action_5501() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	add_opcode_nn(0xED73, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZBC RParen Comma A End
void Parser::parse_main_action_5502() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0x02);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZDE RParen Comma A End
void Parser::parse_main_action_5503() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0x12);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZHL RParen Comma A End
void Parser::parse_main_action_5504() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0x77);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZHL RParen Comma B End
void Parser::parse_main_action_5505() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0x70);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZHL RParen Comma C End
void Parser::parse_main_action_5506() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0x71);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZHL RParen Comma D End
void Parser::parse_main_action_5507() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0x72);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZHL RParen Comma E End
void Parser::parse_main_action_5508() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0x73);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZHL RParen Comma H End
void Parser::parse_main_action_5509() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0x74);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZHL RParen Comma L End
void Parser::parse_main_action_5510() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0x75);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZHL RParen Comma expr End
void Parser::parse_main_action_5511() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x7F);
	add_opcode_n(0x36);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZIX RParen Comma A End
void Parser::parse_main_action_5512() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xDD7700);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZIX RParen Comma AHL End
void Parser::parse_main_action_5513() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xED2100);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZIX RParen Comma B End
void Parser::parse_main_action_5514() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xDD7000);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZIX RParen Comma BC End
void Parser::parse_main_action_5515() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xED8500);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZIX RParen Comma C End
void Parser::parse_main_action_5516() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xDD7100);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZIX RParen Comma D End
void Parser::parse_main_action_5517() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xDD7200);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZIX RParen Comma DE End
void Parser::parse_main_action_5518() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xED9500);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZIX RParen Comma E End
void Parser::parse_main_action_5519() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xDD7300);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZIX RParen Comma H End
void Parser::parse_main_action_5520() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xDD7400);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZIX RParen Comma HL End
void Parser::parse_main_action_5521() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xEDA500);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZIX RParen Comma IX End
void Parser::parse_main_action_5522() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xED8100);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZIX RParen Comma IY End
void Parser::parse_main_action_5523() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xED9100);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZIX RParen Comma L End
void Parser::parse_main_action_5524() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xDD7500);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZIX RParen Comma SP End
void Parser::parse_main_action_5525() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xEDB500);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZIX RParen Comma XIX End
void Parser::parse_main_action_5526() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xED0100);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZIX RParen Comma YIY End
void Parser::parse_main_action_5527() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xED1100);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZIX RParen Comma expr End
void Parser::parse_main_action_5528() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x7F);
	add_opcode_n(0xDD3600);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZIX expr RParen Comma A End
void Parser::parse_main_action_5529() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xDD77);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZIX expr RParen Comma AHL End
void Parser::parse_main_action_5530() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xED21);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZIX expr RParen Comma B End
void Parser::parse_main_action_5531() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xDD70);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZIX expr RParen Comma BC End
void Parser::parse_main_action_5532() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xED85);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZIX expr RParen Comma C End
void Parser::parse_main_action_5533() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xDD71);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZIX expr RParen Comma D End
void Parser::parse_main_action_5534() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xDD72);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZIX expr RParen Comma DE End
void Parser::parse_main_action_5535() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xED95);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZIX expr RParen Comma E End
void Parser::parse_main_action_5536() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xDD73);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZIX expr RParen Comma H End
void Parser::parse_main_action_5537() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xDD74);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZIX expr RParen Comma HL End
void Parser::parse_main_action_5538() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xEDA5);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZIX expr RParen Comma IX End
void Parser::parse_main_action_5539() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xED81);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZIX expr RParen Comma IY End
void Parser::parse_main_action_5540() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xED91);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZIX expr RParen Comma L End
void Parser::parse_main_action_5541() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xDD75);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZIX expr RParen Comma SP End
void Parser::parse_main_action_5542() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xEDB5);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZIX expr RParen Comma XIX End
void Parser::parse_main_action_5543() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xED01);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZIX expr RParen Comma YIY End
void Parser::parse_main_action_5544() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xED11);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZIX expr RParen Comma expr End
void Parser::parse_main_action_5545() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x7F);
	add_opcode_idx_n(0xDD36);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZIY RParen Comma A End
void Parser::parse_main_action_5546() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xFD7700);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZIY RParen Comma AHL End
void Parser::parse_main_action_5547() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xED2000);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZIY RParen Comma B End
void Parser::parse_main_action_5548() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xFD7000);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZIY RParen Comma BC End
void Parser::parse_main_action_5549() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xED8400);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZIY RParen Comma C End
void Parser::parse_main_action_5550() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xFD7100);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZIY RParen Comma D End
void Parser::parse_main_action_5551() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xFD7200);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZIY RParen Comma DE End
void Parser::parse_main_action_5552() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xED9400);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZIY RParen Comma E End
void Parser::parse_main_action_5553() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xFD7300);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZIY RParen Comma H End
void Parser::parse_main_action_5554() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xFD7400);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZIY RParen Comma HL End
void Parser::parse_main_action_5555() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xEDA400);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZIY RParen Comma IX End
void Parser::parse_main_action_5556() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xED8000);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZIY RParen Comma IY End
void Parser::parse_main_action_5557() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xED9000);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZIY RParen Comma L End
void Parser::parse_main_action_5558() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xFD7500);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZIY RParen Comma SP End
void Parser::parse_main_action_5559() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xEDB400);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZIY RParen Comma XIX End
void Parser::parse_main_action_5560() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xED0000);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZIY RParen Comma YIY End
void Parser::parse_main_action_5561() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xED1000);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZIY RParen Comma expr End
void Parser::parse_main_action_5562() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x7F);
	add_opcode_n(0xFD3600);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZIY expr RParen Comma A End
void Parser::parse_main_action_5563() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xFD77);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZIY expr RParen Comma AHL End
void Parser::parse_main_action_5564() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xED20);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZIY expr RParen Comma B End
void Parser::parse_main_action_5565() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xFD70);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZIY expr RParen Comma BC End
void Parser::parse_main_action_5566() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xED84);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZIY expr RParen Comma C End
void Parser::parse_main_action_5567() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xFD71);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZIY expr RParen Comma D End
void Parser::parse_main_action_5568() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xFD72);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZIY expr RParen Comma DE End
void Parser::parse_main_action_5569() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xED94);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZIY expr RParen Comma E End
void Parser::parse_main_action_5570() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xFD73);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZIY expr RParen Comma H End
void Parser::parse_main_action_5571() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xFD74);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZIY expr RParen Comma HL End
void Parser::parse_main_action_5572() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xEDA4);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZIY expr RParen Comma IX End
void Parser::parse_main_action_5573() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xED80);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZIY expr RParen Comma IY End
void Parser::parse_main_action_5574() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xED90);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZIY expr RParen Comma L End
void Parser::parse_main_action_5575() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xFD75);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZIY expr RParen Comma SP End
void Parser::parse_main_action_5576() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xEDB4);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZIY expr RParen Comma XIX End
void Parser::parse_main_action_5577() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xED00);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZIY expr RParen Comma YIY End
void Parser::parse_main_action_5578() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xED10);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZIY expr RParen Comma expr End
void Parser::parse_main_action_5579() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x7F);
	add_opcode_idx_n(0xFD36);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZP Colon expr RParen Comma A End
void Parser::parse_main_action_5580() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x7F);
	add_opcode_nn(0x32, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZP Colon expr RParen Comma BC End
void Parser::parse_main_action_5581() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x7F);
	add_opcode_nn(0xED43, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZP Colon expr RParen Comma DE End
void Parser::parse_main_action_5582() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x7F);
	add_opcode_nn(0xED53, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZP Colon expr RParen Comma HL End
void Parser::parse_main_action_5583() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x7F);
	add_opcode_nn(0x22, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZP Colon expr RParen Comma IX End
void Parser::parse_main_action_5584() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x7F);
	add_opcode_nn(0xDD22, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZP Colon expr RParen Comma IY End
void Parser::parse_main_action_5585() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x7F);
	add_opcode_nn(0xFD22, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD LParen ZP Colon expr RParen Comma SP End
void Parser::parse_main_action_5586() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x7F);
	add_opcode_nn(0xED73, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD expr Comma A End
void Parser::parse_main_action_5587() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_nn(0x32, 0);
	break;
	case CPU_GBZ80: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_nn(0xEA, 0);
	break;
	case CPU_EZ80: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_nnn(0x32, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD expr Comma BC End
void Parser::parse_main_action_5588() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0xF5);
	add_opcode(0x79);
	add_opcode_nn(0x32, 0);
	add_opcode(0x78);
	add_opcode_nn(0x32, 1);
	add_opcode(0xF1);
	break;
	case CPU_GBZ80: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0xF5);
	add_opcode(0x79);
	add_opcode_nn(0xEA, 0);
	add_opcode(0x78);
	add_opcode_nn(0xEA, 1);
	add_opcode(0xF1);
	break;
	case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_nn(0xED43, 0);
	break;
	case CPU_EZ80: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_nnn(0xED43, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD expr Comma BCDE End
void Parser::parse_main_action_5589() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_nn(0x83, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD expr Comma DE End
void Parser::parse_main_action_5590() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0xEB);
	add_opcode_nn(0x22, 0);
	add_opcode(0xEB);
	break;
	case CPU_GBZ80: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0xF5);
	add_opcode(0x7B);
	add_opcode_nn(0xEA, 0);
	add_opcode(0x7A);
	add_opcode_nn(0xEA, 1);
	add_opcode(0xF1);
	break;
	case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_nn(0xED53, 0);
	break;
	case CPU_EZ80: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_nnn(0xED53, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD expr Comma HL End
void Parser::parse_main_action_5591() {
	switch (g_args.cpu()) {
	case CPU_GBZ80: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0xD5);
	add_opcode(0xE5);
	add_opcode(0x54);
	add_opcode(0x5D);
	add_opcode_nn(0x21, 0);
	add_opcode(0x73);
	add_opcode(0x23);
	add_opcode(0x72);
	add_opcode(0xE1);
	add_opcode(0xD1);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_nn(0x22, 0);
	break;
	case CPU_EZ80: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_nnn(0x22, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD expr Comma IX End
void Parser::parse_main_action_5592() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_nn(0xDD22, 0);
	break;
	case CPU_EZ80: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_nnn(0xDD22, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD expr Comma IY End
void Parser::parse_main_action_5593() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_nn(0xFD22, 0);
	break;
	case CPU_EZ80: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_nnn(0xFD22, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD expr Comma JK End
void Parser::parse_main_action_5594() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_nn(0x89, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD expr Comma JKHL End
void Parser::parse_main_action_5595() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_nn(0x84, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LD expr Comma SP End
void Parser::parse_main_action_5596() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode(0xE5);
	add_opcode(0x210200);
	add_opcode(0x39);
	add_opcode_nn(0x22, 0);
	add_opcode(0xE1);
	break;
	case CPU_GBZ80: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_nn(0x08, 0);
	break;
	case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_nn(0xED73, 0);
	break;
	case CPU_EZ80: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_nnn(0xED73, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LDA expr End
void Parser::parse_main_action_5597() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_opcode_nn(0x3A, 0);
	break;
	case CPU_GBZ80: 
	warn_if_expr_in_parens();
	add_opcode_nn(0xFA, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LDD XY End
void Parser::parse_main_action_5598() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xEDE8);
	break;
	default:
	error_illegal_ident(); }
}

// LDD Dot L End | LDD Dot LIS End
void Parser::parse_main_action_5599() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xEDA8);
	break;
	default:
	error_illegal_ident(); }
}

// LDD Dot S End | LDD Dot SIL End
void Parser::parse_main_action_5600() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xEDA8);
	break;
	default:
	error_illegal_ident(); }
}

// LDD End
void Parser::parse_main_action_5601() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_GBZ80: 
	add_call_function("__z80asm__ldd");
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xEDA8);
	break;
	default:
	error_illegal_ident(); }
}

// LDDR XY End
void Parser::parse_main_action_5602() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xEDF8);
	break;
	default:
	error_illegal_ident(); }
}

// LDDR Dot L End | LDDR Dot LIS End
void Parser::parse_main_action_5603() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xEDB8);
	break;
	default:
	error_illegal_ident(); }
}

// LDDR Dot S End | LDDR Dot SIL End
void Parser::parse_main_action_5604() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xEDB8);
	break;
	default:
	error_illegal_ident(); }
}

// LDDR End
void Parser::parse_main_action_5605() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_GBZ80: 
	add_call_function("__z80asm__lddr");
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xEDB8);
	break;
	default:
	error_illegal_ident(); }
}

// LDDRX End | LDRX End
void Parser::parse_main_action_5606() {
	switch (g_args.cpu()) {
	case CPU_Z80N: 
	add_opcode(0xEDBC);
	break;
	default:
	error_illegal_ident(); }
}

// LDDSR End
void Parser::parse_main_action_5607() {
	switch (g_args.cpu()) {
	case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xED98);
	break;
	default:
	error_illegal_ident(); }
}

// LDDX End
void Parser::parse_main_action_5608() {
	switch (g_args.cpu()) {
	case CPU_Z80N: 
	add_opcode(0xEDAC);
	break;
	default:
	error_illegal_ident(); }
}

// LDF A Comma expr End
void Parser::parse_main_action_5609() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_nnn(0x9A, 0);
	break;
	case CPU_KC160: case CPU_KC160_Z80: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_nnn(0xED3B, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LDF AHL Comma expr End
void Parser::parse_main_action_5610() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_nnn(0xED2B, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LDF BC Comma expr End
void Parser::parse_main_action_5611() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_nnn(0xED0A, 0);
	break;
	case CPU_KC160: case CPU_KC160_Z80: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_nnn(0xED8F, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LDF BCDE Comma expr End
void Parser::parse_main_action_5612() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_nnn(0xDD0A, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LDF DE Comma expr End
void Parser::parse_main_action_5613() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_nnn(0xED1A, 0);
	break;
	case CPU_KC160: case CPU_KC160_Z80: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_nnn(0xED9F, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LDF HL Comma expr End
void Parser::parse_main_action_5614() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_nnn(0x92, 0);
	break;
	case CPU_KC160: case CPU_KC160_Z80: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_nnn(0xEDAF, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LDF IX Comma expr End
void Parser::parse_main_action_5615() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_nnn(0xED2A, 0);
	break;
	case CPU_KC160: case CPU_KC160_Z80: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_nnn(0xED8B, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LDF IY Comma expr End
void Parser::parse_main_action_5616() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_nnn(0xED3A, 0);
	break;
	case CPU_KC160: case CPU_KC160_Z80: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_nnn(0xED9B, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LDF JKHL Comma expr End
void Parser::parse_main_action_5617() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_nnn(0xFD0A, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LDF PW Comma expr End
void Parser::parse_main_action_5618() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_nnn(0xED08, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LDF PX Comma expr End
void Parser::parse_main_action_5619() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_nnn(0xED18, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LDF PY Comma expr End
void Parser::parse_main_action_5620() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_nnn(0xED28, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LDF PZ Comma expr End
void Parser::parse_main_action_5621() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_nnn(0xED38, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LDF SP Comma expr End
void Parser::parse_main_action_5622() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_nnn(0xEDBF, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LDF XIX Comma expr End
void Parser::parse_main_action_5623() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_nnn(0xED0B, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LDF YIY Comma expr End
void Parser::parse_main_action_5624() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_nnn(0xED1B, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LDF expr Comma A End
void Parser::parse_main_action_5625() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_nnn(0x8A, 0);
	break;
	case CPU_KC160: case CPU_KC160_Z80: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_nnn(0xED33, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LDF expr Comma AHL End
void Parser::parse_main_action_5626() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_nnn(0xED23, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LDF expr Comma BC End
void Parser::parse_main_action_5627() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_nnn(0xED0B, 0);
	break;
	case CPU_KC160: case CPU_KC160_Z80: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_nnn(0xED87, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LDF expr Comma BCDE End
void Parser::parse_main_action_5628() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_nnn(0xDD0B, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LDF expr Comma DE End
void Parser::parse_main_action_5629() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_nnn(0xED1B, 0);
	break;
	case CPU_KC160: case CPU_KC160_Z80: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_nnn(0xED97, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LDF expr Comma HL End
void Parser::parse_main_action_5630() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_nnn(0x82, 0);
	break;
	case CPU_KC160: case CPU_KC160_Z80: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_nnn(0xEDA7, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LDF expr Comma IX End
void Parser::parse_main_action_5631() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_nnn(0xED2B, 0);
	break;
	case CPU_KC160: case CPU_KC160_Z80: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_nnn(0xED83, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LDF expr Comma IY End
void Parser::parse_main_action_5632() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_nnn(0xED3B, 0);
	break;
	case CPU_KC160: case CPU_KC160_Z80: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_nnn(0xED93, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LDF expr Comma JKHL End
void Parser::parse_main_action_5633() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_nnn(0xFD0B, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LDF expr Comma PW End
void Parser::parse_main_action_5634() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_nnn(0xED09, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LDF expr Comma PX End
void Parser::parse_main_action_5635() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_nnn(0xED19, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LDF expr Comma PY End
void Parser::parse_main_action_5636() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_nnn(0xED29, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LDF expr Comma PZ End
void Parser::parse_main_action_5637() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_nnn(0xED39, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LDF expr Comma SP End
void Parser::parse_main_action_5638() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_nnn(0xEDB7, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LDF expr Comma XIX End
void Parser::parse_main_action_5639() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_nnn(0xED03, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LDF expr Comma YIY End
void Parser::parse_main_action_5640() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_nnn(0xED13, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LDH A Comma expr End
void Parser::parse_main_action_5641() {
	switch (g_args.cpu()) {
	case CPU_GBZ80: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_h(0xF0);
	break;
	default:
	error_illegal_ident(); }
}

// LDH expr Comma A End
void Parser::parse_main_action_5642() {
	switch (g_args.cpu()) {
	case CPU_GBZ80: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_h(0xE0);
	break;
	default:
	error_illegal_ident(); }
}

// LDHL SP Comma expr End
void Parser::parse_main_action_5643() {
	switch (g_args.cpu()) {
	case CPU_GBZ80: 
	warn_if_expr_in_parens();
	add_opcode_s(0xF8);
	break;
	default:
	error_illegal_ident(); }
}

// LDI XY End
void Parser::parse_main_action_5644() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xEDE0);
	break;
	default:
	error_illegal_ident(); }
}

// LDI Dot L End | LDI Dot LIS End
void Parser::parse_main_action_5645() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xEDA0);
	break;
	default:
	error_illegal_ident(); }
}

// LDI Dot S End | LDI Dot SIL End
void Parser::parse_main_action_5646() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xEDA0);
	break;
	default:
	error_illegal_ident(); }
}

// LDI End
void Parser::parse_main_action_5647() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_GBZ80: 
	add_call_function("__z80asm__ldi");
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xEDA0);
	break;
	default:
	error_illegal_ident(); }
}

// LDIR XY End
void Parser::parse_main_action_5648() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xEDF0);
	break;
	default:
	error_illegal_ident(); }
}

// LDIR Dot L End | LDIR Dot LIS End
void Parser::parse_main_action_5649() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xEDB0);
	break;
	default:
	error_illegal_ident(); }
}

// LDIR Dot S End | LDIR Dot SIL End
void Parser::parse_main_action_5650() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xEDB0);
	break;
	default:
	error_illegal_ident(); }
}

// LDIR End
void Parser::parse_main_action_5651() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_GBZ80: 
	add_call_function("__z80asm__ldir");
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xEDB0);
	break;
	default:
	error_illegal_ident(); }
}

// LDIRX End | LIRX End
void Parser::parse_main_action_5652() {
	switch (g_args.cpu()) {
	case CPU_Z80N: 
	add_opcode(0xEDB4);
	break;
	default:
	error_illegal_ident(); }
}

// LDISR End
void Parser::parse_main_action_5653() {
	switch (g_args.cpu()) {
	case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xED90);
	break;
	default:
	error_illegal_ident(); }
}

// LDIX End
void Parser::parse_main_action_5654() {
	switch (g_args.cpu()) {
	case CPU_Z80N: 
	add_opcode(0xEDA4);
	break;
	default:
	error_illegal_ident(); }
}

// LDL PW Comma DE End
void Parser::parse_main_action_5655() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDD8F);
	break;
	default:
	error_illegal_ident(); }
}

// LDL PW Comma HL End
void Parser::parse_main_action_5656() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFD8F);
	break;
	default:
	error_illegal_ident(); }
}

// LDL PW Comma IX End
void Parser::parse_main_action_5657() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDD8C);
	break;
	default:
	error_illegal_ident(); }
}

// LDL PW Comma IY End
void Parser::parse_main_action_5658() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFD8C);
	break;
	default:
	error_illegal_ident(); }
}

// LDL PW Comma LParen SP RParen End
void Parser::parse_main_action_5659() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xED0300);
	break;
	default:
	error_illegal_ident(); }
}

// LDL PW Comma LParen SP expr RParen End
void Parser::parse_main_action_5660() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_n(0xED03);
	break;
	default:
	error_illegal_ident(); }
}

// LDL PW Comma expr End
void Parser::parse_main_action_5661() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode_nn(0xED0D, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LDL PX Comma DE End
void Parser::parse_main_action_5662() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDD9F);
	break;
	default:
	error_illegal_ident(); }
}

// LDL PX Comma HL End
void Parser::parse_main_action_5663() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFD9F);
	break;
	default:
	error_illegal_ident(); }
}

// LDL PX Comma IX End
void Parser::parse_main_action_5664() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDD9C);
	break;
	default:
	error_illegal_ident(); }
}

// LDL PX Comma IY End
void Parser::parse_main_action_5665() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFD9C);
	break;
	default:
	error_illegal_ident(); }
}

// LDL PX Comma LParen SP RParen End
void Parser::parse_main_action_5666() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xED1300);
	break;
	default:
	error_illegal_ident(); }
}

// LDL PX Comma LParen SP expr RParen End
void Parser::parse_main_action_5667() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_n(0xED13);
	break;
	default:
	error_illegal_ident(); }
}

// LDL PX Comma expr End
void Parser::parse_main_action_5668() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode_nn(0xED1D, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LDL PY Comma DE End
void Parser::parse_main_action_5669() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDDAF);
	break;
	default:
	error_illegal_ident(); }
}

// LDL PY Comma HL End
void Parser::parse_main_action_5670() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFDAF);
	break;
	default:
	error_illegal_ident(); }
}

// LDL PY Comma IX End
void Parser::parse_main_action_5671() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDDAC);
	break;
	default:
	error_illegal_ident(); }
}

// LDL PY Comma IY End
void Parser::parse_main_action_5672() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFDAC);
	break;
	default:
	error_illegal_ident(); }
}

// LDL PY Comma LParen SP RParen End
void Parser::parse_main_action_5673() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xED2300);
	break;
	default:
	error_illegal_ident(); }
}

// LDL PY Comma LParen SP expr RParen End
void Parser::parse_main_action_5674() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_n(0xED23);
	break;
	default:
	error_illegal_ident(); }
}

// LDL PY Comma expr End
void Parser::parse_main_action_5675() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode_nn(0xED2D, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LDL PZ Comma DE End
void Parser::parse_main_action_5676() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDDBF);
	break;
	default:
	error_illegal_ident(); }
}

// LDL PZ Comma HL End
void Parser::parse_main_action_5677() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFDBF);
	break;
	default:
	error_illegal_ident(); }
}

// LDL PZ Comma IX End
void Parser::parse_main_action_5678() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDDBC);
	break;
	default:
	error_illegal_ident(); }
}

// LDL PZ Comma IY End
void Parser::parse_main_action_5679() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFDBC);
	break;
	default:
	error_illegal_ident(); }
}

// LDL PZ Comma LParen SP RParen End
void Parser::parse_main_action_5680() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xED3300);
	break;
	default:
	error_illegal_ident(); }
}

// LDL PZ Comma LParen SP expr RParen End
void Parser::parse_main_action_5681() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode_n(0xED33);
	break;
	default:
	error_illegal_ident(); }
}

// LDL PZ Comma expr End
void Parser::parse_main_action_5682() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode_nn(0xED3D, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LDP HL Comma LParen HL RParen End
void Parser::parse_main_action_5683() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xED6C);
	break;
	default:
	error_illegal_ident(); }
}

// LDP HL Comma LParen IX RParen End
void Parser::parse_main_action_5684() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDD6C);
	break;
	default:
	error_illegal_ident(); }
}

// LDP HL Comma LParen IY RParen End
void Parser::parse_main_action_5685() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFD6C);
	break;
	default:
	error_illegal_ident(); }
}

// LDP HL Comma expr End
void Parser::parse_main_action_5686() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_nn(0xED6D, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LDP IX Comma expr End
void Parser::parse_main_action_5687() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_nn(0xDD6D, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LDP IY Comma expr End
void Parser::parse_main_action_5688() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_nn(0xFD6D, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LDP LParen HL RParen Comma HL End
void Parser::parse_main_action_5689() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xED64);
	break;
	default:
	error_illegal_ident(); }
}

// LDP LParen IX RParen Comma HL End
void Parser::parse_main_action_5690() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDD64);
	break;
	default:
	error_illegal_ident(); }
}

// LDP LParen IY RParen Comma HL End
void Parser::parse_main_action_5691() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFD64);
	break;
	default:
	error_illegal_ident(); }
}

// LDP expr Comma HL End
void Parser::parse_main_action_5692() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_nn(0xED65, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LDP expr Comma IX End
void Parser::parse_main_action_5693() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_nn(0xDD65, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LDP expr Comma IY End
void Parser::parse_main_action_5694() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_nn(0xFD65, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LDPIRX End | LPRX End
void Parser::parse_main_action_5695() {
	switch (g_args.cpu()) {
	case CPU_Z80N: 
	add_opcode(0xEDB7);
	break;
	default:
	error_illegal_ident(); }
}

// LDWS End
void Parser::parse_main_action_5696() {
	switch (g_args.cpu()) {
	case CPU_Z80N: 
	add_opcode(0xEDA5);
	break;
	default:
	error_illegal_ident(); }
}

// LEA BC Comma IX End
void Parser::parse_main_action_5697() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xED0200);
	break;
	default:
	error_illegal_ident(); }
}

// LEA BC Comma IX expr End
void Parser::parse_main_action_5698() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode_idx(0xED02);
	break;
	default:
	error_illegal_ident(); }
}

// LEA BC Comma IY End
void Parser::parse_main_action_5699() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xED0300);
	break;
	default:
	error_illegal_ident(); }
}

// LEA BC Comma IY expr End
void Parser::parse_main_action_5700() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode_idx(0xED03);
	break;
	default:
	error_illegal_ident(); }
}

// LEA DE Comma IX End
void Parser::parse_main_action_5701() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xED1200);
	break;
	default:
	error_illegal_ident(); }
}

// LEA DE Comma IX expr End
void Parser::parse_main_action_5702() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode_idx(0xED12);
	break;
	default:
	error_illegal_ident(); }
}

// LEA DE Comma IY End
void Parser::parse_main_action_5703() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xED1300);
	break;
	default:
	error_illegal_ident(); }
}

// LEA DE Comma IY expr End
void Parser::parse_main_action_5704() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode_idx(0xED13);
	break;
	default:
	error_illegal_ident(); }
}

// LEA HL Comma IX End
void Parser::parse_main_action_5705() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xED2200);
	break;
	default:
	error_illegal_ident(); }
}

// LEA HL Comma IX expr End
void Parser::parse_main_action_5706() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode_idx(0xED22);
	break;
	default:
	error_illegal_ident(); }
}

// LEA HL Comma IY End
void Parser::parse_main_action_5707() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xED2300);
	break;
	default:
	error_illegal_ident(); }
}

// LEA HL Comma IY expr End
void Parser::parse_main_action_5708() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode_idx(0xED23);
	break;
	default:
	error_illegal_ident(); }
}

// LEA IX Comma IX End
void Parser::parse_main_action_5709() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xED3200);
	break;
	default:
	error_illegal_ident(); }
}

// LEA IX Comma IX expr End
void Parser::parse_main_action_5710() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode_idx(0xED32);
	break;
	default:
	error_illegal_ident(); }
}

// LEA IX Comma IY End
void Parser::parse_main_action_5711() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xED5400);
	break;
	default:
	error_illegal_ident(); }
}

// LEA IX Comma IY expr End
void Parser::parse_main_action_5712() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode_idx(0xED54);
	break;
	default:
	error_illegal_ident(); }
}

// LEA IY Comma IX End
void Parser::parse_main_action_5713() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xED5500);
	break;
	default:
	error_illegal_ident(); }
}

// LEA IY Comma IX expr End
void Parser::parse_main_action_5714() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode_idx(0xED55);
	break;
	default:
	error_illegal_ident(); }
}

// LEA IY Comma IY End
void Parser::parse_main_action_5715() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xED3300);
	break;
	default:
	error_illegal_ident(); }
}

// LEA IY Comma IY expr End
void Parser::parse_main_action_5716() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode_idx(0xED33);
	break;
	default:
	error_illegal_ident(); }
}

// LEA Dot L BC Comma IX End | LEA Dot LIS BC Comma IX End
void Parser::parse_main_action_5717() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xED0200);
	break;
	default:
	error_illegal_ident(); }
}

// LEA Dot L BC Comma IX expr End | LEA Dot LIS BC Comma IX expr End
void Parser::parse_main_action_5718() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xED02);
	break;
	default:
	error_illegal_ident(); }
}

// LEA Dot L BC Comma IY End | LEA Dot LIS BC Comma IY End
void Parser::parse_main_action_5719() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xED0300);
	break;
	default:
	error_illegal_ident(); }
}

// LEA Dot L BC Comma IY expr End | LEA Dot LIS BC Comma IY expr End
void Parser::parse_main_action_5720() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xED03);
	break;
	default:
	error_illegal_ident(); }
}

// LEA Dot L DE Comma IX End | LEA Dot LIS DE Comma IX End
void Parser::parse_main_action_5721() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xED1200);
	break;
	default:
	error_illegal_ident(); }
}

// LEA Dot L DE Comma IX expr End | LEA Dot LIS DE Comma IX expr End
void Parser::parse_main_action_5722() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xED12);
	break;
	default:
	error_illegal_ident(); }
}

// LEA Dot L DE Comma IY End | LEA Dot LIS DE Comma IY End
void Parser::parse_main_action_5723() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xED1300);
	break;
	default:
	error_illegal_ident(); }
}

// LEA Dot L DE Comma IY expr End | LEA Dot LIS DE Comma IY expr End
void Parser::parse_main_action_5724() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xED13);
	break;
	default:
	error_illegal_ident(); }
}

// LEA Dot L HL Comma IX End | LEA Dot LIS HL Comma IX End
void Parser::parse_main_action_5725() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xED2200);
	break;
	default:
	error_illegal_ident(); }
}

// LEA Dot L HL Comma IX expr End | LEA Dot LIS HL Comma IX expr End
void Parser::parse_main_action_5726() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xED22);
	break;
	default:
	error_illegal_ident(); }
}

// LEA Dot L HL Comma IY End | LEA Dot LIS HL Comma IY End
void Parser::parse_main_action_5727() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xED2300);
	break;
	default:
	error_illegal_ident(); }
}

// LEA Dot L HL Comma IY expr End | LEA Dot LIS HL Comma IY expr End
void Parser::parse_main_action_5728() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xED23);
	break;
	default:
	error_illegal_ident(); }
}

// LEA Dot L IX Comma IX End | LEA Dot LIS IX Comma IX End
void Parser::parse_main_action_5729() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xED3200);
	break;
	default:
	error_illegal_ident(); }
}

// LEA Dot L IX Comma IX expr End | LEA Dot LIS IX Comma IX expr End
void Parser::parse_main_action_5730() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xED32);
	break;
	default:
	error_illegal_ident(); }
}

// LEA Dot L IX Comma IY End | LEA Dot LIS IX Comma IY End
void Parser::parse_main_action_5731() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xED5400);
	break;
	default:
	error_illegal_ident(); }
}

// LEA Dot L IX Comma IY expr End | LEA Dot LIS IX Comma IY expr End
void Parser::parse_main_action_5732() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xED54);
	break;
	default:
	error_illegal_ident(); }
}

// LEA Dot L IY Comma IX End | LEA Dot LIS IY Comma IX End
void Parser::parse_main_action_5733() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xED5500);
	break;
	default:
	error_illegal_ident(); }
}

// LEA Dot L IY Comma IX expr End | LEA Dot LIS IY Comma IX expr End
void Parser::parse_main_action_5734() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xED55);
	break;
	default:
	error_illegal_ident(); }
}

// LEA Dot L IY Comma IY End | LEA Dot LIS IY Comma IY End
void Parser::parse_main_action_5735() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xED3300);
	break;
	default:
	error_illegal_ident(); }
}

// LEA Dot L IY Comma IY expr End | LEA Dot LIS IY Comma IY expr End
void Parser::parse_main_action_5736() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xED33);
	break;
	default:
	error_illegal_ident(); }
}

// LEA Dot S BC Comma IX End | LEA Dot SIL BC Comma IX End
void Parser::parse_main_action_5737() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xED0200);
	break;
	default:
	error_illegal_ident(); }
}

// LEA Dot S BC Comma IX expr End | LEA Dot SIL BC Comma IX expr End
void Parser::parse_main_action_5738() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xED02);
	break;
	default:
	error_illegal_ident(); }
}

// LEA Dot S BC Comma IY End | LEA Dot SIL BC Comma IY End
void Parser::parse_main_action_5739() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xED0300);
	break;
	default:
	error_illegal_ident(); }
}

// LEA Dot S BC Comma IY expr End | LEA Dot SIL BC Comma IY expr End
void Parser::parse_main_action_5740() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xED03);
	break;
	default:
	error_illegal_ident(); }
}

// LEA Dot S DE Comma IX End | LEA Dot SIL DE Comma IX End
void Parser::parse_main_action_5741() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xED1200);
	break;
	default:
	error_illegal_ident(); }
}

// LEA Dot S DE Comma IX expr End | LEA Dot SIL DE Comma IX expr End
void Parser::parse_main_action_5742() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xED12);
	break;
	default:
	error_illegal_ident(); }
}

// LEA Dot S DE Comma IY End | LEA Dot SIL DE Comma IY End
void Parser::parse_main_action_5743() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xED1300);
	break;
	default:
	error_illegal_ident(); }
}

// LEA Dot S DE Comma IY expr End | LEA Dot SIL DE Comma IY expr End
void Parser::parse_main_action_5744() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xED13);
	break;
	default:
	error_illegal_ident(); }
}

// LEA Dot S HL Comma IX End | LEA Dot SIL HL Comma IX End
void Parser::parse_main_action_5745() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xED2200);
	break;
	default:
	error_illegal_ident(); }
}

// LEA Dot S HL Comma IX expr End | LEA Dot SIL HL Comma IX expr End
void Parser::parse_main_action_5746() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xED22);
	break;
	default:
	error_illegal_ident(); }
}

// LEA Dot S HL Comma IY End | LEA Dot SIL HL Comma IY End
void Parser::parse_main_action_5747() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xED2300);
	break;
	default:
	error_illegal_ident(); }
}

// LEA Dot S HL Comma IY expr End | LEA Dot SIL HL Comma IY expr End
void Parser::parse_main_action_5748() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xED23);
	break;
	default:
	error_illegal_ident(); }
}

// LEA Dot S IX Comma IX End | LEA Dot SIL IX Comma IX End
void Parser::parse_main_action_5749() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xED3200);
	break;
	default:
	error_illegal_ident(); }
}

// LEA Dot S IX Comma IX expr End | LEA Dot SIL IX Comma IX expr End
void Parser::parse_main_action_5750() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xED32);
	break;
	default:
	error_illegal_ident(); }
}

// LEA Dot S IX Comma IY End | LEA Dot SIL IX Comma IY End
void Parser::parse_main_action_5751() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xED5400);
	break;
	default:
	error_illegal_ident(); }
}

// LEA Dot S IX Comma IY expr End | LEA Dot SIL IX Comma IY expr End
void Parser::parse_main_action_5752() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xED54);
	break;
	default:
	error_illegal_ident(); }
}

// LEA Dot S IY Comma IX End | LEA Dot SIL IY Comma IX End
void Parser::parse_main_action_5753() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xED5500);
	break;
	default:
	error_illegal_ident(); }
}

// LEA Dot S IY Comma IX expr End | LEA Dot SIL IY Comma IX expr End
void Parser::parse_main_action_5754() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xED55);
	break;
	default:
	error_illegal_ident(); }
}

// LEA Dot S IY Comma IY End | LEA Dot SIL IY Comma IY End
void Parser::parse_main_action_5755() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xED3300);
	break;
	default:
	error_illegal_ident(); }
}

// LEA Dot S IY Comma IY expr End | LEA Dot SIL IY Comma IY expr End
void Parser::parse_main_action_5756() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xED33);
	break;
	default:
	error_illegal_ident(); }
}

// LHLD expr End
void Parser::parse_main_action_5757() {
	switch (g_args.cpu()) {
	case CPU_GBZ80: 
	warn_if_expr_in_parens();
	add_opcode(0xD5);
	add_opcode_nn(0x21, 0);
	add_opcode(0x5E);
	add_opcode(0x23);
	add_opcode(0x56);
	add_opcode(0x62);
	add_opcode(0x6B);
	add_opcode(0xD1);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_opcode_nn(0x2A, 0);
	break;
	default:
	error_illegal_ident(); }
}

// LSDDR End
void Parser::parse_main_action_5758() {
	switch (g_args.cpu()) {
	case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xEDD8);
	break;
	default:
	error_illegal_ident(); }
}

// LSDR End
void Parser::parse_main_action_5759() {
	switch (g_args.cpu()) {
	case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xEDF8);
	break;
	default:
	error_illegal_ident(); }
}

// LSIDR End
void Parser::parse_main_action_5760() {
	switch (g_args.cpu()) {
	case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xEDD0);
	break;
	default:
	error_illegal_ident(); }
}

// LSIR End
void Parser::parse_main_action_5761() {
	switch (g_args.cpu()) {
	case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xEDF0);
	break;
	default:
	error_illegal_ident(); }
}

// LXI B Comma expr End | LXI BC Comma expr End
void Parser::parse_main_action_5762() {
	warn_if_expr_in_parens();
	add_opcode_nn(0x01, 0);
}

// LXI D Comma expr End | LXI DE Comma expr End
void Parser::parse_main_action_5763() {
	warn_if_expr_in_parens();
	add_opcode_nn(0x11, 0);
}

// LXI H Comma expr End | LXI HL Comma expr End
void Parser::parse_main_action_5764() {
	warn_if_expr_in_parens();
	add_opcode_nn(0x21, 0);
}

// LXI SP Comma expr End
void Parser::parse_main_action_5765() {
	warn_if_expr_in_parens();
	add_opcode_nn(0x31, 0);
}

// MIRR A End | MIRROR A End
void Parser::parse_main_action_5766() {
	switch (g_args.cpu()) {
	case CPU_Z80N: 
	add_opcode(0xED24);
	break;
	default:
	error_illegal_ident(); }
}

// MLT BC End
void Parser::parse_main_action_5767() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
	add_opcode(0xED4C);
	break;
	default:
	error_illegal_ident(); }
}

// MLT DE End
void Parser::parse_main_action_5768() {
	switch (g_args.cpu()) {
	case CPU_Z80N: 
	add_opcode(0xED30);
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
	add_opcode(0xED5C);
	break;
	default:
	error_illegal_ident(); }
}

// MLT HL End
void Parser::parse_main_action_5769() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
	add_opcode(0xED6C);
	break;
	default:
	error_illegal_ident(); }
}

// MLT SP End
void Parser::parse_main_action_5770() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
	add_opcode(0xED7C);
	break;
	default:
	error_illegal_ident(); }
}

// MLT Dot L SP End | MLT Dot LIS SP End
void Parser::parse_main_action_5771() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xED7C);
	break;
	default:
	error_illegal_ident(); }
}

// MLT Dot S SP End | MLT Dot SIL SP End
void Parser::parse_main_action_5772() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xED7C);
	break;
	default:
	error_illegal_ident(); }
}

// MMU const_expr Comma A End
void Parser::parse_main_action_5773() {
	switch (g_args.cpu()) {
	case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_z80n_mmu_a();
	break;
	default:
	error_illegal_ident(); }
}

// MMU const_expr Comma expr End
void Parser::parse_main_action_5774() {
	switch (g_args.cpu()) {
	case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_z80n_mmu_n();
	break;
	default:
	error_illegal_ident(); }
}

// MMU0 A End
void Parser::parse_main_action_5775() {
	switch (g_args.cpu()) {
	case CPU_Z80N: 
	add_opcode(0xED9250);
	break;
	default:
	error_illegal_ident(); }
}

// MMU0 expr End
void Parser::parse_main_action_5776() {
	switch (g_args.cpu()) {
	case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_opcode_n(0xED9150);
	break;
	default:
	error_illegal_ident(); }
}

// MMU1 A End
void Parser::parse_main_action_5777() {
	switch (g_args.cpu()) {
	case CPU_Z80N: 
	add_opcode(0xED9251);
	break;
	default:
	error_illegal_ident(); }
}

// MMU1 expr End
void Parser::parse_main_action_5778() {
	switch (g_args.cpu()) {
	case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_opcode_n(0xED9151);
	break;
	default:
	error_illegal_ident(); }
}

// MMU2 A End
void Parser::parse_main_action_5779() {
	switch (g_args.cpu()) {
	case CPU_Z80N: 
	add_opcode(0xED9252);
	break;
	default:
	error_illegal_ident(); }
}

// MMU2 expr End
void Parser::parse_main_action_5780() {
	switch (g_args.cpu()) {
	case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_opcode_n(0xED9152);
	break;
	default:
	error_illegal_ident(); }
}

// MMU3 A End
void Parser::parse_main_action_5781() {
	switch (g_args.cpu()) {
	case CPU_Z80N: 
	add_opcode(0xED9253);
	break;
	default:
	error_illegal_ident(); }
}

// MMU3 expr End
void Parser::parse_main_action_5782() {
	switch (g_args.cpu()) {
	case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_opcode_n(0xED9153);
	break;
	default:
	error_illegal_ident(); }
}

// MMU4 A End
void Parser::parse_main_action_5783() {
	switch (g_args.cpu()) {
	case CPU_Z80N: 
	add_opcode(0xED9254);
	break;
	default:
	error_illegal_ident(); }
}

// MMU4 expr End
void Parser::parse_main_action_5784() {
	switch (g_args.cpu()) {
	case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_opcode_n(0xED9154);
	break;
	default:
	error_illegal_ident(); }
}

// MMU5 A End
void Parser::parse_main_action_5785() {
	switch (g_args.cpu()) {
	case CPU_Z80N: 
	add_opcode(0xED9255);
	break;
	default:
	error_illegal_ident(); }
}

// MMU5 expr End
void Parser::parse_main_action_5786() {
	switch (g_args.cpu()) {
	case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_opcode_n(0xED9155);
	break;
	default:
	error_illegal_ident(); }
}

// MMU6 A End
void Parser::parse_main_action_5787() {
	switch (g_args.cpu()) {
	case CPU_Z80N: 
	add_opcode(0xED9256);
	break;
	default:
	error_illegal_ident(); }
}

// MMU6 expr End
void Parser::parse_main_action_5788() {
	switch (g_args.cpu()) {
	case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_opcode_n(0xED9156);
	break;
	default:
	error_illegal_ident(); }
}

// MMU7 A End
void Parser::parse_main_action_5789() {
	switch (g_args.cpu()) {
	case CPU_Z80N: 
	add_opcode(0xED9257);
	break;
	default:
	error_illegal_ident(); }
}

// MMU7 expr End
void Parser::parse_main_action_5790() {
	switch (g_args.cpu()) {
	case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_opcode_n(0xED9157);
	break;
	default:
	error_illegal_ident(); }
}

// MUL D Comma E End | MUL DE End
void Parser::parse_main_action_5791() {
	switch (g_args.cpu()) {
	case CPU_Z80N: 
	add_opcode(0xED30);
	break;
	default:
	error_illegal_ident(); }
}

// MUL DE Comma HL End
void Parser::parse_main_action_5792() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xED77);
	break;
	default:
	error_illegal_ident(); }
}

// MUL HL End
void Parser::parse_main_action_5793() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xED76);
	break;
	default:
	error_illegal_ident(); }
}

// MUL End
void Parser::parse_main_action_5794() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xF7);
	break;
	default:
	error_illegal_ident(); }
}

// MULS DE Comma HL End
void Parser::parse_main_action_5795() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xED7F);
	break;
	default:
	error_illegal_ident(); }
}

// MULS HL End
void Parser::parse_main_action_5796() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xED7E);
	break;
	default:
	error_illegal_ident(); }
}

// MULU End
void Parser::parse_main_action_5797() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xA7);
	break;
	default:
	error_illegal_ident(); }
}

// MULUB A Comma A End
void Parser::parse_main_action_5798() {
	switch (g_args.cpu()) {
	case CPU_R800: 
	add_opcode(0xEDF9);
	break;
	default:
	error_illegal_ident(); }
}

// MULUB A Comma B End
void Parser::parse_main_action_5799() {
	switch (g_args.cpu()) {
	case CPU_R800: 
	add_opcode(0xEDC1);
	break;
	default:
	error_illegal_ident(); }
}

// MULUB A Comma C End
void Parser::parse_main_action_5800() {
	switch (g_args.cpu()) {
	case CPU_R800: 
	add_opcode(0xEDC9);
	break;
	default:
	error_illegal_ident(); }
}

// MULUB A Comma D End
void Parser::parse_main_action_5801() {
	switch (g_args.cpu()) {
	case CPU_R800: 
	add_opcode(0xEDD1);
	break;
	default:
	error_illegal_ident(); }
}

// MULUB A Comma E End
void Parser::parse_main_action_5802() {
	switch (g_args.cpu()) {
	case CPU_R800: 
	add_opcode(0xEDD9);
	break;
	default:
	error_illegal_ident(); }
}

// MULUB A Comma H End
void Parser::parse_main_action_5803() {
	switch (g_args.cpu()) {
	case CPU_R800: 
	add_opcode(0xEDE1);
	break;
	default:
	error_illegal_ident(); }
}

// MULUB A Comma L End
void Parser::parse_main_action_5804() {
	switch (g_args.cpu()) {
	case CPU_R800: 
	add_opcode(0xEDE9);
	break;
	default:
	error_illegal_ident(); }
}

// MULUW HL Comma BC End
void Parser::parse_main_action_5805() {
	switch (g_args.cpu()) {
	case CPU_R800: 
	add_opcode(0xEDC3);
	break;
	default:
	error_illegal_ident(); }
}

// MULUW HL Comma DE End
void Parser::parse_main_action_5806() {
	switch (g_args.cpu()) {
	case CPU_R800: 
	add_opcode(0xEDD3);
	break;
	default:
	error_illegal_ident(); }
}

// MULUW HL Comma HL End
void Parser::parse_main_action_5807() {
	switch (g_args.cpu()) {
	case CPU_R800: 
	add_opcode(0xEDE3);
	break;
	default:
	error_illegal_ident(); }
}

// MULUW HL Comma SP End
void Parser::parse_main_action_5808() {
	switch (g_args.cpu()) {
	case CPU_R800: 
	add_opcode(0xEDF3);
	break;
	default:
	error_illegal_ident(); }
}

// MVI A Comma expr End
void Parser::parse_main_action_5809() {
	warn_if_expr_in_parens();
	add_opcode_n(0x3E);
}

// NEG A End | NEG End
void Parser::parse_main_action_5810() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_GBZ80: 
	add_opcode(0x2F3C);
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xED44);
	break;
	default:
	error_illegal_ident(); }
}

// NEG BCDE End
void Parser::parse_main_action_5811() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDD4D);
	break;
	default:
	error_illegal_ident(); }
}

// NEG HL End
void Parser::parse_main_action_5812() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x4D);
	break;
	default:
	error_illegal_ident(); }
}

// NEG JKHL End
void Parser::parse_main_action_5813() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFD4D);
	break;
	default:
	error_illegal_ident(); }
}

// NEXTREG expr Comma A End | NREG expr Comma A End
void Parser::parse_main_action_5814() {
	switch (g_args.cpu()) {
	case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_opcode_n(0xED92);
	break;
	default:
	error_illegal_ident(); }
}

// NEXTREG expr Comma expr End | NREG expr Comma expr End
void Parser::parse_main_action_5815() {
	switch (g_args.cpu()) {
	case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_opcode_n_n(0xED91);
	break;
	default:
	error_illegal_ident(); }
}

// NOP End
void Parser::parse_main_action_5816() {
	add_opcode(0x00);
}

// OR A Comma A End | OR A End | ORA A End
void Parser::parse_main_action_5817() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7FB7);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xB7);
	break;
	default:
	error_illegal_ident(); }
}

// OR A Comma B End | OR B End | ORA B End
void Parser::parse_main_action_5818() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7FB0);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xB0);
	break;
	default:
	error_illegal_ident(); }
}

// OR A Comma C End | OR C End | ORA C End
void Parser::parse_main_action_5819() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7FB1);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xB1);
	break;
	default:
	error_illegal_ident(); }
}

// OR A Comma D End | OR D End | ORA D End
void Parser::parse_main_action_5820() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7FB2);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xB2);
	break;
	default:
	error_illegal_ident(); }
}

// OR A Comma E End | OR E End | ORA E End
void Parser::parse_main_action_5821() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7FB3);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xB3);
	break;
	default:
	error_illegal_ident(); }
}

// OR A Comma H End | OR H End | ORA H End
void Parser::parse_main_action_5822() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7FB4);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xB4);
	break;
	default:
	error_illegal_ident(); }
}

// OR A Comma IXH End | OR IXH End
void Parser::parse_main_action_5823() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDDB4);
	break;
	default:
	error_illegal_ident(); }
}

// OR A Comma IXL End | OR IXL End
void Parser::parse_main_action_5824() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDDB5);
	break;
	default:
	error_illegal_ident(); }
}

// OR A Comma IYH End | OR IYH End
void Parser::parse_main_action_5825() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFDB4);
	break;
	default:
	error_illegal_ident(); }
}

// OR A Comma IYL End | OR IYL End
void Parser::parse_main_action_5826() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFDB5);
	break;
	default:
	error_illegal_ident(); }
}

// OR A Comma L End | OR L End | ORA L End
void Parser::parse_main_action_5827() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7FB5);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xB5);
	break;
	default:
	error_illegal_ident(); }
}

// OR A Comma LParen AHL RParen End | OR LParen AHL RParen End
void Parser::parse_main_action_5828() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xB6);
	break;
	default:
	error_illegal_ident(); }
}

// OR A Comma LParen AIX RParen End | OR LParen AIX RParen End
void Parser::parse_main_action_5829() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xDDB600);
	break;
	default:
	error_illegal_ident(); }
}

// OR A Comma LParen AIX expr RParen End | OR LParen AIX expr RParen End
void Parser::parse_main_action_5830() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xDDB6);
	break;
	default:
	error_illegal_ident(); }
}

// OR A Comma LParen AIY RParen End | OR LParen AIY RParen End
void Parser::parse_main_action_5831() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xFDB600);
	break;
	default:
	error_illegal_ident(); }
}

// OR A Comma LParen AIY expr RParen End | OR LParen AIY expr RParen End
void Parser::parse_main_action_5832() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xFDB6);
	break;
	default:
	error_illegal_ident(); }
}

// OR A Comma LParen HL Minus RParen End | OR LParen HL Minus RParen End
void Parser::parse_main_action_5833() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7FB6);
	add_opcode(0x2B);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xB6);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// OR A Comma LParen HL Plus RParen End | OR LParen HL Plus RParen End
void Parser::parse_main_action_5834() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7FB6);
	add_opcode(0x23);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xB6);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// OR A Comma LParen HL RParen End | OR LParen HL RParen End | ORA M End
void Parser::parse_main_action_5835() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7FB6);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xB6);
	break;
	default:
	error_illegal_ident(); }
}

// OR A Comma LParen IX RParen End | OR LParen IX RParen End
void Parser::parse_main_action_5836() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xDDB600);
	break;
	default:
	error_illegal_ident(); }
}

// OR A Comma LParen IX expr RParen End | OR LParen IX expr RParen End
void Parser::parse_main_action_5837() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx(0xDDB6);
	break;
	default:
	error_illegal_ident(); }
}

// OR A Comma LParen IY RParen End | OR LParen IY RParen End
void Parser::parse_main_action_5838() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xFDB600);
	break;
	default:
	error_illegal_ident(); }
}

// OR A Comma LParen IY expr RParen End | OR LParen IY expr RParen End
void Parser::parse_main_action_5839() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx(0xFDB6);
	break;
	default:
	error_illegal_ident(); }
}

// OR A Comma LParen PHL RParen End | OR LParen PHL RParen End
void Parser::parse_main_action_5840() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xB6);
	break;
	default:
	error_illegal_ident(); }
}

// OR A Comma LParen PIX RParen End | OR LParen PIX RParen End
void Parser::parse_main_action_5841() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xDDB600);
	break;
	default:
	error_illegal_ident(); }
}

// OR A Comma LParen PIX expr RParen End | OR LParen PIX expr RParen End
void Parser::parse_main_action_5842() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xDDB6);
	break;
	default:
	error_illegal_ident(); }
}

// OR A Comma LParen PIY RParen End | OR LParen PIY RParen End
void Parser::parse_main_action_5843() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xFDB600);
	break;
	default:
	error_illegal_ident(); }
}

// OR A Comma LParen PIY expr RParen End | OR LParen PIY expr RParen End
void Parser::parse_main_action_5844() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xFDB6);
	break;
	default:
	error_illegal_ident(); }
}

// OR A Comma LParen XHL RParen End | OR LParen XHL RParen End
void Parser::parse_main_action_5845() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xB6);
	break;
	default:
	error_illegal_ident(); }
}

// OR A Comma LParen XIX RParen End | OR LParen XIX RParen End
void Parser::parse_main_action_5846() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xDDB600);
	break;
	default:
	error_illegal_ident(); }
}

// OR A Comma LParen XIX expr RParen End | OR LParen XIX expr RParen End
void Parser::parse_main_action_5847() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xDDB6);
	break;
	default:
	error_illegal_ident(); }
}

// OR A Comma LParen XIY RParen End | OR LParen XIY RParen End
void Parser::parse_main_action_5848() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xFDB600);
	break;
	default:
	error_illegal_ident(); }
}

// OR A Comma LParen XIY expr RParen End | OR LParen XIY expr RParen End
void Parser::parse_main_action_5849() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xFDB6);
	break;
	default:
	error_illegal_ident(); }
}

// OR A Comma LParen YHL RParen End | OR LParen YHL RParen End
void Parser::parse_main_action_5850() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xB6);
	break;
	default:
	error_illegal_ident(); }
}

// OR A Comma LParen YIX RParen End | OR LParen YIX RParen End
void Parser::parse_main_action_5851() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xDDB600);
	break;
	default:
	error_illegal_ident(); }
}

// OR A Comma LParen YIX expr RParen End | OR LParen YIX expr RParen End
void Parser::parse_main_action_5852() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xDDB6);
	break;
	default:
	error_illegal_ident(); }
}

// OR A Comma LParen YIY RParen End | OR LParen YIY RParen End
void Parser::parse_main_action_5853() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xFDB600);
	break;
	default:
	error_illegal_ident(); }
}

// OR A Comma LParen YIY expr RParen End | OR LParen YIY expr RParen End
void Parser::parse_main_action_5854() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xFDB6);
	break;
	default:
	error_illegal_ident(); }
}

// OR A Comma LParen ZHL RParen End | OR LParen ZHL RParen End
void Parser::parse_main_action_5855() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xB6);
	break;
	default:
	error_illegal_ident(); }
}

// OR A Comma LParen ZIX RParen End | OR LParen ZIX RParen End
void Parser::parse_main_action_5856() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xDDB600);
	break;
	default:
	error_illegal_ident(); }
}

// OR A Comma LParen ZIX expr RParen End | OR LParen ZIX expr RParen End
void Parser::parse_main_action_5857() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xDDB6);
	break;
	default:
	error_illegal_ident(); }
}

// OR A Comma LParen ZIY RParen End | OR LParen ZIY RParen End
void Parser::parse_main_action_5858() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xFDB600);
	break;
	default:
	error_illegal_ident(); }
}

// OR A Comma LParen ZIY expr RParen End | OR LParen ZIY expr RParen End
void Parser::parse_main_action_5859() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xFDB6);
	break;
	default:
	error_illegal_ident(); }
}

// OR A Comma expr End | OR expr End | ORI expr End
void Parser::parse_main_action_5860() {
	warn_if_expr_in_parens();
	add_opcode_n(0xF6);
}

// OR HL Comma BC End
void Parser::parse_main_action_5861() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xF5);
	add_opcode(0x7C);
	add_opcode(0xB0);
	add_opcode(0x67);
	add_opcode(0x7D);
	add_opcode(0xB1);
	add_opcode(0x6F);
	add_opcode(0xF1);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xF5);
	add_opcode(0x7F7C);
	add_opcode(0x7FB0);
	add_opcode(0x7F67);
	add_opcode(0x7F7D);
	add_opcode(0x7FB1);
	add_opcode(0x7F6F);
	add_opcode(0xF1);
	break;
	default:
	error_illegal_ident(); }
}

// OR HL Comma DE End
void Parser::parse_main_action_5862() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xEC);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xF5);
	add_opcode(0x7C);
	add_opcode(0xB2);
	add_opcode(0x67);
	add_opcode(0x7D);
	add_opcode(0xB3);
	add_opcode(0x6F);
	add_opcode(0xF1);
	break;
	default:
	error_illegal_ident(); }
}

// OR IX Comma BC End
void Parser::parse_main_action_5863() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xF5);
	add_opcode(0xDD7C);
	add_opcode(0xB0);
	add_opcode(0xDD67);
	add_opcode(0xDD7D);
	add_opcode(0xB1);
	add_opcode(0xDD6F);
	add_opcode(0xF1);
	break;
	default:
	error_illegal_ident(); }
}

// OR IX Comma DE End
void Parser::parse_main_action_5864() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDDEC);
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xF5);
	add_opcode(0xDD7C);
	add_opcode(0xB2);
	add_opcode(0xDD67);
	add_opcode(0xDD7D);
	add_opcode(0xB3);
	add_opcode(0xDD6F);
	add_opcode(0xF1);
	break;
	default:
	error_illegal_ident(); }
}

// OR IY Comma BC End
void Parser::parse_main_action_5865() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xF5);
	add_opcode(0xFD7C);
	add_opcode(0xB0);
	add_opcode(0xFD67);
	add_opcode(0xFD7D);
	add_opcode(0xB1);
	add_opcode(0xFD6F);
	add_opcode(0xF1);
	break;
	default:
	error_illegal_ident(); }
}

// OR IY Comma DE End
void Parser::parse_main_action_5866() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xF5);
	add_opcode(0xFD7C);
	add_opcode(0xB2);
	add_opcode(0xFD67);
	add_opcode(0xFD7D);
	add_opcode(0xB3);
	add_opcode(0xFD6F);
	add_opcode(0xF1);
	break;
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFDEC);
	break;
	default:
	error_illegal_ident(); }
}

// OR JKHL Comma BCDE End
void Parser::parse_main_action_5867() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xEDF6);
	break;
	default:
	error_illegal_ident(); }
}

// OR Dot L A Comma LParen HL Minus RParen End | OR Dot L LParen HL Minus RParen End | OR Dot LIS A Comma LParen HL Minus RParen End | OR Dot LIS LParen HL Minus RParen End
void Parser::parse_main_action_5868() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xB6);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// OR Dot L A Comma LParen HL Plus RParen End | OR Dot L LParen HL Plus RParen End | OR Dot LIS A Comma LParen HL Plus RParen End | OR Dot LIS LParen HL Plus RParen End
void Parser::parse_main_action_5869() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xB6);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// OR Dot L A Comma LParen HL RParen End | OR Dot L LParen HL RParen End | OR Dot LIS A Comma LParen HL RParen End | OR Dot LIS LParen HL RParen End
void Parser::parse_main_action_5870() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xB6);
	break;
	default:
	error_illegal_ident(); }
}

// OR Dot L A Comma LParen IX RParen End | OR Dot L LParen IX RParen End | OR Dot LIS A Comma LParen IX RParen End | OR Dot LIS LParen IX RParen End
void Parser::parse_main_action_5871() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xDDB600);
	break;
	default:
	error_illegal_ident(); }
}

// OR Dot L A Comma LParen IX expr RParen End | OR Dot L LParen IX expr RParen End | OR Dot LIS A Comma LParen IX expr RParen End | OR Dot LIS LParen IX expr RParen End
void Parser::parse_main_action_5872() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xDDB6);
	break;
	default:
	error_illegal_ident(); }
}

// OR Dot L A Comma LParen IY RParen End | OR Dot L LParen IY RParen End | OR Dot LIS A Comma LParen IY RParen End | OR Dot LIS LParen IY RParen End
void Parser::parse_main_action_5873() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xFDB600);
	break;
	default:
	error_illegal_ident(); }
}

// OR Dot L A Comma LParen IY expr RParen End | OR Dot L LParen IY expr RParen End | OR Dot LIS A Comma LParen IY expr RParen End | OR Dot LIS LParen IY expr RParen End
void Parser::parse_main_action_5874() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xFDB6);
	break;
	default:
	error_illegal_ident(); }
}

// OR Dot S A Comma LParen HL Minus RParen End | OR Dot S LParen HL Minus RParen End | OR Dot SIL A Comma LParen HL Minus RParen End | OR Dot SIL LParen HL Minus RParen End
void Parser::parse_main_action_5875() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xB6);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// OR Dot S A Comma LParen HL Plus RParen End | OR Dot S LParen HL Plus RParen End | OR Dot SIL A Comma LParen HL Plus RParen End | OR Dot SIL LParen HL Plus RParen End
void Parser::parse_main_action_5876() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xB6);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// OR Dot S A Comma LParen HL RParen End | OR Dot S LParen HL RParen End | OR Dot SIL A Comma LParen HL RParen End | OR Dot SIL LParen HL RParen End
void Parser::parse_main_action_5877() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xB6);
	break;
	default:
	error_illegal_ident(); }
}

// OR Dot S A Comma LParen IX RParen End | OR Dot S LParen IX RParen End | OR Dot SIL A Comma LParen IX RParen End | OR Dot SIL LParen IX RParen End
void Parser::parse_main_action_5878() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xDDB600);
	break;
	default:
	error_illegal_ident(); }
}

// OR Dot S A Comma LParen IX expr RParen End | OR Dot S LParen IX expr RParen End | OR Dot SIL A Comma LParen IX expr RParen End | OR Dot SIL LParen IX expr RParen End
void Parser::parse_main_action_5879() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xDDB6);
	break;
	default:
	error_illegal_ident(); }
}

// OR Dot S A Comma LParen IY RParen End | OR Dot S LParen IY RParen End | OR Dot SIL A Comma LParen IY RParen End | OR Dot SIL LParen IY RParen End
void Parser::parse_main_action_5880() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xFDB600);
	break;
	default:
	error_illegal_ident(); }
}

// OR Dot S A Comma LParen IY expr RParen End | OR Dot S LParen IY expr RParen End | OR Dot SIL A Comma LParen IY expr RParen End | OR Dot SIL LParen IY expr RParen End
void Parser::parse_main_action_5881() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xFDB6);
	break;
	default:
	error_illegal_ident(); }
}

// ORG const_expr End
void Parser::parse_main_action_5882() {
	/*set_origin(expr);*/
	while (!m_line.at_end()) m_line.next();
}

// OTD2R Dot L End | OTD2R Dot LIS End
void Parser::parse_main_action_5883() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xEDBC);
	break;
	default:
	error_illegal_ident(); }
}

// OTD2R Dot S End | OTD2R Dot SIL End
void Parser::parse_main_action_5884() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xEDBC);
	break;
	default:
	error_illegal_ident(); }
}

// OTD2R End
void Parser::parse_main_action_5885() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xEDBC);
	break;
	default:
	error_illegal_ident(); }
}

// OTDM Dot L End | OTDM Dot LIS End
void Parser::parse_main_action_5886() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xED8B);
	break;
	default:
	error_illegal_ident(); }
}

// OTDM Dot S End | OTDM Dot SIL End
void Parser::parse_main_action_5887() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xED8B);
	break;
	default:
	error_illegal_ident(); }
}

// OTDM End
void Parser::parse_main_action_5888() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
	add_opcode(0xED8B);
	break;
	default:
	error_illegal_ident(); }
}

// OTDMR Dot L End | OTDMR Dot LIS End
void Parser::parse_main_action_5889() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xED9B);
	break;
	default:
	error_illegal_ident(); }
}

// OTDMR Dot S End | OTDMR Dot SIL End
void Parser::parse_main_action_5890() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xED9B);
	break;
	default:
	error_illegal_ident(); }
}

// OTDMR End
void Parser::parse_main_action_5891() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
	add_opcode(0xED9B);
	break;
	default:
	error_illegal_ident(); }
}

// OTDR X End
void Parser::parse_main_action_5892() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xEDFB);
	break;
	default:
	error_illegal_ident(); }
}

// OTDR Dot L End | OTDR Dot LIS End
void Parser::parse_main_action_5893() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xEDBB);
	break;
	default:
	error_illegal_ident(); }
}

// OTDR Dot S End | OTDR Dot SIL End
void Parser::parse_main_action_5894() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xEDBB);
	break;
	default:
	error_illegal_ident(); }
}

// OTDR End
void Parser::parse_main_action_5895() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xEDBB);
	break;
	default:
	error_illegal_ident(); }
}

// OTDRX Dot L End | OTDRX Dot LIS End
void Parser::parse_main_action_5896() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xEDCB);
	break;
	default:
	error_illegal_ident(); }
}

// OTDRX Dot S End | OTDRX Dot SIL End
void Parser::parse_main_action_5897() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xEDCB);
	break;
	default:
	error_illegal_ident(); }
}

// OTDRX End
void Parser::parse_main_action_5898() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xEDCB);
	break;
	default:
	error_illegal_ident(); }
}

// OTI2R Dot L End | OTI2R Dot LIS End
void Parser::parse_main_action_5899() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xEDB4);
	break;
	default:
	error_illegal_ident(); }
}

// OTI2R Dot S End | OTI2R Dot SIL End
void Parser::parse_main_action_5900() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xEDB4);
	break;
	default:
	error_illegal_ident(); }
}

// OTI2R End
void Parser::parse_main_action_5901() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xEDB4);
	break;
	default:
	error_illegal_ident(); }
}

// OTIB End | OUTINB End
void Parser::parse_main_action_5902() {
	switch (g_args.cpu()) {
	case CPU_Z80N: 
	add_opcode(0xED90);
	break;
	default:
	error_illegal_ident(); }
}

// OTIM Dot L End | OTIM Dot LIS End
void Parser::parse_main_action_5903() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xED83);
	break;
	default:
	error_illegal_ident(); }
}

// OTIM Dot S End | OTIM Dot SIL End
void Parser::parse_main_action_5904() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xED83);
	break;
	default:
	error_illegal_ident(); }
}

// OTIM End
void Parser::parse_main_action_5905() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
	add_opcode(0xED83);
	break;
	default:
	error_illegal_ident(); }
}

// OTIMR Dot L End | OTIMR Dot LIS End
void Parser::parse_main_action_5906() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xED93);
	break;
	default:
	error_illegal_ident(); }
}

// OTIMR Dot S End | OTIMR Dot SIL End
void Parser::parse_main_action_5907() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xED93);
	break;
	default:
	error_illegal_ident(); }
}

// OTIMR End
void Parser::parse_main_action_5908() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
	add_opcode(0xED93);
	break;
	default:
	error_illegal_ident(); }
}

// OTIR X End
void Parser::parse_main_action_5909() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xEDF3);
	break;
	default:
	error_illegal_ident(); }
}

// OTIR Dot L End | OTIR Dot LIS End
void Parser::parse_main_action_5910() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xEDB3);
	break;
	default:
	error_illegal_ident(); }
}

// OTIR Dot S End | OTIR Dot SIL End
void Parser::parse_main_action_5911() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xEDB3);
	break;
	default:
	error_illegal_ident(); }
}

// OTIR End
void Parser::parse_main_action_5912() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xEDB3);
	break;
	default:
	error_illegal_ident(); }
}

// OTIRX Dot L End | OTIRX Dot LIS End
void Parser::parse_main_action_5913() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xEDC3);
	break;
	default:
	error_illegal_ident(); }
}

// OTIRX Dot S End | OTIRX Dot SIL End
void Parser::parse_main_action_5914() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xEDC3);
	break;
	default:
	error_illegal_ident(); }
}

// OTIRX End
void Parser::parse_main_action_5915() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xEDC3);
	break;
	default:
	error_illegal_ident(); }
}

// OUT LParen BC RParen Comma A End | OUT LParen C RParen Comma A End
void Parser::parse_main_action_5916() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xED79);
	break;
	default:
	error_illegal_ident(); }
}

// OUT LParen BC RParen Comma B End | OUT LParen C RParen Comma B End
void Parser::parse_main_action_5917() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xED41);
	break;
	default:
	error_illegal_ident(); }
}

// OUT LParen BC RParen Comma C End | OUT LParen C RParen Comma C End
void Parser::parse_main_action_5918() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xED49);
	break;
	default:
	error_illegal_ident(); }
}

// OUT LParen BC RParen Comma D End | OUT LParen C RParen Comma D End
void Parser::parse_main_action_5919() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xED51);
	break;
	default:
	error_illegal_ident(); }
}

// OUT LParen BC RParen Comma E End | OUT LParen C RParen Comma E End
void Parser::parse_main_action_5920() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xED59);
	break;
	default:
	error_illegal_ident(); }
}

// OUT LParen BC RParen Comma F End | OUT LParen C RParen Comma F End
void Parser::parse_main_action_5921() {
	switch (g_args.cpu()) {
	case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xED71);
	break;
	default:
	error_illegal_ident(); }
}

// OUT LParen BC RParen Comma H End | OUT LParen C RParen Comma H End
void Parser::parse_main_action_5922() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xED61);
	break;
	default:
	error_illegal_ident(); }
}

// OUT LParen BC RParen Comma L End | OUT LParen C RParen Comma L End
void Parser::parse_main_action_5923() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xED69);
	break;
	default:
	error_illegal_ident(); }
}

// OUT LParen BC RParen Comma const_expr End | OUT LParen C RParen Comma const_expr End
void Parser::parse_main_action_5924() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: break;
	default: error_int_range(const_expr); }
	add_opcode(0xED00+((0x41+const_expr+6*8)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// OUT expr Comma A End
void Parser::parse_main_action_5925() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_n(0xD3);
	break;
	default:
	error_illegal_ident(); }
}

// OUT expr End
void Parser::parse_main_action_5926() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_opcode_n(0xD3);
	break;
	default:
	error_illegal_ident(); }
}

// OUT0 expr Comma A End
void Parser::parse_main_action_5927() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_n(0xED39);
	break;
	default:
	error_illegal_ident(); }
}

// OUT0 expr Comma B End
void Parser::parse_main_action_5928() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_n(0xED01);
	break;
	default:
	error_illegal_ident(); }
}

// OUT0 expr Comma C End
void Parser::parse_main_action_5929() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_n(0xED09);
	break;
	default:
	error_illegal_ident(); }
}

// OUT0 expr Comma D End
void Parser::parse_main_action_5930() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_n(0xED11);
	break;
	default:
	error_illegal_ident(); }
}

// OUT0 expr Comma E End
void Parser::parse_main_action_5931() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_n(0xED19);
	break;
	default:
	error_illegal_ident(); }
}

// OUT0 expr Comma H End
void Parser::parse_main_action_5932() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_n(0xED21);
	break;
	default:
	error_illegal_ident(); }
}

// OUT0 expr Comma L End
void Parser::parse_main_action_5933() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
	if (!expr_in_parens()) { error_expr_not_in_parens(); return; }
	add_opcode_n(0xED29);
	break;
	default:
	error_illegal_ident(); }
}

// OUTD X End
void Parser::parse_main_action_5934() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xEDEB);
	break;
	default:
	error_illegal_ident(); }
}

// OUTD Dot L End | OUTD Dot LIS End
void Parser::parse_main_action_5935() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xEDAB);
	break;
	default:
	error_illegal_ident(); }
}

// OUTD Dot S End | OUTD Dot SIL End
void Parser::parse_main_action_5936() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xEDAB);
	break;
	default:
	error_illegal_ident(); }
}

// OUTD End
void Parser::parse_main_action_5937() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xEDAB);
	break;
	default:
	error_illegal_ident(); }
}

// OUTD2 Dot L End | OUTD2 Dot LIS End
void Parser::parse_main_action_5938() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xEDAC);
	break;
	default:
	error_illegal_ident(); }
}

// OUTD2 Dot S End | OUTD2 Dot SIL End
void Parser::parse_main_action_5939() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xEDAC);
	break;
	default:
	error_illegal_ident(); }
}

// OUTD2 End
void Parser::parse_main_action_5940() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xEDAC);
	break;
	default:
	error_illegal_ident(); }
}

// OUTI X End
void Parser::parse_main_action_5941() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xEDE3);
	break;
	default:
	error_illegal_ident(); }
}

// OUTI Dot L End | OUTI Dot LIS End
void Parser::parse_main_action_5942() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xEDA3);
	break;
	default:
	error_illegal_ident(); }
}

// OUTI Dot S End | OUTI Dot SIL End
void Parser::parse_main_action_5943() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xEDA3);
	break;
	default:
	error_illegal_ident(); }
}

// OUTI End
void Parser::parse_main_action_5944() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xEDA3);
	break;
	default:
	error_illegal_ident(); }
}

// OUTI2 Dot L End | OUTI2 Dot LIS End
void Parser::parse_main_action_5945() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xEDA4);
	break;
	default:
	error_illegal_ident(); }
}

// OUTI2 Dot S End | OUTI2 Dot SIL End
void Parser::parse_main_action_5946() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xEDA4);
	break;
	default:
	error_illegal_ident(); }
}

// OUTI2 End
void Parser::parse_main_action_5947() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xEDA4);
	break;
	default:
	error_illegal_ident(); }
}

// OVRST8 End | RSTV End
void Parser::parse_main_action_5948() {
	switch (g_args.cpu()) {
	case CPU_8085: 
	add_opcode(0xCB);
	break;
	default:
	error_illegal_ident(); }
}

// PEA IX End
void Parser::parse_main_action_5949() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xED6500);
	break;
	default:
	error_illegal_ident(); }
}

// PEA IX expr End
void Parser::parse_main_action_5950() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode_idx(0xED65);
	break;
	default:
	error_illegal_ident(); }
}

// PEA IY End
void Parser::parse_main_action_5951() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xED6600);
	break;
	default:
	error_illegal_ident(); }
}

// PEA IY expr End
void Parser::parse_main_action_5952() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode_idx(0xED66);
	break;
	default:
	error_illegal_ident(); }
}

// PEA Dot L IX End | PEA Dot LIS IX End
void Parser::parse_main_action_5953() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xED6500);
	break;
	default:
	error_illegal_ident(); }
}

// PEA Dot L IX expr End | PEA Dot LIS IX expr End
void Parser::parse_main_action_5954() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xED65);
	break;
	default:
	error_illegal_ident(); }
}

// PEA Dot L IY End | PEA Dot LIS IY End
void Parser::parse_main_action_5955() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xED6600);
	break;
	default:
	error_illegal_ident(); }
}

// PEA Dot L IY expr End | PEA Dot LIS IY expr End
void Parser::parse_main_action_5956() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xED66);
	break;
	default:
	error_illegal_ident(); }
}

// PEA Dot S IX End | PEA Dot SIL IX End
void Parser::parse_main_action_5957() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xED6500);
	break;
	default:
	error_illegal_ident(); }
}

// PEA Dot S IX expr End | PEA Dot SIL IX expr End
void Parser::parse_main_action_5958() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xED65);
	break;
	default:
	error_illegal_ident(); }
}

// PEA Dot S IY End | PEA Dot SIL IY End
void Parser::parse_main_action_5959() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xED6600);
	break;
	default:
	error_illegal_ident(); }
}

// PEA Dot S IY expr End | PEA Dot SIL IY expr End
void Parser::parse_main_action_5960() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xED66);
	break;
	default:
	error_illegal_ident(); }
}

// PIXELAD End | PXAD End
void Parser::parse_main_action_5961() {
	switch (g_args.cpu()) {
	case CPU_Z80N: 
	add_opcode(0xED94);
	break;
	default:
	error_illegal_ident(); }
}

// PIXELDN End | PXDN End
void Parser::parse_main_action_5962() {
	switch (g_args.cpu()) {
	case CPU_Z80N: 
	add_opcode(0xED93);
	break;
	default:
	error_illegal_ident(); }
}

// POP AF End | POP PSW End
void Parser::parse_main_action_5963() {
	add_opcode(0xF1);
}

// POP AHL End
void Parser::parse_main_action_5964() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xED2F);
	break;
	default:
	error_illegal_ident(); }
}

// POP B End | POP BC End
void Parser::parse_main_action_5965() {
	add_opcode(0xC1);
}

// POP BCDE End
void Parser::parse_main_action_5966() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDDF1);
	break;
	default:
	error_illegal_ident(); }
}

// POP D End | POP DE End
void Parser::parse_main_action_5967() {
	add_opcode(0xD1);
}

// POP H End | POP HL End
void Parser::parse_main_action_5968() {
	add_opcode(0xE1);
}

// POP IP End
void Parser::parse_main_action_5969() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xED7E);
	break;
	default:
	error_illegal_ident(); }
}

// POP IX End
void Parser::parse_main_action_5970() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xDDE1);
	break;
	default:
	error_illegal_ident(); }
}

// POP IY End
void Parser::parse_main_action_5971() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xFDE1);
	break;
	default:
	error_illegal_ident(); }
}

// POP JKHL End
void Parser::parse_main_action_5972() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFDF1);
	break;
	default:
	error_illegal_ident(); }
}

// POP PW End
void Parser::parse_main_action_5973() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xEDC1);
	break;
	default:
	error_illegal_ident(); }
}

// POP PX End
void Parser::parse_main_action_5974() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xEDD1);
	break;
	default:
	error_illegal_ident(); }
}

// POP PY End
void Parser::parse_main_action_5975() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xEDE1);
	break;
	default:
	error_illegal_ident(); }
}

// POP PZ End
void Parser::parse_main_action_5976() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xEDF1);
	break;
	default:
	error_illegal_ident(); }
}

// POP SU End
void Parser::parse_main_action_5977() {
	switch (g_args.cpu()) {
	case CPU_R3K: 
	add_opcode(0xED6E);
	break;
	default:
	error_illegal_ident(); }
}

// POP XIX End
void Parser::parse_main_action_5978() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xED0F);
	break;
	default:
	error_illegal_ident(); }
}

// POP YIY End
void Parser::parse_main_action_5979() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xED1F);
	break;
	default:
	error_illegal_ident(); }
}

// POP Dot L AF End | POP Dot LIS AF End
void Parser::parse_main_action_5980() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xF1);
	break;
	default:
	error_illegal_ident(); }
}

// POP Dot L BC End | POP Dot LIS BC End
void Parser::parse_main_action_5981() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xC1);
	break;
	default:
	error_illegal_ident(); }
}

// POP Dot L DE End | POP Dot LIS DE End
void Parser::parse_main_action_5982() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xD1);
	break;
	default:
	error_illegal_ident(); }
}

// POP Dot L HL End | POP Dot LIS HL End
void Parser::parse_main_action_5983() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xE1);
	break;
	default:
	error_illegal_ident(); }
}

// POP Dot L IX End | POP Dot LIS IX End
void Parser::parse_main_action_5984() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xDDE1);
	break;
	default:
	error_illegal_ident(); }
}

// POP Dot L IY End | POP Dot LIS IY End
void Parser::parse_main_action_5985() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xFDE1);
	break;
	default:
	error_illegal_ident(); }
}

// POP Dot S AF End | POP Dot SIL AF End
void Parser::parse_main_action_5986() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xF1);
	break;
	default:
	error_illegal_ident(); }
}

// POP Dot S BC End | POP Dot SIL BC End
void Parser::parse_main_action_5987() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xC1);
	break;
	default:
	error_illegal_ident(); }
}

// POP Dot S DE End | POP Dot SIL DE End
void Parser::parse_main_action_5988() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xD1);
	break;
	default:
	error_illegal_ident(); }
}

// POP Dot S HL End | POP Dot SIL HL End
void Parser::parse_main_action_5989() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xE1);
	break;
	default:
	error_illegal_ident(); }
}

// POP Dot S IX End | POP Dot SIL IX End
void Parser::parse_main_action_5990() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xDDE1);
	break;
	default:
	error_illegal_ident(); }
}

// POP Dot S IY End | POP Dot SIL IY End
void Parser::parse_main_action_5991() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xFDE1);
	break;
	default:
	error_illegal_ident(); }
}

// PUBLIC | XDEF | XLIB
void Parser::parse_main_action_5992() {
	parse_symbol_declare(Symbol::Scope::Public);
}

// PUSH AF End | PUSH PSW End
void Parser::parse_main_action_5993() {
	add_opcode(0xF5);
}

// PUSH AHL End
void Parser::parse_main_action_5994() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xED27);
	break;
	default:
	error_illegal_ident(); }
}

// PUSH B End | PUSH BC End
void Parser::parse_main_action_5995() {
	add_opcode(0xC5);
}

// PUSH BCDE End
void Parser::parse_main_action_5996() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDDF5);
	break;
	default:
	error_illegal_ident(); }
}

// PUSH D End | PUSH DE End
void Parser::parse_main_action_5997() {
	add_opcode(0xD5);
}

// PUSH H End | PUSH HL End
void Parser::parse_main_action_5998() {
	add_opcode(0xE5);
}

// PUSH IP End
void Parser::parse_main_action_5999() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xED76);
	break;
	default:
	error_illegal_ident(); }
}

// PUSH IX End
void Parser::parse_main_action_6000() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xDDE5);
	break;
	default:
	error_illegal_ident(); }
}

// PUSH IY End
void Parser::parse_main_action_6001() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xFDE5);
	break;
	default:
	error_illegal_ident(); }
}

// PUSH JKHL End
void Parser::parse_main_action_6002() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFDF5);
	break;
	default:
	error_illegal_ident(); }
}

// PUSH PW End
void Parser::parse_main_action_6003() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xEDC5);
	break;
	default:
	error_illegal_ident(); }
}

// PUSH PX End
void Parser::parse_main_action_6004() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xEDD5);
	break;
	default:
	error_illegal_ident(); }
}

// PUSH PY End
void Parser::parse_main_action_6005() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xEDE5);
	break;
	default:
	error_illegal_ident(); }
}

// PUSH PZ End
void Parser::parse_main_action_6006() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xEDF5);
	break;
	default:
	error_illegal_ident(); }
}

// PUSH SU End
void Parser::parse_main_action_6007() {
	switch (g_args.cpu()) {
	case CPU_R3K: 
	add_opcode(0xED66);
	break;
	default:
	error_illegal_ident(); }
}

// PUSH XIX End
void Parser::parse_main_action_6008() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xED07);
	break;
	default:
	error_illegal_ident(); }
}

// PUSH YIY End
void Parser::parse_main_action_6009() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xED17);
	break;
	default:
	error_illegal_ident(); }
}

// PUSH Dot L AF End | PUSH Dot LIS AF End
void Parser::parse_main_action_6010() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xF5);
	break;
	default:
	error_illegal_ident(); }
}

// PUSH Dot L BC End | PUSH Dot LIS BC End
void Parser::parse_main_action_6011() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xC5);
	break;
	default:
	error_illegal_ident(); }
}

// PUSH Dot L DE End | PUSH Dot LIS DE End
void Parser::parse_main_action_6012() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xD5);
	break;
	default:
	error_illegal_ident(); }
}

// PUSH Dot L HL End | PUSH Dot LIS HL End
void Parser::parse_main_action_6013() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xE5);
	break;
	default:
	error_illegal_ident(); }
}

// PUSH Dot L IX End | PUSH Dot LIS IX End
void Parser::parse_main_action_6014() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xDDE5);
	break;
	default:
	error_illegal_ident(); }
}

// PUSH Dot L IY End | PUSH Dot LIS IY End
void Parser::parse_main_action_6015() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xFDE5);
	break;
	default:
	error_illegal_ident(); }
}

// PUSH Dot S AF End | PUSH Dot SIL AF End
void Parser::parse_main_action_6016() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xF5);
	break;
	default:
	error_illegal_ident(); }
}

// PUSH Dot S BC End | PUSH Dot SIL BC End
void Parser::parse_main_action_6017() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xC5);
	break;
	default:
	error_illegal_ident(); }
}

// PUSH Dot S DE End | PUSH Dot SIL DE End
void Parser::parse_main_action_6018() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xD5);
	break;
	default:
	error_illegal_ident(); }
}

// PUSH Dot S HL End | PUSH Dot SIL HL End
void Parser::parse_main_action_6019() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xE5);
	break;
	default:
	error_illegal_ident(); }
}

// PUSH Dot S IX End | PUSH Dot SIL IX End
void Parser::parse_main_action_6020() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xDDE5);
	break;
	default:
	error_illegal_ident(); }
}

// PUSH Dot S IY End | PUSH Dot SIL IY End
void Parser::parse_main_action_6021() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xFDE5);
	break;
	default:
	error_illegal_ident(); }
}

// PUSH expr End
void Parser::parse_main_action_6022() {
	switch (g_args.cpu()) {
	case CPU_Z80N: 
	add_opcode_NN(0xED8A);
	break;
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode_nn(0xEDA5, 0);
	break;
	default:
	error_illegal_ident(); }
}

// RAL End | RLA End
void Parser::parse_main_action_6023() {
	add_opcode(0x17);
}

// RAR End | RRA End
void Parser::parse_main_action_6024() {
	add_opcode(0x1F);
}

// RC End | RET C End | RET LTU End | RLTU End | R_C End | R_LTU End
void Parser::parse_main_action_6025() {
	add_opcode(0xD8);
}

// RDEL End | RL DE End | RLDE End
void Parser::parse_main_action_6026() {
	switch (g_args.cpu()) {
	case CPU_8080: 
	add_call_function("__z80asm__rl_de");
	break;
	case CPU_8085: 
	add_opcode(0x18);
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xCB13);
	add_opcode(0xCB12);
	break;
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xF3);
	break;
	default:
	error_illegal_ident(); }
}

// RDMODE End
void Parser::parse_main_action_6027() {
	switch (g_args.cpu()) {
	case CPU_R3K: 
	add_opcode(0xED7F);
	break;
	default:
	error_illegal_ident(); }
}

// REQ End | RET EQ End | RET Z End | RZ End | R_EQ End | R_Z End
void Parser::parse_main_action_6028() {
	add_opcode(0xC8);
}

// RES Dot L const_expr Comma LParen HL RParen End | RES Dot LIS const_expr Comma LParen HL RParen End
void Parser::parse_main_action_6029() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCB86+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// RES Dot L const_expr Comma LParen IX RParen End | RES Dot LIS const_expr Comma LParen IX RParen End
void Parser::parse_main_action_6030() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xDDCB0086+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// RES Dot L const_expr Comma LParen IX expr RParen End | RES Dot LIS const_expr Comma LParen IX expr RParen End
void Parser::parse_main_action_6031() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xDDCB86+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// RES Dot L const_expr Comma LParen IY RParen End | RES Dot LIS const_expr Comma LParen IY RParen End
void Parser::parse_main_action_6032() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xFDCB0086+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// RES Dot L const_expr Comma LParen IY expr RParen End | RES Dot LIS const_expr Comma LParen IY expr RParen End
void Parser::parse_main_action_6033() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xFDCB86+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// RES Dot S const_expr Comma LParen HL RParen End | RES Dot SIL const_expr Comma LParen HL RParen End
void Parser::parse_main_action_6034() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCB86+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// RES Dot S const_expr Comma LParen IX RParen End | RES Dot SIL const_expr Comma LParen IX RParen End
void Parser::parse_main_action_6035() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xDDCB0086+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// RES Dot S const_expr Comma LParen IX expr RParen End | RES Dot SIL const_expr Comma LParen IX expr RParen End
void Parser::parse_main_action_6036() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xDDCB86+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// RES Dot S const_expr Comma LParen IY RParen End | RES Dot SIL const_expr Comma LParen IY RParen End
void Parser::parse_main_action_6037() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xFDCB0086+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// RES Dot S const_expr Comma LParen IY expr RParen End | RES Dot SIL const_expr Comma LParen IY expr RParen End
void Parser::parse_main_action_6038() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xFDCB86+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// RES const_expr Comma A End
void Parser::parse_main_action_6039() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCB87+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// RES const_expr Comma B End
void Parser::parse_main_action_6040() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCB80+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// RES const_expr Comma C End
void Parser::parse_main_action_6041() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCB81+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// RES const_expr Comma D End
void Parser::parse_main_action_6042() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCB82+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// RES const_expr Comma E End
void Parser::parse_main_action_6043() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCB83+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// RES const_expr Comma H End
void Parser::parse_main_action_6044() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCB84+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// RES const_expr Comma L End
void Parser::parse_main_action_6045() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCB85+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// RES const_expr Comma LParen AHL RParen End
void Parser::parse_main_action_6046() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCB86+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// RES const_expr Comma LParen AIX RParen End
void Parser::parse_main_action_6047() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xDDCB0086+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// RES const_expr Comma LParen AIX expr RParen End
void Parser::parse_main_action_6048() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xDDCB86+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// RES const_expr Comma LParen AIY RParen End
void Parser::parse_main_action_6049() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xFDCB0086+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// RES const_expr Comma LParen AIY expr RParen End
void Parser::parse_main_action_6050() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xFDCB86+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// RES const_expr Comma LParen HL RParen End
void Parser::parse_main_action_6051() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCB86+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// RES const_expr Comma LParen IX RParen End
void Parser::parse_main_action_6052() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xDDCB0086+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// RES const_expr Comma LParen IX expr RParen End
void Parser::parse_main_action_6053() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xDDCB86+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// RES const_expr Comma LParen IY RParen End
void Parser::parse_main_action_6054() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xFDCB0086+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// RES const_expr Comma LParen IY expr RParen End
void Parser::parse_main_action_6055() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xFDCB86+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// RES const_expr Comma LParen PHL RParen End
void Parser::parse_main_action_6056() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x5B);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCB86+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// RES const_expr Comma LParen PIX RParen End
void Parser::parse_main_action_6057() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x5B);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xDDCB0086+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// RES const_expr Comma LParen PIX expr RParen End
void Parser::parse_main_action_6058() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x5B);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xDDCB86+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// RES const_expr Comma LParen PIY RParen End
void Parser::parse_main_action_6059() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x5B);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xFDCB0086+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// RES const_expr Comma LParen PIY expr RParen End
void Parser::parse_main_action_6060() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x5B);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xFDCB86+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// RES const_expr Comma LParen XHL RParen End
void Parser::parse_main_action_6061() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x40);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCB86+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// RES const_expr Comma LParen XIX RParen End
void Parser::parse_main_action_6062() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x40);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xDDCB0086+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// RES const_expr Comma LParen XIX expr RParen End
void Parser::parse_main_action_6063() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x40);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xDDCB86+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// RES const_expr Comma LParen XIY RParen End
void Parser::parse_main_action_6064() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x40);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xFDCB0086+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// RES const_expr Comma LParen XIY expr RParen End
void Parser::parse_main_action_6065() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x40);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xFDCB86+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// RES const_expr Comma LParen YHL RParen End
void Parser::parse_main_action_6066() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCB86+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// RES const_expr Comma LParen YIX RParen End
void Parser::parse_main_action_6067() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xDDCB0086+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// RES const_expr Comma LParen YIX expr RParen End
void Parser::parse_main_action_6068() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xDDCB86+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// RES const_expr Comma LParen YIY RParen End
void Parser::parse_main_action_6069() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xFDCB0086+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// RES const_expr Comma LParen YIY expr RParen End
void Parser::parse_main_action_6070() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xFDCB86+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// RES const_expr Comma LParen ZHL RParen End
void Parser::parse_main_action_6071() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x7F);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCB86+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// RES const_expr Comma LParen ZIX RParen End
void Parser::parse_main_action_6072() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x7F);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xDDCB0086+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// RES const_expr Comma LParen ZIX expr RParen End
void Parser::parse_main_action_6073() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x7F);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xDDCB86+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// RES const_expr Comma LParen ZIY RParen End
void Parser::parse_main_action_6074() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x7F);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xFDCB0086+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// RES const_expr Comma LParen ZIY expr RParen End
void Parser::parse_main_action_6075() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x7F);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xFDCB86+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// RET GEU End | RET NC End | RGEU End | RNC End | R_GEU End | R_NC End
void Parser::parse_main_action_6076() {
	add_opcode(0xD0);
}

// RET GTU End | RGTU End | R_GTU End
void Parser::parse_main_action_6077() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	{
	string target2 = Section::autolabel();
	auto target_expr2 = Expr::make_expr(target2);
	m_exprs.push_back(target_expr2);
	add_jump_relative(0x28);
	m_exprs.pop_back();
	m_exprs.push_back(target_expr2);
	add_jump_relative(0x38);
	m_exprs.pop_back();
	add_opcode(0xC9);
	add_label(target2);
	}
	break;
	case CPU_8080: case CPU_8085: 
	{
	string target2 = Section::autolabel();
	auto target_expr2 = Expr::make_expr(target2);
	m_exprs.push_back(target_expr2);
	add_opcode_nn(0xCA);
	m_exprs.pop_back();
	m_exprs.push_back(target_expr2);
	add_opcode_nn(0xDA);
	m_exprs.pop_back();
	add_opcode(0xC9);
	add_label(target2);
	}
	break;
	default:
	error_illegal_ident(); }
}

// RET LEU End | RLEU End | R_LEU End
void Parser::parse_main_action_6078() {
	add_opcode(0xC8);
	add_opcode(0xD8);
}

// RET LO End | RLO End | R_LO End
void Parser::parse_main_action_6079() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xE8);
	break;
	default:
	error_illegal_ident(); }
}

// RET LZ End | RLZ End | R_LZ End
void Parser::parse_main_action_6080() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xE0);
	break;
	default:
	error_illegal_ident(); }
}

// RET M End | RM End | R_M End
void Parser::parse_main_action_6081() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xF8);
	break;
	default:
	error_illegal_ident(); }
}

// RET NE End | RET NZ End | RNE End | RNZ End | R_NE End | R_NZ End
void Parser::parse_main_action_6082() {
	add_opcode(0xC0);
}

// RET NV End | RNV End | R_NV End
void Parser::parse_main_action_6083() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xE0);
	break;
	default:
	error_illegal_ident(); }
}

// RET P End | RP End | R_P End
void Parser::parse_main_action_6084() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xF0);
	break;
	default:
	error_illegal_ident(); }
}

// RET PE End | RPE End | R_PE End
void Parser::parse_main_action_6085() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xE8);
	break;
	default:
	error_illegal_ident(); }
}

// RET PO End | RPO End | R_PO End
void Parser::parse_main_action_6086() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xE0);
	break;
	default:
	error_illegal_ident(); }
}

// RET V End | RV End | R_V End
void Parser::parse_main_action_6087() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xE8);
	break;
	default:
	error_illegal_ident(); }
}

// RET Dot L C End | RET Dot L LTU End
void Parser::parse_main_action_6088() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xD8);
	break;
	case CPU_EZ80: 
	add_opcode(0x5B);
	add_opcode(0xD8);
	break;
	default:
	error_illegal_ident(); }
}

// RET Dot L EQ End | RET Dot L Z End
void Parser::parse_main_action_6089() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xC8);
	break;
	case CPU_EZ80: 
	add_opcode(0x5B);
	add_opcode(0xC8);
	break;
	default:
	error_illegal_ident(); }
}

// RET Dot L GEU End | RET Dot L NC End
void Parser::parse_main_action_6090() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xD0);
	break;
	case CPU_EZ80: 
	add_opcode(0x5B);
	add_opcode(0xD0);
	break;
	default:
	error_illegal_ident(); }
}

// RET Dot L GTU End
void Parser::parse_main_action_6091() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	{
	string target2 = Section::autolabel();
	auto target_expr2 = Expr::make_expr(target2);
	m_exprs.push_back(target_expr2);
	add_jump_relative(0x28);
	m_exprs.pop_back();
	m_exprs.push_back(target_expr2);
	add_jump_relative(0x38);
	m_exprs.pop_back();
	add_opcode(0x49);
	add_opcode(0xC9);
	add_label(target2);
	}
	break;
	case CPU_EZ80: 
	{
	string target2 = Section::autolabel();
	auto target_expr2 = Expr::make_expr(target2);
	m_exprs.push_back(target_expr2);
	add_jump_relative(0x28);
	m_exprs.pop_back();
	m_exprs.push_back(target_expr2);
	add_jump_relative(0x38);
	m_exprs.pop_back();
	add_opcode(0x5B);
	add_opcode(0xC9);
	add_label(target2);
	}
	break;
	default:
	error_illegal_ident(); }
}

// RET Dot L LEU End
void Parser::parse_main_action_6092() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xC8);
	add_opcode(0x49);
	add_opcode(0xD8);
	break;
	case CPU_EZ80: 
	add_opcode(0x5B);
	add_opcode(0xC8);
	add_opcode(0x5B);
	add_opcode(0xD8);
	break;
	default:
	error_illegal_ident(); }
}

// RET Dot L M End
void Parser::parse_main_action_6093() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xF8);
	break;
	case CPU_EZ80: 
	add_opcode(0x5B);
	add_opcode(0xF8);
	break;
	default:
	error_illegal_ident(); }
}

// RET Dot L NE End | RET Dot L NZ End
void Parser::parse_main_action_6094() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xC0);
	break;
	case CPU_EZ80: 
	add_opcode(0x5B);
	add_opcode(0xC0);
	break;
	default:
	error_illegal_ident(); }
}

// RET Dot L NV End | RET Dot L PO End
void Parser::parse_main_action_6095() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xE0);
	break;
	case CPU_EZ80: 
	add_opcode(0x5B);
	add_opcode(0xE0);
	break;
	default:
	error_illegal_ident(); }
}

// RET Dot L P End
void Parser::parse_main_action_6096() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xF0);
	break;
	case CPU_EZ80: 
	add_opcode(0x5B);
	add_opcode(0xF0);
	break;
	default:
	error_illegal_ident(); }
}

// RET Dot L PE End | RET Dot L V End
void Parser::parse_main_action_6097() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xE8);
	break;
	case CPU_EZ80: 
	add_opcode(0x5B);
	add_opcode(0xE8);
	break;
	default:
	error_illegal_ident(); }
}

// RET Dot L End
void Parser::parse_main_action_6098() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xC9);
	break;
	case CPU_EZ80: 
	add_opcode(0x5B);
	add_opcode(0xC9);
	break;
	default:
	error_illegal_ident(); }
}

// RET Dot LIL C End | RET Dot LIL LTU End
void Parser::parse_main_action_6099() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x5B);
	add_opcode(0xD8);
	break;
	default:
	error_illegal_ident(); }
}

// RET Dot LIL EQ End | RET Dot LIL Z End
void Parser::parse_main_action_6100() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x5B);
	add_opcode(0xC8);
	break;
	default:
	error_illegal_ident(); }
}

// RET Dot LIL GEU End | RET Dot LIL NC End
void Parser::parse_main_action_6101() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x5B);
	add_opcode(0xD0);
	break;
	default:
	error_illegal_ident(); }
}

// RET Dot LIL GTU End
void Parser::parse_main_action_6102() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	{
	string target2 = Section::autolabel();
	auto target_expr2 = Expr::make_expr(target2);
	m_exprs.push_back(target_expr2);
	add_jump_relative(0x28);
	m_exprs.pop_back();
	m_exprs.push_back(target_expr2);
	add_jump_relative(0x38);
	m_exprs.pop_back();
	add_opcode(0x5B);
	add_opcode(0xC9);
	add_label(target2);
	}
	break;
	default:
	error_illegal_ident(); }
}

// RET Dot LIL LEU End
void Parser::parse_main_action_6103() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x5B);
	add_opcode(0xC8);
	add_opcode(0x5B);
	add_opcode(0xD8);
	break;
	default:
	error_illegal_ident(); }
}

// RET Dot LIL M End
void Parser::parse_main_action_6104() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x5B);
	add_opcode(0xF8);
	break;
	default:
	error_illegal_ident(); }
}

// RET Dot LIL NE End | RET Dot LIL NZ End
void Parser::parse_main_action_6105() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x5B);
	add_opcode(0xC0);
	break;
	default:
	error_illegal_ident(); }
}

// RET Dot LIL NV End | RET Dot LIL PO End
void Parser::parse_main_action_6106() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x5B);
	add_opcode(0xE0);
	break;
	default:
	error_illegal_ident(); }
}

// RET Dot LIL P End
void Parser::parse_main_action_6107() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x5B);
	add_opcode(0xF0);
	break;
	default:
	error_illegal_ident(); }
}

// RET Dot LIL PE End | RET Dot LIL V End
void Parser::parse_main_action_6108() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x5B);
	add_opcode(0xE8);
	break;
	default:
	error_illegal_ident(); }
}

// RET Dot LIL End
void Parser::parse_main_action_6109() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x5B);
	add_opcode(0xC9);
	break;
	default:
	error_illegal_ident(); }
}

// RET Dot LIS C End | RET Dot LIS LTU End
void Parser::parse_main_action_6110() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xD8);
	break;
	default:
	error_illegal_ident(); }
}

// RET Dot LIS EQ End | RET Dot LIS Z End
void Parser::parse_main_action_6111() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xC8);
	break;
	default:
	error_illegal_ident(); }
}

// RET Dot LIS GEU End | RET Dot LIS NC End
void Parser::parse_main_action_6112() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xD0);
	break;
	default:
	error_illegal_ident(); }
}

// RET Dot LIS GTU End
void Parser::parse_main_action_6113() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	{
	string target2 = Section::autolabel();
	auto target_expr2 = Expr::make_expr(target2);
	m_exprs.push_back(target_expr2);
	add_jump_relative(0x28);
	m_exprs.pop_back();
	m_exprs.push_back(target_expr2);
	add_jump_relative(0x38);
	m_exprs.pop_back();
	add_opcode(0x49);
	add_opcode(0xC9);
	add_label(target2);
	}
	break;
	default:
	error_illegal_ident(); }
}

// RET Dot LIS LEU End
void Parser::parse_main_action_6114() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xC8);
	add_opcode(0x49);
	add_opcode(0xD8);
	break;
	default:
	error_illegal_ident(); }
}

// RET Dot LIS M End
void Parser::parse_main_action_6115() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xF8);
	break;
	default:
	error_illegal_ident(); }
}

// RET Dot LIS NE End | RET Dot LIS NZ End
void Parser::parse_main_action_6116() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xC0);
	break;
	default:
	error_illegal_ident(); }
}

// RET Dot LIS NV End | RET Dot LIS PO End
void Parser::parse_main_action_6117() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xE0);
	break;
	default:
	error_illegal_ident(); }
}

// RET Dot LIS P End
void Parser::parse_main_action_6118() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xF0);
	break;
	default:
	error_illegal_ident(); }
}

// RET Dot LIS PE End | RET Dot LIS V End
void Parser::parse_main_action_6119() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xE8);
	break;
	default:
	error_illegal_ident(); }
}

// RET Dot LIS End
void Parser::parse_main_action_6120() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xC9);
	break;
	default:
	error_illegal_ident(); }
}

// RET End
void Parser::parse_main_action_6121() {
	add_opcode(0xC9);
}

// RET3 End
void Parser::parse_main_action_6122() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xED5C);
	break;
	default:
	error_illegal_ident(); }
}

// RETI Dot L End
void Parser::parse_main_action_6123() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xED4D);
	break;
	case CPU_EZ80: 
	add_opcode(0x5B);
	add_opcode(0xED4D);
	break;
	default:
	error_illegal_ident(); }
}

// RETI Dot LIL End
void Parser::parse_main_action_6124() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x5B);
	add_opcode(0xED4D);
	break;
	default:
	error_illegal_ident(); }
}

// RETI Dot LIS End
void Parser::parse_main_action_6125() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xED4D);
	break;
	default:
	error_illegal_ident(); }
}

// RETI End
void Parser::parse_main_action_6126() {
	switch (g_args.cpu()) {
	case CPU_GBZ80: 
	add_opcode(0xD9);
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xED4D);
	break;
	default:
	error_illegal_ident(); }
}

// RETN Dot L End
void Parser::parse_main_action_6127() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xED45);
	break;
	case CPU_EZ80: 
	add_opcode(0x5B);
	add_opcode(0xED45);
	break;
	default:
	error_illegal_ident(); }
}

// RETN Dot LIL End
void Parser::parse_main_action_6128() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x5B);
	add_opcode(0xED45);
	break;
	default:
	error_illegal_ident(); }
}

// RETN Dot LIS End
void Parser::parse_main_action_6129() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xED45);
	break;
	default:
	error_illegal_ident(); }
}

// RETN End
void Parser::parse_main_action_6130() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xED45);
	break;
	default:
	error_illegal_ident(); }
}

// RETN3 End
void Parser::parse_main_action_6131() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xED55);
	break;
	default:
	error_illegal_ident(); }
}

// RIM End
void Parser::parse_main_action_6132() {
	switch (g_args.cpu()) {
	case CPU_8085: 
	add_opcode(0x20);
	break;
	default:
	error_illegal_ident(); }
}

// RL A End
void Parser::parse_main_action_6133() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xCB17);
	break;
	default:
	error_illegal_ident(); }
}

// RL B End
void Parser::parse_main_action_6134() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xCB10);
	break;
	default:
	error_illegal_ident(); }
}

// RL BC End
void Parser::parse_main_action_6135() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: 
	add_call_function("__z80asm__rl_bc");
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x62);
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xCB11);
	add_opcode(0xCB10);
	break;
	default:
	error_illegal_ident(); }
}

// RL C End
void Parser::parse_main_action_6136() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xCB11);
	break;
	default:
	error_illegal_ident(); }
}

// RL D End
void Parser::parse_main_action_6137() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xCB12);
	break;
	default:
	error_illegal_ident(); }
}

// RL E End
void Parser::parse_main_action_6138() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xCB13);
	break;
	default:
	error_illegal_ident(); }
}

// RL H End
void Parser::parse_main_action_6139() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xCB14);
	break;
	default:
	error_illegal_ident(); }
}

// RL HL End
void Parser::parse_main_action_6140() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: 
	add_call_function("__z80asm__rl_hl");
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x42);
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xCB15);
	add_opcode(0xCB14);
	break;
	default:
	error_illegal_ident(); }
}

// RL L End
void Parser::parse_main_action_6141() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xCB15);
	break;
	default:
	error_illegal_ident(); }
}

// RL Dot L LParen HL RParen End | RL Dot LIS LParen HL RParen End
void Parser::parse_main_action_6142() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xCB16);
	break;
	default:
	error_illegal_ident(); }
}

// RL Dot L LParen IX RParen End | RL Dot LIS LParen IX RParen End
void Parser::parse_main_action_6143() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xDDCB0016);
	break;
	default:
	error_illegal_ident(); }
}

// RL Dot L LParen IX expr RParen End | RL Dot LIS LParen IX expr RParen End
void Parser::parse_main_action_6144() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xDDCB16);
	break;
	default:
	error_illegal_ident(); }
}

// RL Dot L LParen IY RParen End | RL Dot LIS LParen IY RParen End
void Parser::parse_main_action_6145() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xFDCB0016);
	break;
	default:
	error_illegal_ident(); }
}

// RL Dot L LParen IY expr RParen End | RL Dot LIS LParen IY expr RParen End
void Parser::parse_main_action_6146() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xFDCB16);
	break;
	default:
	error_illegal_ident(); }
}

// RL Dot S LParen HL RParen End | RL Dot SIL LParen HL RParen End
void Parser::parse_main_action_6147() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xCB16);
	break;
	default:
	error_illegal_ident(); }
}

// RL Dot S LParen IX RParen End | RL Dot SIL LParen IX RParen End
void Parser::parse_main_action_6148() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xDDCB0016);
	break;
	default:
	error_illegal_ident(); }
}

// RL Dot S LParen IX expr RParen End | RL Dot SIL LParen IX expr RParen End
void Parser::parse_main_action_6149() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xDDCB16);
	break;
	default:
	error_illegal_ident(); }
}

// RL Dot S LParen IY RParen End | RL Dot SIL LParen IY RParen End
void Parser::parse_main_action_6150() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xFDCB0016);
	break;
	default:
	error_illegal_ident(); }
}

// RL Dot S LParen IY expr RParen End | RL Dot SIL LParen IY expr RParen End
void Parser::parse_main_action_6151() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xFDCB16);
	break;
	default:
	error_illegal_ident(); }
}

// RL LParen AHL RParen End
void Parser::parse_main_action_6152() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xCB16);
	break;
	default:
	error_illegal_ident(); }
}

// RL LParen AIX RParen End
void Parser::parse_main_action_6153() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xDDCB0016);
	break;
	default:
	error_illegal_ident(); }
}

// RL LParen AIX expr RParen End
void Parser::parse_main_action_6154() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xDDCB16);
	break;
	default:
	error_illegal_ident(); }
}

// RL LParen AIY RParen End
void Parser::parse_main_action_6155() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xFDCB0016);
	break;
	default:
	error_illegal_ident(); }
}

// RL LParen AIY expr RParen End
void Parser::parse_main_action_6156() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xFDCB16);
	break;
	default:
	error_illegal_ident(); }
}

// RL LParen HL RParen End
void Parser::parse_main_action_6157() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xCB16);
	break;
	default:
	error_illegal_ident(); }
}

// RL LParen IX RParen End
void Parser::parse_main_action_6158() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xDDCB0016);
	break;
	default:
	error_illegal_ident(); }
}

// RL LParen IX expr RParen End
void Parser::parse_main_action_6159() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx(0xDDCB16);
	break;
	default:
	error_illegal_ident(); }
}

// RL LParen IY RParen End
void Parser::parse_main_action_6160() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xFDCB0016);
	break;
	default:
	error_illegal_ident(); }
}

// RL LParen IY expr RParen End
void Parser::parse_main_action_6161() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx(0xFDCB16);
	break;
	default:
	error_illegal_ident(); }
}

// RL LParen PHL RParen End
void Parser::parse_main_action_6162() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xCB16);
	break;
	default:
	error_illegal_ident(); }
}

// RL LParen PIX RParen End
void Parser::parse_main_action_6163() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xDDCB0016);
	break;
	default:
	error_illegal_ident(); }
}

// RL LParen PIX expr RParen End
void Parser::parse_main_action_6164() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xDDCB16);
	break;
	default:
	error_illegal_ident(); }
}

// RL LParen PIY RParen End
void Parser::parse_main_action_6165() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xFDCB0016);
	break;
	default:
	error_illegal_ident(); }
}

// RL LParen PIY expr RParen End
void Parser::parse_main_action_6166() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xFDCB16);
	break;
	default:
	error_illegal_ident(); }
}

// RL LParen XHL RParen End
void Parser::parse_main_action_6167() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xCB16);
	break;
	default:
	error_illegal_ident(); }
}

// RL LParen XIX RParen End
void Parser::parse_main_action_6168() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xDDCB0016);
	break;
	default:
	error_illegal_ident(); }
}

// RL LParen XIX expr RParen End
void Parser::parse_main_action_6169() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xDDCB16);
	break;
	default:
	error_illegal_ident(); }
}

// RL LParen XIY RParen End
void Parser::parse_main_action_6170() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xFDCB0016);
	break;
	default:
	error_illegal_ident(); }
}

// RL LParen XIY expr RParen End
void Parser::parse_main_action_6171() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xFDCB16);
	break;
	default:
	error_illegal_ident(); }
}

// RL LParen YHL RParen End
void Parser::parse_main_action_6172() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xCB16);
	break;
	default:
	error_illegal_ident(); }
}

// RL LParen YIX RParen End
void Parser::parse_main_action_6173() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xDDCB0016);
	break;
	default:
	error_illegal_ident(); }
}

// RL LParen YIX expr RParen End
void Parser::parse_main_action_6174() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xDDCB16);
	break;
	default:
	error_illegal_ident(); }
}

// RL LParen YIY RParen End
void Parser::parse_main_action_6175() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xFDCB0016);
	break;
	default:
	error_illegal_ident(); }
}

// RL LParen YIY expr RParen End
void Parser::parse_main_action_6176() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xFDCB16);
	break;
	default:
	error_illegal_ident(); }
}

// RL LParen ZHL RParen End
void Parser::parse_main_action_6177() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xCB16);
	break;
	default:
	error_illegal_ident(); }
}

// RL LParen ZIX RParen End
void Parser::parse_main_action_6178() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xDDCB0016);
	break;
	default:
	error_illegal_ident(); }
}

// RL LParen ZIX expr RParen End
void Parser::parse_main_action_6179() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xDDCB16);
	break;
	default:
	error_illegal_ident(); }
}

// RL LParen ZIY RParen End
void Parser::parse_main_action_6180() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xFDCB0016);
	break;
	default:
	error_illegal_ident(); }
}

// RL LParen ZIY expr RParen End
void Parser::parse_main_action_6181() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xFDCB16);
	break;
	default:
	error_illegal_ident(); }
}

// RL const_expr Comma BCDE End
void Parser::parse_main_action_6182() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 1: case 2: case 4: case 8: break;
	default: error_int_range(const_expr); }
	add_opcode(0xDD00+((const_expr==1?0x68:const_expr==2?0x69:const_expr==4?0x6B:0x6F)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// RL const_expr Comma JKHL End
void Parser::parse_main_action_6183() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 1: case 2: case 4: case 8: break;
	default: error_int_range(const_expr); }
	add_opcode(0xFD00+((const_expr==1?0x68:const_expr==2?0x69:const_expr==4?0x6B:0x6F)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// RLB A Comma BCDE End
void Parser::parse_main_action_6184() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDD6F);
	break;
	default:
	error_illegal_ident(); }
}

// RLB A Comma JKHL End
void Parser::parse_main_action_6185() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFD6F);
	break;
	default:
	error_illegal_ident(); }
}

// RLC A End
void Parser::parse_main_action_6186() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xCB07);
	break;
	default:
	error_illegal_ident(); }
}

// RLC B End
void Parser::parse_main_action_6187() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xCB00);
	break;
	default:
	error_illegal_ident(); }
}

// RLC BC End
void Parser::parse_main_action_6188() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x60);
	break;
	default:
	error_illegal_ident(); }
}

// RLC C End
void Parser::parse_main_action_6189() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xCB01);
	break;
	default:
	error_illegal_ident(); }
}

// RLC D End
void Parser::parse_main_action_6190() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xCB02);
	break;
	default:
	error_illegal_ident(); }
}

// RLC DE End
void Parser::parse_main_action_6191() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x50);
	break;
	default:
	error_illegal_ident(); }
}

// RLC E End
void Parser::parse_main_action_6192() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xCB03);
	break;
	default:
	error_illegal_ident(); }
}

// RLC H End
void Parser::parse_main_action_6193() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xCB04);
	break;
	default:
	error_illegal_ident(); }
}

// RLC L End
void Parser::parse_main_action_6194() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xCB05);
	break;
	default:
	error_illegal_ident(); }
}

// RLC Dot L LParen HL RParen End | RLC Dot LIS LParen HL RParen End
void Parser::parse_main_action_6195() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xCB06);
	break;
	default:
	error_illegal_ident(); }
}

// RLC Dot L LParen IX RParen End | RLC Dot LIS LParen IX RParen End
void Parser::parse_main_action_6196() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xDDCB0006);
	break;
	default:
	error_illegal_ident(); }
}

// RLC Dot L LParen IX expr RParen End | RLC Dot LIS LParen IX expr RParen End
void Parser::parse_main_action_6197() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xDDCB06);
	break;
	default:
	error_illegal_ident(); }
}

// RLC Dot L LParen IY RParen End | RLC Dot LIS LParen IY RParen End
void Parser::parse_main_action_6198() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xFDCB0006);
	break;
	default:
	error_illegal_ident(); }
}

// RLC Dot L LParen IY expr RParen End | RLC Dot LIS LParen IY expr RParen End
void Parser::parse_main_action_6199() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xFDCB06);
	break;
	default:
	error_illegal_ident(); }
}

// RLC Dot S LParen HL RParen End | RLC Dot SIL LParen HL RParen End
void Parser::parse_main_action_6200() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xCB06);
	break;
	default:
	error_illegal_ident(); }
}

// RLC Dot S LParen IX RParen End | RLC Dot SIL LParen IX RParen End
void Parser::parse_main_action_6201() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xDDCB0006);
	break;
	default:
	error_illegal_ident(); }
}

// RLC Dot S LParen IX expr RParen End | RLC Dot SIL LParen IX expr RParen End
void Parser::parse_main_action_6202() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xDDCB06);
	break;
	default:
	error_illegal_ident(); }
}

// RLC Dot S LParen IY RParen End | RLC Dot SIL LParen IY RParen End
void Parser::parse_main_action_6203() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xFDCB0006);
	break;
	default:
	error_illegal_ident(); }
}

// RLC Dot S LParen IY expr RParen End | RLC Dot SIL LParen IY expr RParen End
void Parser::parse_main_action_6204() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xFDCB06);
	break;
	default:
	error_illegal_ident(); }
}

// RLC End | RLCA End
void Parser::parse_main_action_6205() {
	add_opcode(0x07);
}

// RLC LParen AHL RParen End
void Parser::parse_main_action_6206() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xCB06);
	break;
	default:
	error_illegal_ident(); }
}

// RLC LParen AIX RParen End
void Parser::parse_main_action_6207() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xDDCB0006);
	break;
	default:
	error_illegal_ident(); }
}

// RLC LParen AIX expr RParen End
void Parser::parse_main_action_6208() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xDDCB06);
	break;
	default:
	error_illegal_ident(); }
}

// RLC LParen AIY RParen End
void Parser::parse_main_action_6209() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xFDCB0006);
	break;
	default:
	error_illegal_ident(); }
}

// RLC LParen AIY expr RParen End
void Parser::parse_main_action_6210() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xFDCB06);
	break;
	default:
	error_illegal_ident(); }
}

// RLC LParen HL RParen End
void Parser::parse_main_action_6211() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xCB06);
	break;
	default:
	error_illegal_ident(); }
}

// RLC LParen IX RParen End
void Parser::parse_main_action_6212() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xDDCB0006);
	break;
	default:
	error_illegal_ident(); }
}

// RLC LParen IX expr RParen End
void Parser::parse_main_action_6213() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx(0xDDCB06);
	break;
	default:
	error_illegal_ident(); }
}

// RLC LParen IY RParen End
void Parser::parse_main_action_6214() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xFDCB0006);
	break;
	default:
	error_illegal_ident(); }
}

// RLC LParen IY expr RParen End
void Parser::parse_main_action_6215() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx(0xFDCB06);
	break;
	default:
	error_illegal_ident(); }
}

// RLC LParen PHL RParen End
void Parser::parse_main_action_6216() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xCB06);
	break;
	default:
	error_illegal_ident(); }
}

// RLC LParen PIX RParen End
void Parser::parse_main_action_6217() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xDDCB0006);
	break;
	default:
	error_illegal_ident(); }
}

// RLC LParen PIX expr RParen End
void Parser::parse_main_action_6218() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xDDCB06);
	break;
	default:
	error_illegal_ident(); }
}

// RLC LParen PIY RParen End
void Parser::parse_main_action_6219() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xFDCB0006);
	break;
	default:
	error_illegal_ident(); }
}

// RLC LParen PIY expr RParen End
void Parser::parse_main_action_6220() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xFDCB06);
	break;
	default:
	error_illegal_ident(); }
}

// RLC LParen XHL RParen End
void Parser::parse_main_action_6221() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xCB06);
	break;
	default:
	error_illegal_ident(); }
}

// RLC LParen XIX RParen End
void Parser::parse_main_action_6222() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xDDCB0006);
	break;
	default:
	error_illegal_ident(); }
}

// RLC LParen XIX expr RParen End
void Parser::parse_main_action_6223() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xDDCB06);
	break;
	default:
	error_illegal_ident(); }
}

// RLC LParen XIY RParen End
void Parser::parse_main_action_6224() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xFDCB0006);
	break;
	default:
	error_illegal_ident(); }
}

// RLC LParen XIY expr RParen End
void Parser::parse_main_action_6225() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xFDCB06);
	break;
	default:
	error_illegal_ident(); }
}

// RLC LParen YHL RParen End
void Parser::parse_main_action_6226() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xCB06);
	break;
	default:
	error_illegal_ident(); }
}

// RLC LParen YIX RParen End
void Parser::parse_main_action_6227() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xDDCB0006);
	break;
	default:
	error_illegal_ident(); }
}

// RLC LParen YIX expr RParen End
void Parser::parse_main_action_6228() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xDDCB06);
	break;
	default:
	error_illegal_ident(); }
}

// RLC LParen YIY RParen End
void Parser::parse_main_action_6229() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xFDCB0006);
	break;
	default:
	error_illegal_ident(); }
}

// RLC LParen YIY expr RParen End
void Parser::parse_main_action_6230() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xFDCB06);
	break;
	default:
	error_illegal_ident(); }
}

// RLC LParen ZHL RParen End
void Parser::parse_main_action_6231() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xCB06);
	break;
	default:
	error_illegal_ident(); }
}

// RLC LParen ZIX RParen End
void Parser::parse_main_action_6232() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xDDCB0006);
	break;
	default:
	error_illegal_ident(); }
}

// RLC LParen ZIX expr RParen End
void Parser::parse_main_action_6233() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xDDCB06);
	break;
	default:
	error_illegal_ident(); }
}

// RLC LParen ZIY RParen End
void Parser::parse_main_action_6234() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xFDCB0006);
	break;
	default:
	error_illegal_ident(); }
}

// RLC LParen ZIY expr RParen End
void Parser::parse_main_action_6235() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xFDCB06);
	break;
	default:
	error_illegal_ident(); }
}

// RLC const_expr Comma BCDE End
void Parser::parse_main_action_6236() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 1: case 2: case 4: case 8: break;
	default: error_int_range(const_expr); }
	add_opcode(0xDD00+((const_expr==1?0x48:const_expr==2?0x49:const_expr==4?0x4B:0x4F)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// RLC const_expr Comma JKHL End
void Parser::parse_main_action_6237() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 1: case 2: case 4: case 8: break;
	default: error_int_range(const_expr); }
	add_opcode(0xFD00+((const_expr==1?0x48:const_expr==2?0x49:const_expr==4?0x4B:0x4F)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// RLD End
void Parser::parse_main_action_6238() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_call_function("__z80asm__rld");
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xED6F);
	break;
	default:
	error_illegal_ident(); }
}

// RLD LParen AHL RParen End
void Parser::parse_main_action_6239() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xED6F);
	break;
	default:
	error_illegal_ident(); }
}

// RLD LParen PHL RParen End
void Parser::parse_main_action_6240() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xED6F);
	break;
	default:
	error_illegal_ident(); }
}

// RLD LParen XHL RParen End
void Parser::parse_main_action_6241() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xED6F);
	break;
	default:
	error_illegal_ident(); }
}

// RLD LParen YHL RParen End
void Parser::parse_main_action_6242() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xED6F);
	break;
	default:
	error_illegal_ident(); }
}

// RLD LParen ZHL RParen End
void Parser::parse_main_action_6243() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xED6F);
	break;
	default:
	error_illegal_ident(); }
}

// RR A End
void Parser::parse_main_action_6244() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xCB1F);
	break;
	default:
	error_illegal_ident(); }
}

// RR B End
void Parser::parse_main_action_6245() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xCB18);
	break;
	default:
	error_illegal_ident(); }
}

// RR BC End
void Parser::parse_main_action_6246() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: 
	add_call_function("__z80asm__rr_bc");
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x63);
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xCB18);
	add_opcode(0xCB19);
	break;
	default:
	error_illegal_ident(); }
}

// RR C End
void Parser::parse_main_action_6247() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xCB19);
	break;
	default:
	error_illegal_ident(); }
}

// RR D End
void Parser::parse_main_action_6248() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xCB1A);
	break;
	default:
	error_illegal_ident(); }
}

// RR DE End
void Parser::parse_main_action_6249() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: 
	add_call_function("__z80asm__rr_de");
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xCB1A);
	add_opcode(0xCB1B);
	break;
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFB);
	break;
	default:
	error_illegal_ident(); }
}

// RR E End
void Parser::parse_main_action_6250() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xCB1B);
	break;
	default:
	error_illegal_ident(); }
}

// RR H End
void Parser::parse_main_action_6251() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xCB1C);
	break;
	default:
	error_illegal_ident(); }
}

// RR HL End
void Parser::parse_main_action_6252() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: 
	add_call_function("__z80asm__rr_hl");
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xCB1C);
	add_opcode(0xCB1D);
	break;
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFC);
	break;
	default:
	error_illegal_ident(); }
}

// RR IX End
void Parser::parse_main_action_6253() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDDFC);
	break;
	default:
	error_illegal_ident(); }
}

// RR IY End
void Parser::parse_main_action_6254() {
	switch (g_args.cpu()) {
	case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFDFC);
	break;
	default:
	error_illegal_ident(); }
}

// RR L End
void Parser::parse_main_action_6255() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xCB1D);
	break;
	default:
	error_illegal_ident(); }
}

// RR Dot L LParen HL RParen End | RR Dot LIS LParen HL RParen End
void Parser::parse_main_action_6256() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xCB1E);
	break;
	default:
	error_illegal_ident(); }
}

// RR Dot L LParen IX RParen End | RR Dot LIS LParen IX RParen End
void Parser::parse_main_action_6257() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xDDCB001E);
	break;
	default:
	error_illegal_ident(); }
}

// RR Dot L LParen IX expr RParen End | RR Dot LIS LParen IX expr RParen End
void Parser::parse_main_action_6258() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xDDCB1E);
	break;
	default:
	error_illegal_ident(); }
}

// RR Dot L LParen IY RParen End | RR Dot LIS LParen IY RParen End
void Parser::parse_main_action_6259() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xFDCB001E);
	break;
	default:
	error_illegal_ident(); }
}

// RR Dot L LParen IY expr RParen End | RR Dot LIS LParen IY expr RParen End
void Parser::parse_main_action_6260() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xFDCB1E);
	break;
	default:
	error_illegal_ident(); }
}

// RR Dot S LParen HL RParen End | RR Dot SIL LParen HL RParen End
void Parser::parse_main_action_6261() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xCB1E);
	break;
	default:
	error_illegal_ident(); }
}

// RR Dot S LParen IX RParen End | RR Dot SIL LParen IX RParen End
void Parser::parse_main_action_6262() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xDDCB001E);
	break;
	default:
	error_illegal_ident(); }
}

// RR Dot S LParen IX expr RParen End | RR Dot SIL LParen IX expr RParen End
void Parser::parse_main_action_6263() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xDDCB1E);
	break;
	default:
	error_illegal_ident(); }
}

// RR Dot S LParen IY RParen End | RR Dot SIL LParen IY RParen End
void Parser::parse_main_action_6264() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xFDCB001E);
	break;
	default:
	error_illegal_ident(); }
}

// RR Dot S LParen IY expr RParen End | RR Dot SIL LParen IY expr RParen End
void Parser::parse_main_action_6265() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xFDCB1E);
	break;
	default:
	error_illegal_ident(); }
}

// RR LParen AHL RParen End
void Parser::parse_main_action_6266() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xCB1E);
	break;
	default:
	error_illegal_ident(); }
}

// RR LParen AIX RParen End
void Parser::parse_main_action_6267() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xDDCB001E);
	break;
	default:
	error_illegal_ident(); }
}

// RR LParen AIX expr RParen End
void Parser::parse_main_action_6268() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xDDCB1E);
	break;
	default:
	error_illegal_ident(); }
}

// RR LParen AIY RParen End
void Parser::parse_main_action_6269() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xFDCB001E);
	break;
	default:
	error_illegal_ident(); }
}

// RR LParen AIY expr RParen End
void Parser::parse_main_action_6270() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xFDCB1E);
	break;
	default:
	error_illegal_ident(); }
}

// RR LParen HL RParen End
void Parser::parse_main_action_6271() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xCB1E);
	break;
	default:
	error_illegal_ident(); }
}

// RR LParen IX RParen End
void Parser::parse_main_action_6272() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xDDCB001E);
	break;
	default:
	error_illegal_ident(); }
}

// RR LParen IX expr RParen End
void Parser::parse_main_action_6273() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx(0xDDCB1E);
	break;
	default:
	error_illegal_ident(); }
}

// RR LParen IY RParen End
void Parser::parse_main_action_6274() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xFDCB001E);
	break;
	default:
	error_illegal_ident(); }
}

// RR LParen IY expr RParen End
void Parser::parse_main_action_6275() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx(0xFDCB1E);
	break;
	default:
	error_illegal_ident(); }
}

// RR LParen PHL RParen End
void Parser::parse_main_action_6276() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xCB1E);
	break;
	default:
	error_illegal_ident(); }
}

// RR LParen PIX RParen End
void Parser::parse_main_action_6277() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xDDCB001E);
	break;
	default:
	error_illegal_ident(); }
}

// RR LParen PIX expr RParen End
void Parser::parse_main_action_6278() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xDDCB1E);
	break;
	default:
	error_illegal_ident(); }
}

// RR LParen PIY RParen End
void Parser::parse_main_action_6279() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xFDCB001E);
	break;
	default:
	error_illegal_ident(); }
}

// RR LParen PIY expr RParen End
void Parser::parse_main_action_6280() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xFDCB1E);
	break;
	default:
	error_illegal_ident(); }
}

// RR LParen XHL RParen End
void Parser::parse_main_action_6281() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xCB1E);
	break;
	default:
	error_illegal_ident(); }
}

// RR LParen XIX RParen End
void Parser::parse_main_action_6282() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xDDCB001E);
	break;
	default:
	error_illegal_ident(); }
}

// RR LParen XIX expr RParen End
void Parser::parse_main_action_6283() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xDDCB1E);
	break;
	default:
	error_illegal_ident(); }
}

// RR LParen XIY RParen End
void Parser::parse_main_action_6284() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xFDCB001E);
	break;
	default:
	error_illegal_ident(); }
}

// RR LParen XIY expr RParen End
void Parser::parse_main_action_6285() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xFDCB1E);
	break;
	default:
	error_illegal_ident(); }
}

// RR LParen YHL RParen End
void Parser::parse_main_action_6286() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xCB1E);
	break;
	default:
	error_illegal_ident(); }
}

// RR LParen YIX RParen End
void Parser::parse_main_action_6287() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xDDCB001E);
	break;
	default:
	error_illegal_ident(); }
}

// RR LParen YIX expr RParen End
void Parser::parse_main_action_6288() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xDDCB1E);
	break;
	default:
	error_illegal_ident(); }
}

// RR LParen YIY RParen End
void Parser::parse_main_action_6289() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xFDCB001E);
	break;
	default:
	error_illegal_ident(); }
}

// RR LParen YIY expr RParen End
void Parser::parse_main_action_6290() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xFDCB1E);
	break;
	default:
	error_illegal_ident(); }
}

// RR LParen ZHL RParen End
void Parser::parse_main_action_6291() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xCB1E);
	break;
	default:
	error_illegal_ident(); }
}

// RR LParen ZIX RParen End
void Parser::parse_main_action_6292() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xDDCB001E);
	break;
	default:
	error_illegal_ident(); }
}

// RR LParen ZIX expr RParen End
void Parser::parse_main_action_6293() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xDDCB1E);
	break;
	default:
	error_illegal_ident(); }
}

// RR LParen ZIY RParen End
void Parser::parse_main_action_6294() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xFDCB001E);
	break;
	default:
	error_illegal_ident(); }
}

// RR LParen ZIY expr RParen End
void Parser::parse_main_action_6295() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xFDCB1E);
	break;
	default:
	error_illegal_ident(); }
}

// RR const_expr Comma BCDE End
void Parser::parse_main_action_6296() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 1: case 2: case 4: case 8: break;
	default: error_int_range(const_expr); }
	add_opcode(0xDD00+((const_expr==1?0x78:const_expr==2?0x79:const_expr==4?0x7B:0x7F)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// RR const_expr Comma JKHL End
void Parser::parse_main_action_6297() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 1: case 2: case 4: case 8: break;
	default: error_int_range(const_expr); }
	add_opcode(0xFD00+((const_expr==1?0x78:const_expr==2?0x79:const_expr==4?0x7B:0x7F)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// RRB A Comma BCDE End
void Parser::parse_main_action_6298() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDD7F);
	break;
	default:
	error_illegal_ident(); }
}

// RRB A Comma JKHL End
void Parser::parse_main_action_6299() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFD7F);
	break;
	default:
	error_illegal_ident(); }
}

// RRC A End
void Parser::parse_main_action_6300() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xCB0F);
	break;
	default:
	error_illegal_ident(); }
}

// RRC B End
void Parser::parse_main_action_6301() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xCB08);
	break;
	default:
	error_illegal_ident(); }
}

// RRC BC End
void Parser::parse_main_action_6302() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x61);
	break;
	default:
	error_illegal_ident(); }
}

// RRC C End
void Parser::parse_main_action_6303() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xCB09);
	break;
	default:
	error_illegal_ident(); }
}

// RRC D End
void Parser::parse_main_action_6304() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xCB0A);
	break;
	default:
	error_illegal_ident(); }
}

// RRC DE End
void Parser::parse_main_action_6305() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x51);
	break;
	default:
	error_illegal_ident(); }
}

// RRC E End
void Parser::parse_main_action_6306() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xCB0B);
	break;
	default:
	error_illegal_ident(); }
}

// RRC H End
void Parser::parse_main_action_6307() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xCB0C);
	break;
	default:
	error_illegal_ident(); }
}

// RRC L End
void Parser::parse_main_action_6308() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xCB0D);
	break;
	default:
	error_illegal_ident(); }
}

// RRC Dot L LParen HL RParen End | RRC Dot LIS LParen HL RParen End
void Parser::parse_main_action_6309() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xCB0E);
	break;
	default:
	error_illegal_ident(); }
}

// RRC Dot L LParen IX RParen End | RRC Dot LIS LParen IX RParen End
void Parser::parse_main_action_6310() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xDDCB000E);
	break;
	default:
	error_illegal_ident(); }
}

// RRC Dot L LParen IX expr RParen End | RRC Dot LIS LParen IX expr RParen End
void Parser::parse_main_action_6311() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xDDCB0E);
	break;
	default:
	error_illegal_ident(); }
}

// RRC Dot L LParen IY RParen End | RRC Dot LIS LParen IY RParen End
void Parser::parse_main_action_6312() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xFDCB000E);
	break;
	default:
	error_illegal_ident(); }
}

// RRC Dot L LParen IY expr RParen End | RRC Dot LIS LParen IY expr RParen End
void Parser::parse_main_action_6313() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xFDCB0E);
	break;
	default:
	error_illegal_ident(); }
}

// RRC Dot S LParen HL RParen End | RRC Dot SIL LParen HL RParen End
void Parser::parse_main_action_6314() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xCB0E);
	break;
	default:
	error_illegal_ident(); }
}

// RRC Dot S LParen IX RParen End | RRC Dot SIL LParen IX RParen End
void Parser::parse_main_action_6315() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xDDCB000E);
	break;
	default:
	error_illegal_ident(); }
}

// RRC Dot S LParen IX expr RParen End | RRC Dot SIL LParen IX expr RParen End
void Parser::parse_main_action_6316() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xDDCB0E);
	break;
	default:
	error_illegal_ident(); }
}

// RRC Dot S LParen IY RParen End | RRC Dot SIL LParen IY RParen End
void Parser::parse_main_action_6317() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xFDCB000E);
	break;
	default:
	error_illegal_ident(); }
}

// RRC Dot S LParen IY expr RParen End | RRC Dot SIL LParen IY expr RParen End
void Parser::parse_main_action_6318() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xFDCB0E);
	break;
	default:
	error_illegal_ident(); }
}

// RRC End | RRCA End
void Parser::parse_main_action_6319() {
	add_opcode(0x0F);
}

// RRC LParen AHL RParen End
void Parser::parse_main_action_6320() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xCB0E);
	break;
	default:
	error_illegal_ident(); }
}

// RRC LParen AIX RParen End
void Parser::parse_main_action_6321() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xDDCB000E);
	break;
	default:
	error_illegal_ident(); }
}

// RRC LParen AIX expr RParen End
void Parser::parse_main_action_6322() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xDDCB0E);
	break;
	default:
	error_illegal_ident(); }
}

// RRC LParen AIY RParen End
void Parser::parse_main_action_6323() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xFDCB000E);
	break;
	default:
	error_illegal_ident(); }
}

// RRC LParen AIY expr RParen End
void Parser::parse_main_action_6324() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xFDCB0E);
	break;
	default:
	error_illegal_ident(); }
}

// RRC LParen HL RParen End
void Parser::parse_main_action_6325() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xCB0E);
	break;
	default:
	error_illegal_ident(); }
}

// RRC LParen IX RParen End
void Parser::parse_main_action_6326() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xDDCB000E);
	break;
	default:
	error_illegal_ident(); }
}

// RRC LParen IX expr RParen End
void Parser::parse_main_action_6327() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx(0xDDCB0E);
	break;
	default:
	error_illegal_ident(); }
}

// RRC LParen IY RParen End
void Parser::parse_main_action_6328() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xFDCB000E);
	break;
	default:
	error_illegal_ident(); }
}

// RRC LParen IY expr RParen End
void Parser::parse_main_action_6329() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx(0xFDCB0E);
	break;
	default:
	error_illegal_ident(); }
}

// RRC LParen PHL RParen End
void Parser::parse_main_action_6330() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xCB0E);
	break;
	default:
	error_illegal_ident(); }
}

// RRC LParen PIX RParen End
void Parser::parse_main_action_6331() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xDDCB000E);
	break;
	default:
	error_illegal_ident(); }
}

// RRC LParen PIX expr RParen End
void Parser::parse_main_action_6332() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xDDCB0E);
	break;
	default:
	error_illegal_ident(); }
}

// RRC LParen PIY RParen End
void Parser::parse_main_action_6333() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xFDCB000E);
	break;
	default:
	error_illegal_ident(); }
}

// RRC LParen PIY expr RParen End
void Parser::parse_main_action_6334() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xFDCB0E);
	break;
	default:
	error_illegal_ident(); }
}

// RRC LParen XHL RParen End
void Parser::parse_main_action_6335() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xCB0E);
	break;
	default:
	error_illegal_ident(); }
}

// RRC LParen XIX RParen End
void Parser::parse_main_action_6336() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xDDCB000E);
	break;
	default:
	error_illegal_ident(); }
}

// RRC LParen XIX expr RParen End
void Parser::parse_main_action_6337() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xDDCB0E);
	break;
	default:
	error_illegal_ident(); }
}

// RRC LParen XIY RParen End
void Parser::parse_main_action_6338() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xFDCB000E);
	break;
	default:
	error_illegal_ident(); }
}

// RRC LParen XIY expr RParen End
void Parser::parse_main_action_6339() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xFDCB0E);
	break;
	default:
	error_illegal_ident(); }
}

// RRC LParen YHL RParen End
void Parser::parse_main_action_6340() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xCB0E);
	break;
	default:
	error_illegal_ident(); }
}

// RRC LParen YIX RParen End
void Parser::parse_main_action_6341() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xDDCB000E);
	break;
	default:
	error_illegal_ident(); }
}

// RRC LParen YIX expr RParen End
void Parser::parse_main_action_6342() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xDDCB0E);
	break;
	default:
	error_illegal_ident(); }
}

// RRC LParen YIY RParen End
void Parser::parse_main_action_6343() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xFDCB000E);
	break;
	default:
	error_illegal_ident(); }
}

// RRC LParen YIY expr RParen End
void Parser::parse_main_action_6344() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xFDCB0E);
	break;
	default:
	error_illegal_ident(); }
}

// RRC LParen ZHL RParen End
void Parser::parse_main_action_6345() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xCB0E);
	break;
	default:
	error_illegal_ident(); }
}

// RRC LParen ZIX RParen End
void Parser::parse_main_action_6346() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xDDCB000E);
	break;
	default:
	error_illegal_ident(); }
}

// RRC LParen ZIX expr RParen End
void Parser::parse_main_action_6347() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xDDCB0E);
	break;
	default:
	error_illegal_ident(); }
}

// RRC LParen ZIY RParen End
void Parser::parse_main_action_6348() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xFDCB000E);
	break;
	default:
	error_illegal_ident(); }
}

// RRC LParen ZIY expr RParen End
void Parser::parse_main_action_6349() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xFDCB0E);
	break;
	default:
	error_illegal_ident(); }
}

// RRC const_expr Comma BCDE End
void Parser::parse_main_action_6350() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 1: case 2: case 4: case 8: break;
	default: error_int_range(const_expr); }
	add_opcode(0xDD00+((const_expr==1?0x58:const_expr==2?0x59:const_expr==4?0x5B:0x5F)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// RRC const_expr Comma JKHL End
void Parser::parse_main_action_6351() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 1: case 2: case 4: case 8: break;
	default: error_int_range(const_expr); }
	add_opcode(0xFD00+((const_expr==1?0x58:const_expr==2?0x59:const_expr==4?0x5B:0x5F)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// RRD End
void Parser::parse_main_action_6352() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_GBZ80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: 
	add_call_function("__z80asm__rrd");
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xED67);
	break;
	default:
	error_illegal_ident(); }
}

// RRD LParen AHL RParen End
void Parser::parse_main_action_6353() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xED67);
	break;
	default:
	error_illegal_ident(); }
}

// RRD LParen PHL RParen End
void Parser::parse_main_action_6354() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xED67);
	break;
	default:
	error_illegal_ident(); }
}

// RRD LParen XHL RParen End
void Parser::parse_main_action_6355() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xED67);
	break;
	default:
	error_illegal_ident(); }
}

// RRD LParen YHL RParen End
void Parser::parse_main_action_6356() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xED67);
	break;
	default:
	error_illegal_ident(); }
}

// RRD LParen ZHL RParen End
void Parser::parse_main_action_6357() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xED67);
	break;
	default:
	error_illegal_ident(); }
}

// RSMIX End
void Parser::parse_main_action_6358() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xED7E);
	break;
	default:
	error_illegal_ident(); }
}

// RST V Comma const_expr End
void Parser::parse_main_action_6359() {
	switch (g_args.cpu()) {
	case CPU_8085: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 64: break;
	default: error_int_range(const_expr); }
	add_opcode(0x8B+((const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// RST Dot L const_expr End | RST Dot LIS const_expr End
void Parser::parse_main_action_6360() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	add_restart();
	break;
	default:
	error_illegal_ident(); }
}

// RST Dot S const_expr End | RST Dot SIL const_expr End
void Parser::parse_main_action_6361() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	add_restart();
	break;
	default:
	error_illegal_ident(); }
}

// RST const_expr End
void Parser::parse_main_action_6362() {
	warn_if_expr_in_parens();
	add_restart();
}

// SBB A End | SBC A Comma A End | SBC A End
void Parser::parse_main_action_6363() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F9F);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x9F);
	break;
	default:
	error_illegal_ident(); }
}

// SBB B End | SBC A Comma B End | SBC B End
void Parser::parse_main_action_6364() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F98);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x98);
	break;
	default:
	error_illegal_ident(); }
}

// SBB C End | SBC A Comma C End | SBC C End
void Parser::parse_main_action_6365() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F99);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x99);
	break;
	default:
	error_illegal_ident(); }
}

// SBB D End | SBC A Comma D End | SBC D End
void Parser::parse_main_action_6366() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F9A);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x9A);
	break;
	default:
	error_illegal_ident(); }
}

// SBB E End | SBC A Comma E End | SBC E End
void Parser::parse_main_action_6367() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F9B);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x9B);
	break;
	default:
	error_illegal_ident(); }
}

// SBB H End | SBC A Comma H End | SBC H End
void Parser::parse_main_action_6368() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F9C);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x9C);
	break;
	default:
	error_illegal_ident(); }
}

// SBB L End | SBC A Comma L End | SBC L End
void Parser::parse_main_action_6369() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F9D);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x9D);
	break;
	default:
	error_illegal_ident(); }
}

// SBB M End | SBC A Comma LParen HL RParen End | SBC LParen HL RParen End
void Parser::parse_main_action_6370() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F9E);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x9E);
	break;
	default:
	error_illegal_ident(); }
}

// SBC A Comma IXH End | SBC IXH End
void Parser::parse_main_action_6371() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDD9C);
	break;
	default:
	error_illegal_ident(); }
}

// SBC A Comma IXL End | SBC IXL End
void Parser::parse_main_action_6372() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDD9D);
	break;
	default:
	error_illegal_ident(); }
}

// SBC A Comma IYH End | SBC IYH End
void Parser::parse_main_action_6373() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFD9C);
	break;
	default:
	error_illegal_ident(); }
}

// SBC A Comma IYL End | SBC IYL End
void Parser::parse_main_action_6374() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFD9D);
	break;
	default:
	error_illegal_ident(); }
}

// SBC A Comma LParen AHL RParen End | SBC LParen AHL RParen End
void Parser::parse_main_action_6375() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0x9E);
	break;
	default:
	error_illegal_ident(); }
}

// SBC A Comma LParen AIX RParen End | SBC LParen AIX RParen End
void Parser::parse_main_action_6376() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xDD9E00);
	break;
	default:
	error_illegal_ident(); }
}

// SBC A Comma LParen AIX expr RParen End | SBC LParen AIX expr RParen End
void Parser::parse_main_action_6377() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xDD9E);
	break;
	default:
	error_illegal_ident(); }
}

// SBC A Comma LParen AIY RParen End | SBC LParen AIY RParen End
void Parser::parse_main_action_6378() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xFD9E00);
	break;
	default:
	error_illegal_ident(); }
}

// SBC A Comma LParen AIY expr RParen End | SBC LParen AIY expr RParen End
void Parser::parse_main_action_6379() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xFD9E);
	break;
	default:
	error_illegal_ident(); }
}

// SBC A Comma LParen HL Minus RParen End | SBC LParen HL Minus RParen End
void Parser::parse_main_action_6380() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F9E);
	add_opcode(0x2B);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x9E);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// SBC A Comma LParen HL Plus RParen End | SBC LParen HL Plus RParen End
void Parser::parse_main_action_6381() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F9E);
	add_opcode(0x23);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x9E);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// SBC A Comma LParen IX RParen End | SBC LParen IX RParen End
void Parser::parse_main_action_6382() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xDD9E00);
	break;
	default:
	error_illegal_ident(); }
}

// SBC A Comma LParen IX expr RParen End | SBC LParen IX expr RParen End
void Parser::parse_main_action_6383() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx(0xDD9E);
	break;
	default:
	error_illegal_ident(); }
}

// SBC A Comma LParen IY RParen End | SBC LParen IY RParen End
void Parser::parse_main_action_6384() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xFD9E00);
	break;
	default:
	error_illegal_ident(); }
}

// SBC A Comma LParen IY expr RParen End | SBC LParen IY expr RParen End
void Parser::parse_main_action_6385() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx(0xFD9E);
	break;
	default:
	error_illegal_ident(); }
}

// SBC A Comma LParen PHL RParen End | SBC LParen PHL RParen End
void Parser::parse_main_action_6386() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0x9E);
	break;
	default:
	error_illegal_ident(); }
}

// SBC A Comma LParen PIX RParen End | SBC LParen PIX RParen End
void Parser::parse_main_action_6387() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xDD9E00);
	break;
	default:
	error_illegal_ident(); }
}

// SBC A Comma LParen PIX expr RParen End | SBC LParen PIX expr RParen End
void Parser::parse_main_action_6388() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xDD9E);
	break;
	default:
	error_illegal_ident(); }
}

// SBC A Comma LParen PIY RParen End | SBC LParen PIY RParen End
void Parser::parse_main_action_6389() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xFD9E00);
	break;
	default:
	error_illegal_ident(); }
}

// SBC A Comma LParen PIY expr RParen End | SBC LParen PIY expr RParen End
void Parser::parse_main_action_6390() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xFD9E);
	break;
	default:
	error_illegal_ident(); }
}

// SBC A Comma LParen XHL RParen End | SBC LParen XHL RParen End
void Parser::parse_main_action_6391() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0x9E);
	break;
	default:
	error_illegal_ident(); }
}

// SBC A Comma LParen XIX RParen End | SBC LParen XIX RParen End
void Parser::parse_main_action_6392() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xDD9E00);
	break;
	default:
	error_illegal_ident(); }
}

// SBC A Comma LParen XIX expr RParen End | SBC LParen XIX expr RParen End
void Parser::parse_main_action_6393() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xDD9E);
	break;
	default:
	error_illegal_ident(); }
}

// SBC A Comma LParen XIY RParen End | SBC LParen XIY RParen End
void Parser::parse_main_action_6394() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xFD9E00);
	break;
	default:
	error_illegal_ident(); }
}

// SBC A Comma LParen XIY expr RParen End | SBC LParen XIY expr RParen End
void Parser::parse_main_action_6395() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xFD9E);
	break;
	default:
	error_illegal_ident(); }
}

// SBC A Comma LParen YHL RParen End | SBC LParen YHL RParen End
void Parser::parse_main_action_6396() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0x9E);
	break;
	default:
	error_illegal_ident(); }
}

// SBC A Comma LParen YIX RParen End | SBC LParen YIX RParen End
void Parser::parse_main_action_6397() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xDD9E00);
	break;
	default:
	error_illegal_ident(); }
}

// SBC A Comma LParen YIX expr RParen End | SBC LParen YIX expr RParen End
void Parser::parse_main_action_6398() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xDD9E);
	break;
	default:
	error_illegal_ident(); }
}

// SBC A Comma LParen YIY RParen End | SBC LParen YIY RParen End
void Parser::parse_main_action_6399() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xFD9E00);
	break;
	default:
	error_illegal_ident(); }
}

// SBC A Comma LParen YIY expr RParen End | SBC LParen YIY expr RParen End
void Parser::parse_main_action_6400() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xFD9E);
	break;
	default:
	error_illegal_ident(); }
}

// SBC A Comma LParen ZHL RParen End | SBC LParen ZHL RParen End
void Parser::parse_main_action_6401() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0x9E);
	break;
	default:
	error_illegal_ident(); }
}

// SBC A Comma LParen ZIX RParen End | SBC LParen ZIX RParen End
void Parser::parse_main_action_6402() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xDD9E00);
	break;
	default:
	error_illegal_ident(); }
}

// SBC A Comma LParen ZIX expr RParen End | SBC LParen ZIX expr RParen End
void Parser::parse_main_action_6403() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xDD9E);
	break;
	default:
	error_illegal_ident(); }
}

// SBC A Comma LParen ZIY RParen End | SBC LParen ZIY RParen End
void Parser::parse_main_action_6404() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xFD9E00);
	break;
	default:
	error_illegal_ident(); }
}

// SBC A Comma LParen ZIY expr RParen End | SBC LParen ZIY expr RParen End
void Parser::parse_main_action_6405() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xFD9E);
	break;
	default:
	error_illegal_ident(); }
}

// SBC A Comma expr End | SBC expr End | SBI expr End
void Parser::parse_main_action_6406() {
	warn_if_expr_in_parens();
	add_opcode_n(0xDE);
}

// SBC AHL Comma BC End
void Parser::parse_main_action_6407() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xED42);
	break;
	default:
	error_illegal_ident(); }
}

// SBC AHL Comma DE End
void Parser::parse_main_action_6408() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xED52);
	break;
	default:
	error_illegal_ident(); }
}

// SBC AHL Comma HL End
void Parser::parse_main_action_6409() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xED62);
	break;
	default:
	error_illegal_ident(); }
}

// SBC AHL Comma SP End
void Parser::parse_main_action_6410() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xED72);
	break;
	default:
	error_illegal_ident(); }
}

// SBC HL Comma BC End
void Parser::parse_main_action_6411() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_GBZ80: 
	add_call_function("__z80asm__sbc_hl_bc");
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xED42);
	break;
	default:
	error_illegal_ident(); }
}

// SBC HL Comma DE End
void Parser::parse_main_action_6412() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_GBZ80: 
	add_call_function("__z80asm__sbc_hl_de");
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xED52);
	break;
	default:
	error_illegal_ident(); }
}

// SBC HL Comma HL End
void Parser::parse_main_action_6413() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_GBZ80: 
	add_call_function("__z80asm__sbc_hl_hl");
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xED62);
	break;
	default:
	error_illegal_ident(); }
}

// SBC HL Comma SP End
void Parser::parse_main_action_6414() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_GBZ80: 
	add_call_function("__z80asm__sbc_hl_sp");
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xED72);
	break;
	default:
	error_illegal_ident(); }
}

// SBC XHL Comma BC End
void Parser::parse_main_action_6415() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xED42);
	break;
	default:
	error_illegal_ident(); }
}

// SBC XHL Comma DE End
void Parser::parse_main_action_6416() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xED52);
	break;
	default:
	error_illegal_ident(); }
}

// SBC XHL Comma HL End
void Parser::parse_main_action_6417() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xED62);
	break;
	default:
	error_illegal_ident(); }
}

// SBC XHL Comma SP End
void Parser::parse_main_action_6418() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xED72);
	break;
	default:
	error_illegal_ident(); }
}

// SBC YHL Comma BC End
void Parser::parse_main_action_6419() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xED42);
	break;
	default:
	error_illegal_ident(); }
}

// SBC YHL Comma DE End
void Parser::parse_main_action_6420() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xED52);
	break;
	default:
	error_illegal_ident(); }
}

// SBC YHL Comma HL End
void Parser::parse_main_action_6421() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xED62);
	break;
	default:
	error_illegal_ident(); }
}

// SBC YHL Comma SP End
void Parser::parse_main_action_6422() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xED72);
	break;
	default:
	error_illegal_ident(); }
}

// SBC ZHL Comma BC End
void Parser::parse_main_action_6423() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xED42);
	break;
	default:
	error_illegal_ident(); }
}

// SBC ZHL Comma DE End
void Parser::parse_main_action_6424() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xED52);
	break;
	default:
	error_illegal_ident(); }
}

// SBC ZHL Comma HL End
void Parser::parse_main_action_6425() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xED62);
	break;
	default:
	error_illegal_ident(); }
}

// SBC ZHL Comma SP End
void Parser::parse_main_action_6426() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xED72);
	break;
	default:
	error_illegal_ident(); }
}

// SBC Dot L A Comma LParen HL Minus RParen End | SBC Dot L LParen HL Minus RParen End | SBC Dot LIS A Comma LParen HL Minus RParen End | SBC Dot LIS LParen HL Minus RParen End
void Parser::parse_main_action_6427() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x9E);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// SBC Dot L A Comma LParen HL Plus RParen End | SBC Dot L LParen HL Plus RParen End | SBC Dot LIS A Comma LParen HL Plus RParen End | SBC Dot LIS LParen HL Plus RParen End
void Parser::parse_main_action_6428() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x9E);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// SBC Dot L A Comma LParen HL RParen End | SBC Dot L LParen HL RParen End | SBC Dot LIS A Comma LParen HL RParen End | SBC Dot LIS LParen HL RParen End
void Parser::parse_main_action_6429() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x9E);
	break;
	default:
	error_illegal_ident(); }
}

// SBC Dot L A Comma LParen IX RParen End | SBC Dot L LParen IX RParen End | SBC Dot LIS A Comma LParen IX RParen End | SBC Dot LIS LParen IX RParen End
void Parser::parse_main_action_6430() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xDD9E00);
	break;
	default:
	error_illegal_ident(); }
}

// SBC Dot L A Comma LParen IX expr RParen End | SBC Dot L LParen IX expr RParen End | SBC Dot LIS A Comma LParen IX expr RParen End | SBC Dot LIS LParen IX expr RParen End
void Parser::parse_main_action_6431() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xDD9E);
	break;
	default:
	error_illegal_ident(); }
}

// SBC Dot L A Comma LParen IY RParen End | SBC Dot L LParen IY RParen End | SBC Dot LIS A Comma LParen IY RParen End | SBC Dot LIS LParen IY RParen End
void Parser::parse_main_action_6432() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xFD9E00);
	break;
	default:
	error_illegal_ident(); }
}

// SBC Dot L A Comma LParen IY expr RParen End | SBC Dot L LParen IY expr RParen End | SBC Dot LIS A Comma LParen IY expr RParen End | SBC Dot LIS LParen IY expr RParen End
void Parser::parse_main_action_6433() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xFD9E);
	break;
	default:
	error_illegal_ident(); }
}

// SBC Dot L HL Comma BC End | SBC Dot LIS HL Comma BC End
void Parser::parse_main_action_6434() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xED42);
	break;
	default:
	error_illegal_ident(); }
}

// SBC Dot L HL Comma DE End | SBC Dot LIS HL Comma DE End
void Parser::parse_main_action_6435() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xED52);
	break;
	default:
	error_illegal_ident(); }
}

// SBC Dot L HL Comma HL End | SBC Dot LIS HL Comma HL End
void Parser::parse_main_action_6436() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xED62);
	break;
	default:
	error_illegal_ident(); }
}

// SBC Dot L HL Comma SP End | SBC Dot LIS HL Comma SP End
void Parser::parse_main_action_6437() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xED72);
	break;
	default:
	error_illegal_ident(); }
}

// SBC Dot S A Comma LParen HL Minus RParen End | SBC Dot S LParen HL Minus RParen End | SBC Dot SIL A Comma LParen HL Minus RParen End | SBC Dot SIL LParen HL Minus RParen End
void Parser::parse_main_action_6438() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x9E);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// SBC Dot S A Comma LParen HL Plus RParen End | SBC Dot S LParen HL Plus RParen End | SBC Dot SIL A Comma LParen HL Plus RParen End | SBC Dot SIL LParen HL Plus RParen End
void Parser::parse_main_action_6439() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x9E);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// SBC Dot S A Comma LParen HL RParen End | SBC Dot S LParen HL RParen End | SBC Dot SIL A Comma LParen HL RParen End | SBC Dot SIL LParen HL RParen End
void Parser::parse_main_action_6440() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x9E);
	break;
	default:
	error_illegal_ident(); }
}

// SBC Dot S A Comma LParen IX RParen End | SBC Dot S LParen IX RParen End | SBC Dot SIL A Comma LParen IX RParen End | SBC Dot SIL LParen IX RParen End
void Parser::parse_main_action_6441() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xDD9E00);
	break;
	default:
	error_illegal_ident(); }
}

// SBC Dot S A Comma LParen IX expr RParen End | SBC Dot S LParen IX expr RParen End | SBC Dot SIL A Comma LParen IX expr RParen End | SBC Dot SIL LParen IX expr RParen End
void Parser::parse_main_action_6442() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xDD9E);
	break;
	default:
	error_illegal_ident(); }
}

// SBC Dot S A Comma LParen IY RParen End | SBC Dot S LParen IY RParen End | SBC Dot SIL A Comma LParen IY RParen End | SBC Dot SIL LParen IY RParen End
void Parser::parse_main_action_6443() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xFD9E00);
	break;
	default:
	error_illegal_ident(); }
}

// SBC Dot S A Comma LParen IY expr RParen End | SBC Dot S LParen IY expr RParen End | SBC Dot SIL A Comma LParen IY expr RParen End | SBC Dot SIL LParen IY expr RParen End
void Parser::parse_main_action_6444() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xFD9E);
	break;
	default:
	error_illegal_ident(); }
}

// SBC Dot S HL Comma BC End | SBC Dot SIL HL Comma BC End
void Parser::parse_main_action_6445() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xED42);
	break;
	default:
	error_illegal_ident(); }
}

// SBC Dot S HL Comma DE End | SBC Dot SIL HL Comma DE End
void Parser::parse_main_action_6446() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xED52);
	break;
	default:
	error_illegal_ident(); }
}

// SBC Dot S HL Comma HL End | SBC Dot SIL HL Comma HL End
void Parser::parse_main_action_6447() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xED62);
	break;
	default:
	error_illegal_ident(); }
}

// SBC Dot S HL Comma SP End | SBC Dot SIL HL Comma SP End
void Parser::parse_main_action_6448() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xED72);
	break;
	default:
	error_illegal_ident(); }
}

// SBOX A End
void Parser::parse_main_action_6449() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xED02);
	break;
	default:
	error_illegal_ident(); }
}

// SCF End | STC End
void Parser::parse_main_action_6450() {
	add_opcode(0x37);
}

// SECTION
void Parser::parse_main_action_6451() {
	while (!m_line.at_end()) m_line.next();
}

// SET Dot L const_expr Comma LParen HL RParen End | SET Dot LIS const_expr Comma LParen HL RParen End
void Parser::parse_main_action_6452() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCBC6+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// SET Dot L const_expr Comma LParen IX RParen End | SET Dot LIS const_expr Comma LParen IX RParen End
void Parser::parse_main_action_6453() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xDDCB00C6+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// SET Dot L const_expr Comma LParen IX expr RParen End | SET Dot LIS const_expr Comma LParen IX expr RParen End
void Parser::parse_main_action_6454() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xDDCBC6+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// SET Dot L const_expr Comma LParen IY RParen End | SET Dot LIS const_expr Comma LParen IY RParen End
void Parser::parse_main_action_6455() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xFDCB00C6+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// SET Dot L const_expr Comma LParen IY expr RParen End | SET Dot LIS const_expr Comma LParen IY expr RParen End
void Parser::parse_main_action_6456() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xFDCBC6+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// SET Dot S const_expr Comma LParen HL RParen End | SET Dot SIL const_expr Comma LParen HL RParen End
void Parser::parse_main_action_6457() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCBC6+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// SET Dot S const_expr Comma LParen IX RParen End | SET Dot SIL const_expr Comma LParen IX RParen End
void Parser::parse_main_action_6458() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xDDCB00C6+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// SET Dot S const_expr Comma LParen IX expr RParen End | SET Dot SIL const_expr Comma LParen IX expr RParen End
void Parser::parse_main_action_6459() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xDDCBC6+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// SET Dot S const_expr Comma LParen IY RParen End | SET Dot SIL const_expr Comma LParen IY RParen End
void Parser::parse_main_action_6460() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xFDCB00C6+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// SET Dot S const_expr Comma LParen IY expr RParen End | SET Dot SIL const_expr Comma LParen IY expr RParen End
void Parser::parse_main_action_6461() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xFDCBC6+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// SET const_expr Comma A End
void Parser::parse_main_action_6462() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCBC7+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// SET const_expr Comma B End
void Parser::parse_main_action_6463() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCBC0+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// SET const_expr Comma C End
void Parser::parse_main_action_6464() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCBC1+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// SET const_expr Comma D End
void Parser::parse_main_action_6465() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCBC2+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// SET const_expr Comma E End
void Parser::parse_main_action_6466() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCBC3+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// SET const_expr Comma H End
void Parser::parse_main_action_6467() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCBC4+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// SET const_expr Comma L End
void Parser::parse_main_action_6468() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCBC5+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// SET const_expr Comma LParen AHL RParen End
void Parser::parse_main_action_6469() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCBC6+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// SET const_expr Comma LParen AIX RParen End
void Parser::parse_main_action_6470() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xDDCB00C6+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// SET const_expr Comma LParen AIX expr RParen End
void Parser::parse_main_action_6471() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xDDCBC6+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// SET const_expr Comma LParen AIY RParen End
void Parser::parse_main_action_6472() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xFDCB00C6+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// SET const_expr Comma LParen AIY expr RParen End
void Parser::parse_main_action_6473() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x52);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xFDCBC6+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// SET const_expr Comma LParen HL RParen End
void Parser::parse_main_action_6474() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCBC6+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// SET const_expr Comma LParen IX RParen End
void Parser::parse_main_action_6475() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xDDCB00C6+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// SET const_expr Comma LParen IX expr RParen End
void Parser::parse_main_action_6476() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xDDCBC6+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// SET const_expr Comma LParen IY RParen End
void Parser::parse_main_action_6477() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xFDCB00C6+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// SET const_expr Comma LParen IY expr RParen End
void Parser::parse_main_action_6478() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xFDCBC6+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// SET const_expr Comma LParen PHL RParen End
void Parser::parse_main_action_6479() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x5B);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCBC6+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// SET const_expr Comma LParen PIX RParen End
void Parser::parse_main_action_6480() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x5B);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xDDCB00C6+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// SET const_expr Comma LParen PIX expr RParen End
void Parser::parse_main_action_6481() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x5B);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xDDCBC6+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// SET const_expr Comma LParen PIY RParen End
void Parser::parse_main_action_6482() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x5B);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xFDCB00C6+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// SET const_expr Comma LParen PIY expr RParen End
void Parser::parse_main_action_6483() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x5B);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xFDCBC6+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// SET const_expr Comma LParen XHL RParen End
void Parser::parse_main_action_6484() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x40);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCBC6+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// SET const_expr Comma LParen XIX RParen End
void Parser::parse_main_action_6485() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x40);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xDDCB00C6+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// SET const_expr Comma LParen XIX expr RParen End
void Parser::parse_main_action_6486() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x40);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xDDCBC6+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// SET const_expr Comma LParen XIY RParen End
void Parser::parse_main_action_6487() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x40);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xFDCB00C6+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// SET const_expr Comma LParen XIY expr RParen End
void Parser::parse_main_action_6488() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x40);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xFDCBC6+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// SET const_expr Comma LParen YHL RParen End
void Parser::parse_main_action_6489() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCBC6+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// SET const_expr Comma LParen YIX RParen End
void Parser::parse_main_action_6490() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xDDCB00C6+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// SET const_expr Comma LParen YIX expr RParen End
void Parser::parse_main_action_6491() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xDDCBC6+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// SET const_expr Comma LParen YIY RParen End
void Parser::parse_main_action_6492() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xFDCB00C6+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// SET const_expr Comma LParen YIY expr RParen End
void Parser::parse_main_action_6493() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x49);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xFDCBC6+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// SET const_expr Comma LParen ZHL RParen End
void Parser::parse_main_action_6494() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x7F);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xCBC6+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// SET const_expr Comma LParen ZIX RParen End
void Parser::parse_main_action_6495() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x7F);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xDDCB00C6+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// SET const_expr Comma LParen ZIX expr RParen End
void Parser::parse_main_action_6496() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x7F);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xDDCBC6+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// SET const_expr Comma LParen ZIY RParen End
void Parser::parse_main_action_6497() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x7F);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode(0xFDCB00C6+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// SET const_expr Comma LParen ZIY expr RParen End
void Parser::parse_main_action_6498() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	warn_if_expr_in_parens();
	add_opcode(0x7F);
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: break;
	default: error_int_range(const_expr); }
	add_opcode_idx(0xFDCBC6+((8*const_expr)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// SETAE End | STAE End
void Parser::parse_main_action_6499() {
	switch (g_args.cpu()) {
	case CPU_Z80N: 
	add_opcode(0xED95);
	break;
	default:
	error_illegal_ident(); }
}

// SETSYSP expr End
void Parser::parse_main_action_6500() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode_nn(0xEDB1, 0);
	break;
	default:
	error_illegal_ident(); }
}

// SETUSR End
void Parser::parse_main_action_6501() {
	switch (g_args.cpu()) {
	case CPU_R3K: 
	add_opcode(0xED6F);
	break;
	default:
	error_illegal_ident(); }
}

// SETUSRP expr End
void Parser::parse_main_action_6502() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	add_opcode_nn(0xEDB5, 0);
	break;
	default:
	error_illegal_ident(); }
}

// SHLD expr End
void Parser::parse_main_action_6503() {
	switch (g_args.cpu()) {
	case CPU_GBZ80: 
	warn_if_expr_in_parens();
	add_opcode(0xD5);
	add_opcode(0xE5);
	add_opcode(0x54);
	add_opcode(0x5D);
	add_opcode_nn(0x21, 0);
	add_opcode(0x73);
	add_opcode(0x23);
	add_opcode(0x72);
	add_opcode(0xE1);
	add_opcode(0xD1);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_opcode_nn(0x22, 0);
	break;
	default:
	error_illegal_ident(); }
}

// SIM End
void Parser::parse_main_action_6504() {
	switch (g_args.cpu()) {
	case CPU_8085: 
	add_opcode(0x30);
	break;
	default:
	error_illegal_ident(); }
}

// SLA A End
void Parser::parse_main_action_6505() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xCB27);
	break;
	default:
	error_illegal_ident(); }
}

// SLA B End
void Parser::parse_main_action_6506() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xCB20);
	break;
	default:
	error_illegal_ident(); }
}

// SLA C End
void Parser::parse_main_action_6507() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xCB21);
	break;
	default:
	error_illegal_ident(); }
}

// SLA D End
void Parser::parse_main_action_6508() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xCB22);
	break;
	default:
	error_illegal_ident(); }
}

// SLA E End
void Parser::parse_main_action_6509() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xCB23);
	break;
	default:
	error_illegal_ident(); }
}

// SLA H End
void Parser::parse_main_action_6510() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xCB24);
	break;
	default:
	error_illegal_ident(); }
}

// SLA L End
void Parser::parse_main_action_6511() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xCB25);
	break;
	default:
	error_illegal_ident(); }
}

// SLA Dot L LParen HL RParen End | SLA Dot LIS LParen HL RParen End
void Parser::parse_main_action_6512() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xCB26);
	break;
	default:
	error_illegal_ident(); }
}

// SLA Dot L LParen IX RParen End | SLA Dot LIS LParen IX RParen End
void Parser::parse_main_action_6513() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xDDCB0026);
	break;
	default:
	error_illegal_ident(); }
}

// SLA Dot L LParen IX expr RParen End | SLA Dot LIS LParen IX expr RParen End
void Parser::parse_main_action_6514() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xDDCB26);
	break;
	default:
	error_illegal_ident(); }
}

// SLA Dot L LParen IY RParen End | SLA Dot LIS LParen IY RParen End
void Parser::parse_main_action_6515() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xFDCB0026);
	break;
	default:
	error_illegal_ident(); }
}

// SLA Dot L LParen IY expr RParen End | SLA Dot LIS LParen IY expr RParen End
void Parser::parse_main_action_6516() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xFDCB26);
	break;
	default:
	error_illegal_ident(); }
}

// SLA Dot S LParen HL RParen End | SLA Dot SIL LParen HL RParen End
void Parser::parse_main_action_6517() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xCB26);
	break;
	default:
	error_illegal_ident(); }
}

// SLA Dot S LParen IX RParen End | SLA Dot SIL LParen IX RParen End
void Parser::parse_main_action_6518() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xDDCB0026);
	break;
	default:
	error_illegal_ident(); }
}

// SLA Dot S LParen IX expr RParen End | SLA Dot SIL LParen IX expr RParen End
void Parser::parse_main_action_6519() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xDDCB26);
	break;
	default:
	error_illegal_ident(); }
}

// SLA Dot S LParen IY RParen End | SLA Dot SIL LParen IY RParen End
void Parser::parse_main_action_6520() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xFDCB0026);
	break;
	default:
	error_illegal_ident(); }
}

// SLA Dot S LParen IY expr RParen End | SLA Dot SIL LParen IY expr RParen End
void Parser::parse_main_action_6521() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xFDCB26);
	break;
	default:
	error_illegal_ident(); }
}

// SLA LParen AHL RParen End
void Parser::parse_main_action_6522() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xCB26);
	break;
	default:
	error_illegal_ident(); }
}

// SLA LParen AIX RParen End
void Parser::parse_main_action_6523() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xDDCB0026);
	break;
	default:
	error_illegal_ident(); }
}

// SLA LParen AIX expr RParen End
void Parser::parse_main_action_6524() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xDDCB26);
	break;
	default:
	error_illegal_ident(); }
}

// SLA LParen AIY RParen End
void Parser::parse_main_action_6525() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xFDCB0026);
	break;
	default:
	error_illegal_ident(); }
}

// SLA LParen AIY expr RParen End
void Parser::parse_main_action_6526() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xFDCB26);
	break;
	default:
	error_illegal_ident(); }
}

// SLA LParen HL RParen End
void Parser::parse_main_action_6527() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xCB26);
	break;
	default:
	error_illegal_ident(); }
}

// SLA LParen IX RParen End
void Parser::parse_main_action_6528() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xDDCB0026);
	break;
	default:
	error_illegal_ident(); }
}

// SLA LParen IX expr RParen End
void Parser::parse_main_action_6529() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx(0xDDCB26);
	break;
	default:
	error_illegal_ident(); }
}

// SLA LParen IY RParen End
void Parser::parse_main_action_6530() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xFDCB0026);
	break;
	default:
	error_illegal_ident(); }
}

// SLA LParen IY expr RParen End
void Parser::parse_main_action_6531() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx(0xFDCB26);
	break;
	default:
	error_illegal_ident(); }
}

// SLA LParen PHL RParen End
void Parser::parse_main_action_6532() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xCB26);
	break;
	default:
	error_illegal_ident(); }
}

// SLA LParen PIX RParen End
void Parser::parse_main_action_6533() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xDDCB0026);
	break;
	default:
	error_illegal_ident(); }
}

// SLA LParen PIX expr RParen End
void Parser::parse_main_action_6534() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xDDCB26);
	break;
	default:
	error_illegal_ident(); }
}

// SLA LParen PIY RParen End
void Parser::parse_main_action_6535() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xFDCB0026);
	break;
	default:
	error_illegal_ident(); }
}

// SLA LParen PIY expr RParen End
void Parser::parse_main_action_6536() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xFDCB26);
	break;
	default:
	error_illegal_ident(); }
}

// SLA LParen XHL RParen End
void Parser::parse_main_action_6537() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xCB26);
	break;
	default:
	error_illegal_ident(); }
}

// SLA LParen XIX RParen End
void Parser::parse_main_action_6538() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xDDCB0026);
	break;
	default:
	error_illegal_ident(); }
}

// SLA LParen XIX expr RParen End
void Parser::parse_main_action_6539() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xDDCB26);
	break;
	default:
	error_illegal_ident(); }
}

// SLA LParen XIY RParen End
void Parser::parse_main_action_6540() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xFDCB0026);
	break;
	default:
	error_illegal_ident(); }
}

// SLA LParen XIY expr RParen End
void Parser::parse_main_action_6541() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xFDCB26);
	break;
	default:
	error_illegal_ident(); }
}

// SLA LParen YHL RParen End
void Parser::parse_main_action_6542() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xCB26);
	break;
	default:
	error_illegal_ident(); }
}

// SLA LParen YIX RParen End
void Parser::parse_main_action_6543() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xDDCB0026);
	break;
	default:
	error_illegal_ident(); }
}

// SLA LParen YIX expr RParen End
void Parser::parse_main_action_6544() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xDDCB26);
	break;
	default:
	error_illegal_ident(); }
}

// SLA LParen YIY RParen End
void Parser::parse_main_action_6545() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xFDCB0026);
	break;
	default:
	error_illegal_ident(); }
}

// SLA LParen YIY expr RParen End
void Parser::parse_main_action_6546() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xFDCB26);
	break;
	default:
	error_illegal_ident(); }
}

// SLA LParen ZHL RParen End
void Parser::parse_main_action_6547() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xCB26);
	break;
	default:
	error_illegal_ident(); }
}

// SLA LParen ZIX RParen End
void Parser::parse_main_action_6548() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xDDCB0026);
	break;
	default:
	error_illegal_ident(); }
}

// SLA LParen ZIX expr RParen End
void Parser::parse_main_action_6549() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xDDCB26);
	break;
	default:
	error_illegal_ident(); }
}

// SLA LParen ZIY RParen End
void Parser::parse_main_action_6550() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xFDCB0026);
	break;
	default:
	error_illegal_ident(); }
}

// SLA LParen ZIY expr RParen End
void Parser::parse_main_action_6551() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xFDCB26);
	break;
	default:
	error_illegal_ident(); }
}

// SLA const_expr Comma BCDE End
void Parser::parse_main_action_6552() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 1: case 2: case 4: break;
	default: error_int_range(const_expr); }
	add_opcode(0xDD00+((const_expr==1?0x88:const_expr==2?0x89:const_expr==4?0x8B:0x8F)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// SLA const_expr Comma JKHL End
void Parser::parse_main_action_6553() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 1: case 2: case 4: break;
	default: error_int_range(const_expr); }
	add_opcode(0xFD00+((const_expr==1?0x88:const_expr==2?0x89:const_expr==4?0x8B:0x8F)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// SLI A End | SLL A End | SLS A End
void Parser::parse_main_action_6554() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xCB37);
	break;
	default:
	error_illegal_ident(); }
}

// SLI B End | SLL B End | SLS B End
void Parser::parse_main_action_6555() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xCB30);
	break;
	default:
	error_illegal_ident(); }
}

// SLI C End | SLL C End | SLS C End
void Parser::parse_main_action_6556() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xCB31);
	break;
	default:
	error_illegal_ident(); }
}

// SLI D End | SLL D End | SLS D End
void Parser::parse_main_action_6557() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xCB32);
	break;
	default:
	error_illegal_ident(); }
}

// SLI E End | SLL E End | SLS E End
void Parser::parse_main_action_6558() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xCB33);
	break;
	default:
	error_illegal_ident(); }
}

// SLI H End | SLL H End | SLS H End
void Parser::parse_main_action_6559() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xCB34);
	break;
	default:
	error_illegal_ident(); }
}

// SLI L End | SLL L End | SLS L End
void Parser::parse_main_action_6560() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xCB35);
	break;
	default:
	error_illegal_ident(); }
}

// SLI LParen HL RParen End | SLL LParen HL RParen End | SLS LParen HL RParen End
void Parser::parse_main_action_6561() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xCB36);
	break;
	default:
	error_illegal_ident(); }
}

// SLI LParen IX RParen End | SLL LParen IX RParen End | SLS LParen IX RParen End
void Parser::parse_main_action_6562() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDDCB0036);
	break;
	default:
	error_illegal_ident(); }
}

// SLI LParen IX expr RParen End | SLL LParen IX expr RParen End | SLS LParen IX expr RParen End
void Parser::parse_main_action_6563() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xDDCB36);
	break;
	default:
	error_illegal_ident(); }
}

// SLI LParen IY RParen End | SLL LParen IY RParen End | SLS LParen IY RParen End
void Parser::parse_main_action_6564() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFDCB0036);
	break;
	default:
	error_illegal_ident(); }
}

// SLI LParen IY expr RParen End | SLL LParen IY expr RParen End | SLS LParen IY expr RParen End
void Parser::parse_main_action_6565() {
	switch (g_args.cpu()) {
	case CPU_Z80: case CPU_Z80N: 
	add_opcode_idx(0xFDCB36);
	break;
	default:
	error_illegal_ident(); }
}

// SLL const_expr Comma BCDE End
void Parser::parse_main_action_6566() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 1: case 2: case 4: break;
	default: error_int_range(const_expr); }
	add_opcode(0xDD00+((const_expr==1?0xA8:const_expr==2?0xA9:const_expr==4?0xAB:0xAF)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// SLL const_expr Comma JKHL End
void Parser::parse_main_action_6567() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 1: case 2: case 4: break;
	default: error_int_range(const_expr); }
	add_opcode(0xFD00+((const_expr==1?0xA8:const_expr==2?0xA9:const_expr==4?0xAB:0xAF)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// SLP End
void Parser::parse_main_action_6568() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
	add_opcode(0xED76);
	break;
	default:
	error_illegal_ident(); }
}

// SRA A End
void Parser::parse_main_action_6569() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xCB2F);
	break;
	default:
	error_illegal_ident(); }
}

// SRA B End
void Parser::parse_main_action_6570() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xCB28);
	break;
	default:
	error_illegal_ident(); }
}

// SRA BC End
void Parser::parse_main_action_6571() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: 
	add_call_function("__z80asm__sra_bc");
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xCB28);
	add_opcode(0xCB19);
	break;
	default:
	error_illegal_ident(); }
}

// SRA C End
void Parser::parse_main_action_6572() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xCB29);
	break;
	default:
	error_illegal_ident(); }
}

// SRA D End
void Parser::parse_main_action_6573() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xCB2A);
	break;
	default:
	error_illegal_ident(); }
}

// SRA DE End
void Parser::parse_main_action_6574() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: 
	add_call_function("__z80asm__sra_de");
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xCB2A);
	add_opcode(0xCB1B);
	break;
	default:
	error_illegal_ident(); }
}

// SRA E End
void Parser::parse_main_action_6575() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xCB2B);
	break;
	default:
	error_illegal_ident(); }
}

// SRA H End
void Parser::parse_main_action_6576() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xCB2C);
	break;
	default:
	error_illegal_ident(); }
}

// SRA L End
void Parser::parse_main_action_6577() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xCB2D);
	break;
	default:
	error_illegal_ident(); }
}

// SRA Dot L LParen HL RParen End | SRA Dot LIS LParen HL RParen End
void Parser::parse_main_action_6578() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xCB2E);
	break;
	default:
	error_illegal_ident(); }
}

// SRA Dot L LParen IX RParen End | SRA Dot LIS LParen IX RParen End
void Parser::parse_main_action_6579() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xDDCB002E);
	break;
	default:
	error_illegal_ident(); }
}

// SRA Dot L LParen IX expr RParen End | SRA Dot LIS LParen IX expr RParen End
void Parser::parse_main_action_6580() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xDDCB2E);
	break;
	default:
	error_illegal_ident(); }
}

// SRA Dot L LParen IY RParen End | SRA Dot LIS LParen IY RParen End
void Parser::parse_main_action_6581() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xFDCB002E);
	break;
	default:
	error_illegal_ident(); }
}

// SRA Dot L LParen IY expr RParen End | SRA Dot LIS LParen IY expr RParen End
void Parser::parse_main_action_6582() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xFDCB2E);
	break;
	default:
	error_illegal_ident(); }
}

// SRA Dot S LParen HL RParen End | SRA Dot SIL LParen HL RParen End
void Parser::parse_main_action_6583() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xCB2E);
	break;
	default:
	error_illegal_ident(); }
}

// SRA Dot S LParen IX RParen End | SRA Dot SIL LParen IX RParen End
void Parser::parse_main_action_6584() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xDDCB002E);
	break;
	default:
	error_illegal_ident(); }
}

// SRA Dot S LParen IX expr RParen End | SRA Dot SIL LParen IX expr RParen End
void Parser::parse_main_action_6585() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xDDCB2E);
	break;
	default:
	error_illegal_ident(); }
}

// SRA Dot S LParen IY RParen End | SRA Dot SIL LParen IY RParen End
void Parser::parse_main_action_6586() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xFDCB002E);
	break;
	default:
	error_illegal_ident(); }
}

// SRA Dot S LParen IY expr RParen End | SRA Dot SIL LParen IY expr RParen End
void Parser::parse_main_action_6587() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xFDCB2E);
	break;
	default:
	error_illegal_ident(); }
}

// SRA LParen AHL RParen End
void Parser::parse_main_action_6588() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xCB2E);
	break;
	default:
	error_illegal_ident(); }
}

// SRA LParen AIX RParen End
void Parser::parse_main_action_6589() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xDDCB002E);
	break;
	default:
	error_illegal_ident(); }
}

// SRA LParen AIX expr RParen End
void Parser::parse_main_action_6590() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xDDCB2E);
	break;
	default:
	error_illegal_ident(); }
}

// SRA LParen AIY RParen End
void Parser::parse_main_action_6591() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xFDCB002E);
	break;
	default:
	error_illegal_ident(); }
}

// SRA LParen AIY expr RParen End
void Parser::parse_main_action_6592() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xFDCB2E);
	break;
	default:
	error_illegal_ident(); }
}

// SRA LParen HL RParen End
void Parser::parse_main_action_6593() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xCB2E);
	break;
	default:
	error_illegal_ident(); }
}

// SRA LParen IX RParen End
void Parser::parse_main_action_6594() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xDDCB002E);
	break;
	default:
	error_illegal_ident(); }
}

// SRA LParen IX expr RParen End
void Parser::parse_main_action_6595() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx(0xDDCB2E);
	break;
	default:
	error_illegal_ident(); }
}

// SRA LParen IY RParen End
void Parser::parse_main_action_6596() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xFDCB002E);
	break;
	default:
	error_illegal_ident(); }
}

// SRA LParen IY expr RParen End
void Parser::parse_main_action_6597() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx(0xFDCB2E);
	break;
	default:
	error_illegal_ident(); }
}

// SRA LParen PHL RParen End
void Parser::parse_main_action_6598() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xCB2E);
	break;
	default:
	error_illegal_ident(); }
}

// SRA LParen PIX RParen End
void Parser::parse_main_action_6599() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xDDCB002E);
	break;
	default:
	error_illegal_ident(); }
}

// SRA LParen PIX expr RParen End
void Parser::parse_main_action_6600() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xDDCB2E);
	break;
	default:
	error_illegal_ident(); }
}

// SRA LParen PIY RParen End
void Parser::parse_main_action_6601() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xFDCB002E);
	break;
	default:
	error_illegal_ident(); }
}

// SRA LParen PIY expr RParen End
void Parser::parse_main_action_6602() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xFDCB2E);
	break;
	default:
	error_illegal_ident(); }
}

// SRA LParen XHL RParen End
void Parser::parse_main_action_6603() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xCB2E);
	break;
	default:
	error_illegal_ident(); }
}

// SRA LParen XIX RParen End
void Parser::parse_main_action_6604() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xDDCB002E);
	break;
	default:
	error_illegal_ident(); }
}

// SRA LParen XIX expr RParen End
void Parser::parse_main_action_6605() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xDDCB2E);
	break;
	default:
	error_illegal_ident(); }
}

// SRA LParen XIY RParen End
void Parser::parse_main_action_6606() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xFDCB002E);
	break;
	default:
	error_illegal_ident(); }
}

// SRA LParen XIY expr RParen End
void Parser::parse_main_action_6607() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xFDCB2E);
	break;
	default:
	error_illegal_ident(); }
}

// SRA LParen YHL RParen End
void Parser::parse_main_action_6608() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xCB2E);
	break;
	default:
	error_illegal_ident(); }
}

// SRA LParen YIX RParen End
void Parser::parse_main_action_6609() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xDDCB002E);
	break;
	default:
	error_illegal_ident(); }
}

// SRA LParen YIX expr RParen End
void Parser::parse_main_action_6610() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xDDCB2E);
	break;
	default:
	error_illegal_ident(); }
}

// SRA LParen YIY RParen End
void Parser::parse_main_action_6611() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xFDCB002E);
	break;
	default:
	error_illegal_ident(); }
}

// SRA LParen YIY expr RParen End
void Parser::parse_main_action_6612() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xFDCB2E);
	break;
	default:
	error_illegal_ident(); }
}

// SRA LParen ZHL RParen End
void Parser::parse_main_action_6613() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xCB2E);
	break;
	default:
	error_illegal_ident(); }
}

// SRA LParen ZIX RParen End
void Parser::parse_main_action_6614() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xDDCB002E);
	break;
	default:
	error_illegal_ident(); }
}

// SRA LParen ZIX expr RParen End
void Parser::parse_main_action_6615() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xDDCB2E);
	break;
	default:
	error_illegal_ident(); }
}

// SRA LParen ZIY RParen End
void Parser::parse_main_action_6616() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xFDCB002E);
	break;
	default:
	error_illegal_ident(); }
}

// SRA LParen ZIY expr RParen End
void Parser::parse_main_action_6617() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xFDCB2E);
	break;
	default:
	error_illegal_ident(); }
}

// SRA const_expr Comma BCDE End
void Parser::parse_main_action_6618() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 1: case 2: case 4: break;
	default: error_int_range(const_expr); }
	add_opcode(0xDD00+((const_expr==1?0x98:const_expr==2?0x99:const_expr==4?0x9B:0x9F)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// SRA const_expr Comma JKHL End
void Parser::parse_main_action_6619() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 1: case 2: case 4: break;
	default: error_int_range(const_expr); }
	add_opcode(0xFD00+((const_expr==1?0x98:const_expr==2?0x99:const_expr==4?0x9B:0x9F)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// SRET End | SYSRET End
void Parser::parse_main_action_6620() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xED83);
	break;
	default:
	error_illegal_ident(); }
}

// SRL A End
void Parser::parse_main_action_6621() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xCB3F);
	break;
	default:
	error_illegal_ident(); }
}

// SRL B End
void Parser::parse_main_action_6622() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xCB38);
	break;
	default:
	error_illegal_ident(); }
}

// SRL C End
void Parser::parse_main_action_6623() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xCB39);
	break;
	default:
	error_illegal_ident(); }
}

// SRL D End
void Parser::parse_main_action_6624() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xCB3A);
	break;
	default:
	error_illegal_ident(); }
}

// SRL E End
void Parser::parse_main_action_6625() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xCB3B);
	break;
	default:
	error_illegal_ident(); }
}

// SRL H End
void Parser::parse_main_action_6626() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xCB3C);
	break;
	default:
	error_illegal_ident(); }
}

// SRL L End
void Parser::parse_main_action_6627() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xCB3D);
	break;
	default:
	error_illegal_ident(); }
}

// SRL Dot L LParen HL RParen End | SRL Dot LIS LParen HL RParen End
void Parser::parse_main_action_6628() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xCB3E);
	break;
	default:
	error_illegal_ident(); }
}

// SRL Dot L LParen IX RParen End | SRL Dot LIS LParen IX RParen End
void Parser::parse_main_action_6629() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xDDCB003E);
	break;
	default:
	error_illegal_ident(); }
}

// SRL Dot L LParen IX expr RParen End | SRL Dot LIS LParen IX expr RParen End
void Parser::parse_main_action_6630() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xDDCB3E);
	break;
	default:
	error_illegal_ident(); }
}

// SRL Dot L LParen IY RParen End | SRL Dot LIS LParen IY RParen End
void Parser::parse_main_action_6631() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xFDCB003E);
	break;
	default:
	error_illegal_ident(); }
}

// SRL Dot L LParen IY expr RParen End | SRL Dot LIS LParen IY expr RParen End
void Parser::parse_main_action_6632() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xFDCB3E);
	break;
	default:
	error_illegal_ident(); }
}

// SRL Dot S LParen HL RParen End | SRL Dot SIL LParen HL RParen End
void Parser::parse_main_action_6633() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xCB3E);
	break;
	default:
	error_illegal_ident(); }
}

// SRL Dot S LParen IX RParen End | SRL Dot SIL LParen IX RParen End
void Parser::parse_main_action_6634() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xDDCB003E);
	break;
	default:
	error_illegal_ident(); }
}

// SRL Dot S LParen IX expr RParen End | SRL Dot SIL LParen IX expr RParen End
void Parser::parse_main_action_6635() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xDDCB3E);
	break;
	default:
	error_illegal_ident(); }
}

// SRL Dot S LParen IY RParen End | SRL Dot SIL LParen IY RParen End
void Parser::parse_main_action_6636() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xFDCB003E);
	break;
	default:
	error_illegal_ident(); }
}

// SRL Dot S LParen IY expr RParen End | SRL Dot SIL LParen IY expr RParen End
void Parser::parse_main_action_6637() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xFDCB3E);
	break;
	default:
	error_illegal_ident(); }
}

// SRL LParen AHL RParen End
void Parser::parse_main_action_6638() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xCB3E);
	break;
	default:
	error_illegal_ident(); }
}

// SRL LParen AIX RParen End
void Parser::parse_main_action_6639() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xDDCB003E);
	break;
	default:
	error_illegal_ident(); }
}

// SRL LParen AIX expr RParen End
void Parser::parse_main_action_6640() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xDDCB3E);
	break;
	default:
	error_illegal_ident(); }
}

// SRL LParen AIY RParen End
void Parser::parse_main_action_6641() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xFDCB003E);
	break;
	default:
	error_illegal_ident(); }
}

// SRL LParen AIY expr RParen End
void Parser::parse_main_action_6642() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xFDCB3E);
	break;
	default:
	error_illegal_ident(); }
}

// SRL LParen HL RParen End
void Parser::parse_main_action_6643() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xCB3E);
	break;
	default:
	error_illegal_ident(); }
}

// SRL LParen IX RParen End
void Parser::parse_main_action_6644() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xDDCB003E);
	break;
	default:
	error_illegal_ident(); }
}

// SRL LParen IX expr RParen End
void Parser::parse_main_action_6645() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx(0xDDCB3E);
	break;
	default:
	error_illegal_ident(); }
}

// SRL LParen IY RParen End
void Parser::parse_main_action_6646() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xFDCB003E);
	break;
	default:
	error_illegal_ident(); }
}

// SRL LParen IY expr RParen End
void Parser::parse_main_action_6647() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx(0xFDCB3E);
	break;
	default:
	error_illegal_ident(); }
}

// SRL LParen PHL RParen End
void Parser::parse_main_action_6648() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xCB3E);
	break;
	default:
	error_illegal_ident(); }
}

// SRL LParen PIX RParen End
void Parser::parse_main_action_6649() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xDDCB003E);
	break;
	default:
	error_illegal_ident(); }
}

// SRL LParen PIX expr RParen End
void Parser::parse_main_action_6650() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xDDCB3E);
	break;
	default:
	error_illegal_ident(); }
}

// SRL LParen PIY RParen End
void Parser::parse_main_action_6651() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xFDCB003E);
	break;
	default:
	error_illegal_ident(); }
}

// SRL LParen PIY expr RParen End
void Parser::parse_main_action_6652() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xFDCB3E);
	break;
	default:
	error_illegal_ident(); }
}

// SRL LParen XHL RParen End
void Parser::parse_main_action_6653() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xCB3E);
	break;
	default:
	error_illegal_ident(); }
}

// SRL LParen XIX RParen End
void Parser::parse_main_action_6654() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xDDCB003E);
	break;
	default:
	error_illegal_ident(); }
}

// SRL LParen XIX expr RParen End
void Parser::parse_main_action_6655() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xDDCB3E);
	break;
	default:
	error_illegal_ident(); }
}

// SRL LParen XIY RParen End
void Parser::parse_main_action_6656() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xFDCB003E);
	break;
	default:
	error_illegal_ident(); }
}

// SRL LParen XIY expr RParen End
void Parser::parse_main_action_6657() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xFDCB3E);
	break;
	default:
	error_illegal_ident(); }
}

// SRL LParen YHL RParen End
void Parser::parse_main_action_6658() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xCB3E);
	break;
	default:
	error_illegal_ident(); }
}

// SRL LParen YIX RParen End
void Parser::parse_main_action_6659() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xDDCB003E);
	break;
	default:
	error_illegal_ident(); }
}

// SRL LParen YIX expr RParen End
void Parser::parse_main_action_6660() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xDDCB3E);
	break;
	default:
	error_illegal_ident(); }
}

// SRL LParen YIY RParen End
void Parser::parse_main_action_6661() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xFDCB003E);
	break;
	default:
	error_illegal_ident(); }
}

// SRL LParen YIY expr RParen End
void Parser::parse_main_action_6662() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xFDCB3E);
	break;
	default:
	error_illegal_ident(); }
}

// SRL LParen ZHL RParen End
void Parser::parse_main_action_6663() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xCB3E);
	break;
	default:
	error_illegal_ident(); }
}

// SRL LParen ZIX RParen End
void Parser::parse_main_action_6664() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xDDCB003E);
	break;
	default:
	error_illegal_ident(); }
}

// SRL LParen ZIX expr RParen End
void Parser::parse_main_action_6665() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xDDCB3E);
	break;
	default:
	error_illegal_ident(); }
}

// SRL LParen ZIY RParen End
void Parser::parse_main_action_6666() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xFDCB003E);
	break;
	default:
	error_illegal_ident(); }
}

// SRL LParen ZIY expr RParen End
void Parser::parse_main_action_6667() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xFDCB3E);
	break;
	default:
	error_illegal_ident(); }
}

// SRL const_expr Comma BCDE End
void Parser::parse_main_action_6668() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 1: case 2: case 4: break;
	default: error_int_range(const_expr); }
	add_opcode(0xDD00+((const_expr==1?0xB8:const_expr==2?0xB9:const_expr==4?0xBB:0xBF)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// SRL const_expr Comma JKHL End
void Parser::parse_main_action_6669() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	warn_if_expr_in_parens();
	{
	int const_expr = -1;
	xassert(m_const_exprs.size() >= 1);
	const_expr = m_const_exprs.front();
	m_const_exprs.pop_front();
	m_exprs.pop_front();
	switch (const_expr) {
	case 1: case 2: case 4: break;
	default: error_int_range(const_expr); }
	add_opcode(0xFD00+((const_expr==1?0xB8:const_expr==2?0xB9:const_expr==4?0xBB:0xBF)));
	}
	break;
	default:
	error_illegal_ident(); }
}

// STA expr End
void Parser::parse_main_action_6670() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_opcode_nn(0x32, 0);
	break;
	case CPU_GBZ80: 
	warn_if_expr_in_parens();
	add_opcode_nn(0xEA, 0);
	break;
	default:
	error_illegal_ident(); }
}

// STMIX End
void Parser::parse_main_action_6671() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: 
	add_opcode(0xED7D);
	break;
	default:
	error_illegal_ident(); }
}

// STOP End
void Parser::parse_main_action_6672() {
	switch (g_args.cpu()) {
	case CPU_GBZ80: 
	add_opcode(0x1000);
	break;
	default:
	error_illegal_ident(); }
}

// SUB A Comma A End | SUB A End
void Parser::parse_main_action_6673() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F97);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x97);
	break;
	default:
	error_illegal_ident(); }
}

// SUB A Comma B End | SUB B End
void Parser::parse_main_action_6674() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F90);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x90);
	break;
	default:
	error_illegal_ident(); }
}

// SUB A Comma C End | SUB C End
void Parser::parse_main_action_6675() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F91);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x91);
	break;
	default:
	error_illegal_ident(); }
}

// SUB A Comma D End | SUB D End
void Parser::parse_main_action_6676() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F92);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x92);
	break;
	default:
	error_illegal_ident(); }
}

// SUB A Comma E End | SUB E End
void Parser::parse_main_action_6677() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F93);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x93);
	break;
	default:
	error_illegal_ident(); }
}

// SUB A Comma H End | SUB H End
void Parser::parse_main_action_6678() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F94);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x94);
	break;
	default:
	error_illegal_ident(); }
}

// SUB A Comma IXH End | SUB IXH End
void Parser::parse_main_action_6679() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDD94);
	break;
	default:
	error_illegal_ident(); }
}

// SUB A Comma IXL End | SUB IXL End
void Parser::parse_main_action_6680() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDD95);
	break;
	default:
	error_illegal_ident(); }
}

// SUB A Comma IYH End | SUB IYH End
void Parser::parse_main_action_6681() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFD94);
	break;
	default:
	error_illegal_ident(); }
}

// SUB A Comma IYL End | SUB IYL End
void Parser::parse_main_action_6682() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFD95);
	break;
	default:
	error_illegal_ident(); }
}

// SUB A Comma L End | SUB L End
void Parser::parse_main_action_6683() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F95);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x95);
	break;
	default:
	error_illegal_ident(); }
}

// SUB A Comma LParen AHL RParen End | SUB LParen AHL RParen End
void Parser::parse_main_action_6684() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0x96);
	break;
	default:
	error_illegal_ident(); }
}

// SUB A Comma LParen AIX RParen End | SUB LParen AIX RParen End
void Parser::parse_main_action_6685() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xDD9600);
	break;
	default:
	error_illegal_ident(); }
}

// SUB A Comma LParen AIX expr RParen End | SUB LParen AIX expr RParen End
void Parser::parse_main_action_6686() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xDD96);
	break;
	default:
	error_illegal_ident(); }
}

// SUB A Comma LParen AIY RParen End | SUB LParen AIY RParen End
void Parser::parse_main_action_6687() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xFD9600);
	break;
	default:
	error_illegal_ident(); }
}

// SUB A Comma LParen AIY expr RParen End | SUB LParen AIY expr RParen End
void Parser::parse_main_action_6688() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xFD96);
	break;
	default:
	error_illegal_ident(); }
}

// SUB A Comma LParen HL Minus RParen End | SUB LParen HL Minus RParen End
void Parser::parse_main_action_6689() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F96);
	add_opcode(0x2B);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x96);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// SUB A Comma LParen HL Plus RParen End | SUB LParen HL Plus RParen End
void Parser::parse_main_action_6690() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F96);
	add_opcode(0x23);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x96);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// SUB A Comma LParen HL RParen End | SUB M End | SUB LParen HL RParen End
void Parser::parse_main_action_6691() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7F96);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0x96);
	break;
	default:
	error_illegal_ident(); }
}

// SUB A Comma LParen IX RParen End | SUB LParen IX RParen End
void Parser::parse_main_action_6692() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xDD9600);
	break;
	default:
	error_illegal_ident(); }
}

// SUB A Comma LParen IX expr RParen End | SUB LParen IX expr RParen End
void Parser::parse_main_action_6693() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx(0xDD96);
	break;
	default:
	error_illegal_ident(); }
}

// SUB A Comma LParen IY RParen End | SUB LParen IY RParen End
void Parser::parse_main_action_6694() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xFD9600);
	break;
	default:
	error_illegal_ident(); }
}

// SUB A Comma LParen IY expr RParen End | SUB LParen IY expr RParen End
void Parser::parse_main_action_6695() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx(0xFD96);
	break;
	default:
	error_illegal_ident(); }
}

// SUB A Comma LParen PHL RParen End | SUB LParen PHL RParen End
void Parser::parse_main_action_6696() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0x96);
	break;
	default:
	error_illegal_ident(); }
}

// SUB A Comma LParen PIX RParen End | SUB LParen PIX RParen End
void Parser::parse_main_action_6697() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xDD9600);
	break;
	default:
	error_illegal_ident(); }
}

// SUB A Comma LParen PIX expr RParen End | SUB LParen PIX expr RParen End
void Parser::parse_main_action_6698() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xDD96);
	break;
	default:
	error_illegal_ident(); }
}

// SUB A Comma LParen PIY RParen End | SUB LParen PIY RParen End
void Parser::parse_main_action_6699() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xFD9600);
	break;
	default:
	error_illegal_ident(); }
}

// SUB A Comma LParen PIY expr RParen End | SUB LParen PIY expr RParen End
void Parser::parse_main_action_6700() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xFD96);
	break;
	default:
	error_illegal_ident(); }
}

// SUB A Comma LParen XHL RParen End | SUB LParen XHL RParen End
void Parser::parse_main_action_6701() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0x96);
	break;
	default:
	error_illegal_ident(); }
}

// SUB A Comma LParen XIX RParen End | SUB LParen XIX RParen End
void Parser::parse_main_action_6702() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xDD9600);
	break;
	default:
	error_illegal_ident(); }
}

// SUB A Comma LParen XIX expr RParen End | SUB LParen XIX expr RParen End
void Parser::parse_main_action_6703() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xDD96);
	break;
	default:
	error_illegal_ident(); }
}

// SUB A Comma LParen XIY RParen End | SUB LParen XIY RParen End
void Parser::parse_main_action_6704() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xFD9600);
	break;
	default:
	error_illegal_ident(); }
}

// SUB A Comma LParen XIY expr RParen End | SUB LParen XIY expr RParen End
void Parser::parse_main_action_6705() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xFD96);
	break;
	default:
	error_illegal_ident(); }
}

// SUB A Comma LParen YHL RParen End | SUB LParen YHL RParen End
void Parser::parse_main_action_6706() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0x96);
	break;
	default:
	error_illegal_ident(); }
}

// SUB A Comma LParen YIX RParen End | SUB LParen YIX RParen End
void Parser::parse_main_action_6707() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xDD9600);
	break;
	default:
	error_illegal_ident(); }
}

// SUB A Comma LParen YIX expr RParen End | SUB LParen YIX expr RParen End
void Parser::parse_main_action_6708() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xDD96);
	break;
	default:
	error_illegal_ident(); }
}

// SUB A Comma LParen YIY RParen End | SUB LParen YIY RParen End
void Parser::parse_main_action_6709() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xFD9600);
	break;
	default:
	error_illegal_ident(); }
}

// SUB A Comma LParen YIY expr RParen End | SUB LParen YIY expr RParen End
void Parser::parse_main_action_6710() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xFD96);
	break;
	default:
	error_illegal_ident(); }
}

// SUB A Comma LParen ZHL RParen End | SUB LParen ZHL RParen End
void Parser::parse_main_action_6711() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0x96);
	break;
	default:
	error_illegal_ident(); }
}

// SUB A Comma LParen ZIX RParen End | SUB LParen ZIX RParen End
void Parser::parse_main_action_6712() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xDD9600);
	break;
	default:
	error_illegal_ident(); }
}

// SUB A Comma LParen ZIX expr RParen End | SUB LParen ZIX expr RParen End
void Parser::parse_main_action_6713() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xDD96);
	break;
	default:
	error_illegal_ident(); }
}

// SUB A Comma LParen ZIY RParen End | SUB LParen ZIY RParen End
void Parser::parse_main_action_6714() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xFD9600);
	break;
	default:
	error_illegal_ident(); }
}

// SUB A Comma LParen ZIY expr RParen End | SUB LParen ZIY expr RParen End
void Parser::parse_main_action_6715() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xFD96);
	break;
	default:
	error_illegal_ident(); }
}

// SUB A Comma expr End | SUB expr End | SUI expr End
void Parser::parse_main_action_6716() {
	warn_if_expr_in_parens();
	add_opcode_n(0xD6);
}

// SUB HL Comma DE End
void Parser::parse_main_action_6717() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_call_function("__z80asm__sub_hl_de");
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x55);
	break;
	default:
	error_illegal_ident(); }
}

// SUB HL Comma HL End
void Parser::parse_main_action_6718() {
	add_call_function("__z80asm__sub_hl_hl");
}

// SUB HL Comma JK End
void Parser::parse_main_action_6719() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x45);
	break;
	default:
	error_illegal_ident(); }
}

// SUB HL Comma SP End
void Parser::parse_main_action_6720() {
	add_call_function("__z80asm__sub_hl_sp");
}

// SUB JKHL Comma BCDE End
void Parser::parse_main_action_6721() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xEDD6);
	break;
	default:
	error_illegal_ident(); }
}

// SUB Dot L A Comma LParen HL Minus RParen End | SUB Dot L LParen HL Minus RParen End | SUB Dot LIS A Comma LParen HL Minus RParen End | SUB Dot LIS LParen HL Minus RParen End
void Parser::parse_main_action_6722() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x96);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// SUB Dot L A Comma LParen HL Plus RParen End | SUB Dot L LParen HL Plus RParen End | SUB Dot LIS A Comma LParen HL Plus RParen End | SUB Dot LIS LParen HL Plus RParen End
void Parser::parse_main_action_6723() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x96);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// SUB Dot L A Comma LParen HL RParen End | SUB Dot L LParen HL RParen End | SUB Dot LIS A Comma LParen HL RParen End | SUB Dot LIS LParen HL RParen End
void Parser::parse_main_action_6724() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0x96);
	break;
	default:
	error_illegal_ident(); }
}

// SUB Dot L A Comma LParen IX RParen End | SUB Dot L LParen IX RParen End | SUB Dot LIS A Comma LParen IX RParen End | SUB Dot LIS LParen IX RParen End
void Parser::parse_main_action_6725() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xDD9600);
	break;
	default:
	error_illegal_ident(); }
}

// SUB Dot L A Comma LParen IX expr RParen End | SUB Dot L LParen IX expr RParen End | SUB Dot LIS A Comma LParen IX expr RParen End | SUB Dot LIS LParen IX expr RParen End
void Parser::parse_main_action_6726() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xDD96);
	break;
	default:
	error_illegal_ident(); }
}

// SUB Dot L A Comma LParen IY RParen End | SUB Dot L LParen IY RParen End | SUB Dot LIS A Comma LParen IY RParen End | SUB Dot LIS LParen IY RParen End
void Parser::parse_main_action_6727() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xFD9600);
	break;
	default:
	error_illegal_ident(); }
}

// SUB Dot L A Comma LParen IY expr RParen End | SUB Dot L LParen IY expr RParen End | SUB Dot LIS A Comma LParen IY expr RParen End | SUB Dot LIS LParen IY expr RParen End
void Parser::parse_main_action_6728() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xFD96);
	break;
	default:
	error_illegal_ident(); }
}

// SUB Dot S A Comma LParen HL Minus RParen End | SUB Dot S LParen HL Minus RParen End | SUB Dot SIL A Comma LParen HL Minus RParen End | SUB Dot SIL LParen HL Minus RParen End
void Parser::parse_main_action_6729() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x96);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// SUB Dot S A Comma LParen HL Plus RParen End | SUB Dot S LParen HL Plus RParen End | SUB Dot SIL A Comma LParen HL Plus RParen End | SUB Dot SIL LParen HL Plus RParen End
void Parser::parse_main_action_6730() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x96);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// SUB Dot S A Comma LParen HL RParen End | SUB Dot S LParen HL RParen End | SUB Dot SIL A Comma LParen HL RParen End | SUB Dot SIL LParen HL RParen End
void Parser::parse_main_action_6731() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0x96);
	break;
	default:
	error_illegal_ident(); }
}

// SUB Dot S A Comma LParen IX RParen End | SUB Dot S LParen IX RParen End | SUB Dot SIL A Comma LParen IX RParen End | SUB Dot SIL LParen IX RParen End
void Parser::parse_main_action_6732() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xDD9600);
	break;
	default:
	error_illegal_ident(); }
}

// SUB Dot S A Comma LParen IX expr RParen End | SUB Dot S LParen IX expr RParen End | SUB Dot SIL A Comma LParen IX expr RParen End | SUB Dot SIL LParen IX expr RParen End
void Parser::parse_main_action_6733() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xDD96);
	break;
	default:
	error_illegal_ident(); }
}

// SUB Dot S A Comma LParen IY RParen End | SUB Dot S LParen IY RParen End | SUB Dot SIL A Comma LParen IY RParen End | SUB Dot SIL LParen IY RParen End
void Parser::parse_main_action_6734() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xFD9600);
	break;
	default:
	error_illegal_ident(); }
}

// SUB Dot S A Comma LParen IY expr RParen End | SUB Dot S LParen IY expr RParen End | SUB Dot SIL A Comma LParen IY expr RParen End | SUB Dot SIL LParen IY expr RParen End
void Parser::parse_main_action_6735() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xFD96);
	break;
	default:
	error_illegal_ident(); }
}

// SURES End
void Parser::parse_main_action_6736() {
	switch (g_args.cpu()) {
	case CPU_R3K: 
	add_opcode(0xED7D);
	break;
	default:
	error_illegal_ident(); }
}

// SWAP A End
void Parser::parse_main_action_6737() {
	switch (g_args.cpu()) {
	case CPU_GBZ80: 
	add_opcode(0xCB37);
	break;
	case CPU_Z80N: 
	add_opcode(0xED23);
	break;
	default:
	error_illegal_ident(); }
}

// SWAP B End
void Parser::parse_main_action_6738() {
	switch (g_args.cpu()) {
	case CPU_GBZ80: 
	add_opcode(0xCB30);
	break;
	default:
	error_illegal_ident(); }
}

// SWAP C End
void Parser::parse_main_action_6739() {
	switch (g_args.cpu()) {
	case CPU_GBZ80: 
	add_opcode(0xCB31);
	break;
	default:
	error_illegal_ident(); }
}

// SWAP D End
void Parser::parse_main_action_6740() {
	switch (g_args.cpu()) {
	case CPU_GBZ80: 
	add_opcode(0xCB32);
	break;
	default:
	error_illegal_ident(); }
}

// SWAP E End
void Parser::parse_main_action_6741() {
	switch (g_args.cpu()) {
	case CPU_GBZ80: 
	add_opcode(0xCB33);
	break;
	default:
	error_illegal_ident(); }
}

// SWAP H End
void Parser::parse_main_action_6742() {
	switch (g_args.cpu()) {
	case CPU_GBZ80: 
	add_opcode(0xCB34);
	break;
	default:
	error_illegal_ident(); }
}

// SWAP L End
void Parser::parse_main_action_6743() {
	switch (g_args.cpu()) {
	case CPU_GBZ80: 
	add_opcode(0xCB35);
	break;
	default:
	error_illegal_ident(); }
}

// SWAP End | SWAPNIB End
void Parser::parse_main_action_6744() {
	switch (g_args.cpu()) {
	case CPU_Z80N: 
	add_opcode(0xED23);
	break;
	default:
	error_illegal_ident(); }
}

// SWAP LParen HL RParen End
void Parser::parse_main_action_6745() {
	switch (g_args.cpu()) {
	case CPU_GBZ80: 
	add_opcode(0xCB36);
	break;
	default:
	error_illegal_ident(); }
}

// SYSCALL End
void Parser::parse_main_action_6746() {
	switch (g_args.cpu()) {
	case CPU_R3K: 
	add_opcode(0xED75);
	break;
	default:
	error_illegal_ident(); }
}

// TEST A Comma A End | TEST A End | TST A Comma A End | TST A End
void Parser::parse_main_action_6747() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
	add_opcode(0xED3C);
	break;
	default:
	error_illegal_ident(); }
}

// TEST A Comma B End | TEST B End | TST A Comma B End | TST B End
void Parser::parse_main_action_6748() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
	add_opcode(0xED04);
	break;
	default:
	error_illegal_ident(); }
}

// TEST A Comma C End | TEST C End | TST A Comma C End | TST C End
void Parser::parse_main_action_6749() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
	add_opcode(0xED0C);
	break;
	default:
	error_illegal_ident(); }
}

// TEST A Comma D End | TEST D End | TST A Comma D End | TST D End
void Parser::parse_main_action_6750() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
	add_opcode(0xED14);
	break;
	default:
	error_illegal_ident(); }
}

// TEST A Comma E End | TEST E End | TST A Comma E End | TST E End
void Parser::parse_main_action_6751() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
	add_opcode(0xED1C);
	break;
	default:
	error_illegal_ident(); }
}

// TEST A Comma H End | TEST H End | TST A Comma H End | TST H End
void Parser::parse_main_action_6752() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
	add_opcode(0xED24);
	break;
	default:
	error_illegal_ident(); }
}

// TEST A Comma L End | TEST L End | TST A Comma L End | TST L End
void Parser::parse_main_action_6753() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
	add_opcode(0xED2C);
	break;
	default:
	error_illegal_ident(); }
}

// TEST A Comma LParen HL RParen End | TEST LParen HL RParen End | TST A Comma LParen HL RParen End | TST LParen HL RParen End
void Parser::parse_main_action_6754() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
	add_opcode(0xED34);
	break;
	default:
	error_illegal_ident(); }
}

// TEST A Comma expr End | TEST expr End | TST A Comma expr End | TST expr End
void Parser::parse_main_action_6755() {
	switch (g_args.cpu()) {
	case CPU_Z80N: 
	warn_if_expr_in_parens();
	add_opcode_n(0xED27);
	break;
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
	warn_if_expr_in_parens();
	add_opcode_n(0xED64);
	break;
	default:
	error_illegal_ident(); }
}

// TEST BC End
void Parser::parse_main_action_6756() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xED4C);
	break;
	default:
	error_illegal_ident(); }
}

// TEST BCDE End
void Parser::parse_main_action_6757() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDD5C);
	break;
	default:
	error_illegal_ident(); }
}

// TEST HL End
void Parser::parse_main_action_6758() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x4C);
	break;
	default:
	error_illegal_ident(); }
}

// TEST IX End
void Parser::parse_main_action_6759() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xDD4C);
	break;
	default:
	error_illegal_ident(); }
}

// TEST IY End
void Parser::parse_main_action_6760() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFD4C);
	break;
	default:
	error_illegal_ident(); }
}

// TEST JKHL End
void Parser::parse_main_action_6761() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xFD5C);
	break;
	default:
	error_illegal_ident(); }
}

// TEST Dot L A Comma LParen HL RParen End | TEST Dot L LParen HL RParen End | TEST Dot LIS A Comma LParen HL RParen End | TEST Dot LIS LParen HL RParen End | TST Dot L A Comma LParen HL RParen End | TST Dot L LParen HL RParen End | TST Dot LIS A Comma LParen HL RParen End | TST Dot LIS LParen HL RParen End
void Parser::parse_main_action_6762() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xED34);
	break;
	default:
	error_illegal_ident(); }
}

// TEST Dot S A Comma LParen HL RParen End | TEST Dot S LParen HL RParen End | TEST Dot SIL A Comma LParen HL RParen End | TEST Dot SIL LParen HL RParen End | TST Dot S A Comma LParen HL RParen End | TST Dot S LParen HL RParen End | TST Dot SIL A Comma LParen HL RParen End | TST Dot SIL LParen HL RParen End
void Parser::parse_main_action_6763() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xED34);
	break;
	default:
	error_illegal_ident(); }
}

// TRA End
void Parser::parse_main_action_6764() {
	switch (g_args.cpu()) {
	case CPU_KC160: case CPU_KC160_Z80: 
	add_opcode(0xED54);
	break;
	default:
	error_illegal_ident(); }
}

// TSTIO expr End
void Parser::parse_main_action_6765() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_Z180: 
	warn_if_expr_in_parens();
	add_opcode_n(0xED74);
	break;
	default:
	error_illegal_ident(); }
}

// UMA End
void Parser::parse_main_action_6766() {
	switch (g_args.cpu()) {
	case CPU_R3K: 
	add_opcode(0xEDC0);
	break;
	default:
	error_illegal_ident(); }
}

// UMS End
void Parser::parse_main_action_6767() {
	switch (g_args.cpu()) {
	case CPU_R3K: 
	add_opcode(0xEDC8);
	break;
	default:
	error_illegal_ident(); }
}

// XOR A Comma A End | XOR A End | XRA A End
void Parser::parse_main_action_6768() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7FAF);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xAF);
	break;
	default:
	error_illegal_ident(); }
}

// XOR A Comma B End | XOR B End | XRA B End
void Parser::parse_main_action_6769() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7FA8);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xA8);
	break;
	default:
	error_illegal_ident(); }
}

// XOR A Comma C End | XOR C End | XRA C End
void Parser::parse_main_action_6770() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7FA9);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xA9);
	break;
	default:
	error_illegal_ident(); }
}

// XOR A Comma D End | XOR D End | XRA D End
void Parser::parse_main_action_6771() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7FAA);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xAA);
	break;
	default:
	error_illegal_ident(); }
}

// XOR A Comma E End | XOR E End | XRA E End
void Parser::parse_main_action_6772() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7FAB);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xAB);
	break;
	default:
	error_illegal_ident(); }
}

// XOR A Comma H End | XOR H End | XRA H End
void Parser::parse_main_action_6773() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7FAC);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xAC);
	break;
	default:
	error_illegal_ident(); }
}

// XOR A Comma IXH End | XOR IXH End
void Parser::parse_main_action_6774() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDDAC);
	break;
	default:
	error_illegal_ident(); }
}

// XOR A Comma IXL End | XOR IXL End
void Parser::parse_main_action_6775() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xDDAD);
	break;
	default:
	error_illegal_ident(); }
}

// XOR A Comma IYH End | XOR IYH End
void Parser::parse_main_action_6776() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFDAC);
	break;
	default:
	error_illegal_ident(); }
}

// XOR A Comma IYL End | XOR IYL End
void Parser::parse_main_action_6777() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xFDAD);
	break;
	default:
	error_illegal_ident(); }
}

// XOR A Comma L End | XOR L End | XRA L End
void Parser::parse_main_action_6778() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7FAD);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xAD);
	break;
	default:
	error_illegal_ident(); }
}

// XOR A Comma LParen AHL RParen End | XOR LParen AHL RParen End
void Parser::parse_main_action_6779() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xAE);
	break;
	default:
	error_illegal_ident(); }
}

// XOR A Comma LParen AIX RParen End | XOR LParen AIX RParen End
void Parser::parse_main_action_6780() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xDDAE00);
	break;
	default:
	error_illegal_ident(); }
}

// XOR A Comma LParen AIX expr RParen End | XOR LParen AIX expr RParen End
void Parser::parse_main_action_6781() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xDDAE);
	break;
	default:
	error_illegal_ident(); }
}

// XOR A Comma LParen AIY RParen End | XOR LParen AIY RParen End
void Parser::parse_main_action_6782() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode(0xFDAE00);
	break;
	default:
	error_illegal_ident(); }
}

// XOR A Comma LParen AIY expr RParen End | XOR LParen AIY expr RParen End
void Parser::parse_main_action_6783() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x52);
	add_opcode_idx(0xFDAE);
	break;
	default:
	error_illegal_ident(); }
}

// XOR A Comma LParen HL Minus RParen End | XOR LParen HL Minus RParen End
void Parser::parse_main_action_6784() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7FAE);
	add_opcode(0x2B);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xAE);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// XOR A Comma LParen HL Plus RParen End | XOR LParen HL Plus RParen End
void Parser::parse_main_action_6785() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7FAE);
	add_opcode(0x23);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xAE);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// XOR A Comma LParen HL RParen End | XOR LParen HL RParen End | XRA M End
void Parser::parse_main_action_6786() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x7FAE);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xAE);
	break;
	default:
	error_illegal_ident(); }
}

// XOR A Comma LParen IX RParen End | XOR LParen IX RParen End
void Parser::parse_main_action_6787() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xDDAE00);
	break;
	default:
	error_illegal_ident(); }
}

// XOR A Comma LParen IX expr RParen End | XOR LParen IX expr RParen End
void Parser::parse_main_action_6788() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx(0xDDAE);
	break;
	default:
	error_illegal_ident(); }
}

// XOR A Comma LParen IY RParen End | XOR LParen IY RParen End
void Parser::parse_main_action_6789() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xFDAE00);
	break;
	default:
	error_illegal_ident(); }
}

// XOR A Comma LParen IY expr RParen End | XOR LParen IY expr RParen End
void Parser::parse_main_action_6790() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R4K: case CPU_R5K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode_idx(0xFDAE);
	break;
	default:
	error_illegal_ident(); }
}

// XOR A Comma LParen PHL RParen End | XOR LParen PHL RParen End
void Parser::parse_main_action_6791() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xAE);
	break;
	default:
	error_illegal_ident(); }
}

// XOR A Comma LParen PIX RParen End | XOR LParen PIX RParen End
void Parser::parse_main_action_6792() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xDDAE00);
	break;
	default:
	error_illegal_ident(); }
}

// XOR A Comma LParen PIX expr RParen End | XOR LParen PIX expr RParen End
void Parser::parse_main_action_6793() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xDDAE);
	break;
	default:
	error_illegal_ident(); }
}

// XOR A Comma LParen PIY RParen End | XOR LParen PIY RParen End
void Parser::parse_main_action_6794() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode(0xFDAE00);
	break;
	default:
	error_illegal_ident(); }
}

// XOR A Comma LParen PIY expr RParen End | XOR LParen PIY expr RParen End
void Parser::parse_main_action_6795() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x5B);
	add_opcode_idx(0xFDAE);
	break;
	default:
	error_illegal_ident(); }
}

// XOR A Comma LParen XHL RParen End | XOR LParen XHL RParen End
void Parser::parse_main_action_6796() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xAE);
	break;
	default:
	error_illegal_ident(); }
}

// XOR A Comma LParen XIX RParen End | XOR LParen XIX RParen End
void Parser::parse_main_action_6797() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xDDAE00);
	break;
	default:
	error_illegal_ident(); }
}

// XOR A Comma LParen XIX expr RParen End | XOR LParen XIX expr RParen End
void Parser::parse_main_action_6798() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xDDAE);
	break;
	default:
	error_illegal_ident(); }
}

// XOR A Comma LParen XIY RParen End | XOR LParen XIY RParen End
void Parser::parse_main_action_6799() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode(0xFDAE00);
	break;
	default:
	error_illegal_ident(); }
}

// XOR A Comma LParen XIY expr RParen End | XOR LParen XIY expr RParen End
void Parser::parse_main_action_6800() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x40);
	add_opcode_idx(0xFDAE);
	break;
	default:
	error_illegal_ident(); }
}

// XOR A Comma LParen YHL RParen End | XOR LParen YHL RParen End
void Parser::parse_main_action_6801() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xAE);
	break;
	default:
	error_illegal_ident(); }
}

// XOR A Comma LParen YIX RParen End | XOR LParen YIX RParen End
void Parser::parse_main_action_6802() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xDDAE00);
	break;
	default:
	error_illegal_ident(); }
}

// XOR A Comma LParen YIX expr RParen End | XOR LParen YIX expr RParen End
void Parser::parse_main_action_6803() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xDDAE);
	break;
	default:
	error_illegal_ident(); }
}

// XOR A Comma LParen YIY RParen End | XOR LParen YIY RParen End
void Parser::parse_main_action_6804() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode(0xFDAE00);
	break;
	default:
	error_illegal_ident(); }
}

// XOR A Comma LParen YIY expr RParen End | XOR LParen YIY expr RParen End
void Parser::parse_main_action_6805() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x49);
	add_opcode_idx(0xFDAE);
	break;
	default:
	error_illegal_ident(); }
}

// XOR A Comma LParen ZHL RParen End | XOR LParen ZHL RParen End
void Parser::parse_main_action_6806() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xAE);
	break;
	default:
	error_illegal_ident(); }
}

// XOR A Comma LParen ZIX RParen End | XOR LParen ZIX RParen End
void Parser::parse_main_action_6807() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xDDAE00);
	break;
	default:
	error_illegal_ident(); }
}

// XOR A Comma LParen ZIX expr RParen End | XOR LParen ZIX expr RParen End
void Parser::parse_main_action_6808() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xDDAE);
	break;
	default:
	error_illegal_ident(); }
}

// XOR A Comma LParen ZIY RParen End | XOR LParen ZIY RParen End
void Parser::parse_main_action_6809() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode(0xFDAE00);
	break;
	default:
	error_illegal_ident(); }
}

// XOR A Comma LParen ZIY expr RParen End | XOR LParen ZIY expr RParen End
void Parser::parse_main_action_6810() {
	switch (g_args.cpu()) {
	case CPU_KC160: 
	add_opcode(0x7F);
	add_opcode_idx(0xFDAE);
	break;
	default:
	error_illegal_ident(); }
}

// XOR A Comma expr End | XOR expr End | XRI expr End
void Parser::parse_main_action_6811() {
	warn_if_expr_in_parens();
	add_opcode_n(0xEE);
}

// XOR HL Comma BC End
void Parser::parse_main_action_6812() {
	switch (g_args.cpu()) {
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xF5);
	add_opcode(0x7C);
	add_opcode(0xA8);
	add_opcode(0x67);
	add_opcode(0x7D);
	add_opcode(0xA9);
	add_opcode(0x6F);
	add_opcode(0xF1);
	break;
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xF5);
	add_opcode(0x7F7C);
	add_opcode(0x7FA8);
	add_opcode(0x7F67);
	add_opcode(0x7F7D);
	add_opcode(0x7FA9);
	add_opcode(0x7F6F);
	add_opcode(0xF1);
	break;
	default:
	error_illegal_ident(); }
}

// XOR HL Comma DE End
void Parser::parse_main_action_6813() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0x54);
	break;
	case CPU_8080: case CPU_8085: case CPU_EZ80: case CPU_EZ80_Z80: case CPU_GBZ80: case CPU_KC160: case CPU_KC160_Z80: case CPU_R2KA: case CPU_R3K: case CPU_R800: case CPU_Z180: case CPU_Z80: case CPU_Z80_STRICT: case CPU_Z80N: 
	add_opcode(0xF5);
	add_opcode(0x7C);
	add_opcode(0xAA);
	add_opcode(0x67);
	add_opcode(0x7D);
	add_opcode(0xAB);
	add_opcode(0x6F);
	add_opcode(0xF1);
	break;
	default:
	error_illegal_ident(); }
}

// XOR IX Comma BC End
void Parser::parse_main_action_6814() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xF5);
	add_opcode(0xDD7C);
	add_opcode(0xA8);
	add_opcode(0xDD67);
	add_opcode(0xDD7D);
	add_opcode(0xA9);
	add_opcode(0xDD6F);
	add_opcode(0xF1);
	break;
	default:
	error_illegal_ident(); }
}

// XOR IX Comma DE End
void Parser::parse_main_action_6815() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xF5);
	add_opcode(0xDD7C);
	add_opcode(0xAA);
	add_opcode(0xDD67);
	add_opcode(0xDD7D);
	add_opcode(0xAB);
	add_opcode(0xDD6F);
	add_opcode(0xF1);
	break;
	default:
	error_illegal_ident(); }
}

// XOR IY Comma BC End
void Parser::parse_main_action_6816() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xF5);
	add_opcode(0xFD7C);
	add_opcode(0xA8);
	add_opcode(0xFD67);
	add_opcode(0xFD7D);
	add_opcode(0xA9);
	add_opcode(0xFD6F);
	add_opcode(0xF1);
	break;
	default:
	error_illegal_ident(); }
}

// XOR IY Comma DE End
void Parser::parse_main_action_6817() {
	switch (g_args.cpu()) {
	case CPU_EZ80: case CPU_EZ80_Z80: case CPU_R800: case CPU_Z80: case CPU_Z80N: 
	add_opcode(0xF5);
	add_opcode(0xFD7C);
	add_opcode(0xAA);
	add_opcode(0xFD67);
	add_opcode(0xFD7D);
	add_opcode(0xAB);
	add_opcode(0xFD6F);
	add_opcode(0xF1);
	break;
	default:
	error_illegal_ident(); }
}

// XOR JKHL Comma BCDE End
void Parser::parse_main_action_6818() {
	switch (g_args.cpu()) {
	case CPU_R4K: case CPU_R5K: 
	add_opcode(0xEDEE);
	break;
	default:
	error_illegal_ident(); }
}

// XOR Dot L A Comma LParen HL Minus RParen End | XOR Dot L LParen HL Minus RParen End | XOR Dot LIS A Comma LParen HL Minus RParen End | XOR Dot LIS LParen HL Minus RParen End
void Parser::parse_main_action_6819() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xAE);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// XOR Dot L A Comma LParen HL Plus RParen End | XOR Dot L LParen HL Plus RParen End | XOR Dot LIS A Comma LParen HL Plus RParen End | XOR Dot LIS LParen HL Plus RParen End
void Parser::parse_main_action_6820() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xAE);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// XOR Dot L A Comma LParen HL RParen End | XOR Dot L LParen HL RParen End | XOR Dot LIS A Comma LParen HL RParen End | XOR Dot LIS LParen HL RParen End
void Parser::parse_main_action_6821() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xAE);
	break;
	default:
	error_illegal_ident(); }
}

// XOR Dot L A Comma LParen IX RParen End | XOR Dot L LParen IX RParen End | XOR Dot LIS A Comma LParen IX RParen End | XOR Dot LIS LParen IX RParen End
void Parser::parse_main_action_6822() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xDDAE00);
	break;
	default:
	error_illegal_ident(); }
}

// XOR Dot L A Comma LParen IX expr RParen End | XOR Dot L LParen IX expr RParen End | XOR Dot LIS A Comma LParen IX expr RParen End | XOR Dot LIS LParen IX expr RParen End
void Parser::parse_main_action_6823() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xDDAE);
	break;
	default:
	error_illegal_ident(); }
}

// XOR Dot L A Comma LParen IY RParen End | XOR Dot L LParen IY RParen End | XOR Dot LIS A Comma LParen IY RParen End | XOR Dot LIS LParen IY RParen End
void Parser::parse_main_action_6824() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode(0xFDAE00);
	break;
	default:
	error_illegal_ident(); }
}

// XOR Dot L A Comma LParen IY expr RParen End | XOR Dot L LParen IY expr RParen End | XOR Dot LIS A Comma LParen IY expr RParen End | XOR Dot LIS LParen IY expr RParen End
void Parser::parse_main_action_6825() {
	switch (g_args.cpu()) {
	case CPU_EZ80_Z80: 
	add_opcode(0x49);
	add_opcode_idx(0xFDAE);
	break;
	default:
	error_illegal_ident(); }
}

// XOR Dot S A Comma LParen HL Minus RParen End | XOR Dot S LParen HL Minus RParen End | XOR Dot SIL A Comma LParen HL Minus RParen End | XOR Dot SIL LParen HL Minus RParen End
void Parser::parse_main_action_6826() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xAE);
	add_opcode(0x2B);
	break;
	default:
	error_illegal_ident(); }
}

// XOR Dot S A Comma LParen HL Plus RParen End | XOR Dot S LParen HL Plus RParen End | XOR Dot SIL A Comma LParen HL Plus RParen End | XOR Dot SIL LParen HL Plus RParen End
void Parser::parse_main_action_6827() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xAE);
	add_opcode(0x23);
	break;
	default:
	error_illegal_ident(); }
}

// XOR Dot S A Comma LParen HL RParen End | XOR Dot S LParen HL RParen End | XOR Dot SIL A Comma LParen HL RParen End | XOR Dot SIL LParen HL RParen End
void Parser::parse_main_action_6828() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xAE);
	break;
	default:
	error_illegal_ident(); }
}

// XOR Dot S A Comma LParen IX RParen End | XOR Dot S LParen IX RParen End | XOR Dot SIL A Comma LParen IX RParen End | XOR Dot SIL LParen IX RParen End
void Parser::parse_main_action_6829() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xDDAE00);
	break;
	default:
	error_illegal_ident(); }
}

// XOR Dot S A Comma LParen IX expr RParen End | XOR Dot S LParen IX expr RParen End | XOR Dot SIL A Comma LParen IX expr RParen End | XOR Dot SIL LParen IX expr RParen End
void Parser::parse_main_action_6830() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xDDAE);
	break;
	default:
	error_illegal_ident(); }
}

// XOR Dot S A Comma LParen IY RParen End | XOR Dot S LParen IY RParen End | XOR Dot SIL A Comma LParen IY RParen End | XOR Dot SIL LParen IY RParen End
void Parser::parse_main_action_6831() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode(0xFDAE00);
	break;
	default:
	error_illegal_ident(); }
}

// XOR Dot S A Comma LParen IY expr RParen End | XOR Dot S LParen IY expr RParen End | XOR Dot SIL A Comma LParen IY expr RParen End | XOR Dot SIL LParen IY expr RParen End
void Parser::parse_main_action_6832() {
	switch (g_args.cpu()) {
	case CPU_EZ80: 
	add_opcode(0x52);
	add_opcode_idx(0xFDAE);
	break;
	default:
	error_illegal_ident(); }
}

// Dot Ident
void Parser::parse_main_action_6833() {
	{	string label = m_line.peek(-1).svalue();
		g_asm.cur_section()->add_label(label);
	}
}

// Dot Ident EQU expr End | Dot Ident Eq expr End
void Parser::parse_main_action_6834() {
	{	string name = m_line.peek(start_stmt_index() + 1).svalue();
		auto symbol = make_shared<Symbol>(Symbol::MakeComputed(), 
										  name, m_exprs.back());
		g_symbols.add(symbol);
	}
}

// Ident EQU expr End | Ident Colon EQU expr End | Ident Colon Eq expr End | Ident Eq expr End
void Parser::parse_main_action_6835() {
	{	string name = m_line.peek(start_stmt_index()).svalue();
		auto symbol = make_shared<Symbol>(Symbol::MakeComputed(), 
										  name, m_exprs.back());
		g_symbols.add(symbol);
	}
}

// Ident Colon
void Parser::parse_main_action_6836() {
	{	string label = m_line.peek(-2).svalue();
		g_asm.cur_section()->add_label(label);
	}
}

