---
Keyword::BYTE: "parse_int8_data();\n"
Keyword::DB: "parse_int8_data();\n"
Keyword::DDB: "parse_int16be_data();\n"
Keyword::DEFB: "parse_int8_data();\n"
Keyword::DEFDB: "parse_int16be_data();\n"
Keyword::DEFM: "parse_int8_data();\n"
Keyword::DEFP: "parse_int24_data();\n"
Keyword::DEFQ: "parse_int32_data();\n"
'Keyword::DEFS const_expr TType::Comma TType::String TType::End': "do_defs_n_str(m_line.peek(-2).svalue());\n"
'Keyword::DEFS const_expr TType::Comma const_expr TType::End': "do_defs_n_n();\n"
'Keyword::DEFS const_expr TType::End': "do_defs_n();\n"
Keyword::DEFW: "parse_int16_data();\n"
Keyword::DM: "parse_int8_data();\n"
Keyword::DP: "parse_int24_data();\n"
Keyword::DQ: "parse_int32_data();\n"
'Keyword::DS const_expr TType::Comma TType::String TType::End': "do_defs_n_str(m_line.peek(-2).svalue());\n"
'Keyword::DS const_expr TType::Comma const_expr TType::End': "do_defs_n_n();\n"
'Keyword::DS const_expr TType::End': "do_defs_n();\n"
Keyword::DW: "parse_int16_data();\n"
Keyword::DWORD: "parse_int32_data();\n"
Keyword::EXTERN: "parse_symbol_declare(Symbol::Scope::Extern);\n"
Keyword::GLOBAL: "parse_symbol_declare(Symbol::Scope::Global);\n"
Keyword::LIB: "parse_symbol_declare(Symbol::Scope::Extern);\n"
'Keyword::ORG const_expr TType::End': "/*set_origin(expr);*/\nwhile (!m_line.at_end()) m_line.next();\n"
Keyword::PTR: "parse_int24_data();\n"
Keyword::PUBLIC: "parse_symbol_declare(Symbol::Scope::Public);\n"
Keyword::SECTION: "while (!m_line.at_end()) m_line.next();\n"
Keyword::WORD: "parse_int16_data();\n"
Keyword::WORDBE: "parse_int16be_data();\n"
Keyword::XDEF: "parse_symbol_declare(Symbol::Scope::Public);\n"
Keyword::XLIB: "parse_symbol_declare(Symbol::Scope::Public);\n"
Keyword::XREF: "parse_symbol_declare(Symbol::Scope::Extern);\n"
'TType::Dot TType::Ident': "{\tstring label = m_line.peek(-1).svalue();\n\tg_asm.cur_section()->add_label(label);\n}\n"
'TType::Dot TType::Ident Keyword::EQU expr TType::End': "{\tstring name = m_line.peek(start_stmt_index() + 1).svalue();\n\tauto symbol = make_shared<Symbol>(Symbol::MakeComputed(), \n\t\t\t\t\t\t\t\t\t  name, m_exprs.back());\n\tg_symbols.add(symbol);\n}\r\n"
'TType::Dot TType::Ident TType::Eq expr TType::End': "{\tstring name = m_line.peek(start_stmt_index() + 1).svalue();\n\tauto symbol = make_shared<Symbol>(Symbol::MakeComputed(), \n\t\t\t\t\t\t\t\t\t  name, m_exprs.back());\n\tg_symbols.add(symbol);\n}\r\n"
'TType::Ident Keyword::EQU expr TType::End': "{\tstring name = m_line.peek(start_stmt_index()).svalue();\n\tauto symbol = make_shared<Symbol>(Symbol::MakeComputed(), \n\t\t\t\t\t\t\t\t\t  name, m_exprs.back());\n\tg_symbols.add(symbol);\n}\n"
'TType::Ident TType::Colon': "{\tstring label = m_line.peek(-2).svalue();\n\tg_asm.cur_section()->add_label(label);\n}\n"
'TType::Ident TType::Colon Keyword::EQU expr TType::End': "{\tstring name = m_line.peek(start_stmt_index()).svalue();\n\tauto symbol = make_shared<Symbol>(Symbol::MakeComputed(), \n\t\t\t\t\t\t\t\t\t  name, m_exprs.back());\n\tg_symbols.add(symbol);\n}\n"
'TType::Ident TType::Colon TType::Eq expr TType::End': "{\tstring name = m_line.peek(start_stmt_index()).svalue();\n\tauto symbol = make_shared<Symbol>(Symbol::MakeComputed(), \n\t\t\t\t\t\t\t\t\t  name, m_exprs.back());\n\tg_symbols.add(symbol);\n}\n"
'TType::Ident TType::Eq expr TType::End': "{\tstring name = m_line.peek(start_stmt_index()).svalue();\n\tauto symbol = make_shared<Symbol>(Symbol::MakeComputed(), \n\t\t\t\t\t\t\t\t\t  name, m_exprs.back());\n\tg_symbols.add(symbol);\n}\n"
