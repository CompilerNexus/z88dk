---
Keyword::BYTE: "parse_int8_data();\n"
Keyword::DB: "parse_int8_data();\n"
'Keyword::DC Keyword::START_STATE_DEFC TType::Ident TType::Eq expr TType::Comma': "string name = m_line.peek(start_stmt_index() + 1).svalue();\ndo_equ(name, m_exprs.back());\n// repeat if comma\nif (m_line.peek(-1).is(TType::Comma)) {\n\tm_start_stmt = m_line.pos() - 1;\n\tparse_main(START_STATE_DEFC);\n}\n"
'Keyword::DC Keyword::START_STATE_DEFC TType::Ident TType::Eq expr TType::End': "string name = m_line.peek(start_stmt_index() + 1).svalue();\ndo_equ(name, m_exprs.back());\n// repeat if comma\nif (m_line.peek(-1).is(TType::Comma)) {\n\tm_start_stmt = m_line.pos() - 1;\n\tparse_main(START_STATE_DEFC);\n}\n"
Keyword::DDB: "parse_int16be_data();\n"
Keyword::DEFB: "parse_int8_data();\n"
'Keyword::DEFC Keyword::START_STATE_DEFC TType::Ident TType::Eq expr TType::Comma': "string name = m_line.peek(start_stmt_index() + 1).svalue();\ndo_equ(name, m_exprs.back());\n// repeat if comma\nif (m_line.peek(-1).is(TType::Comma)) {\n\tm_start_stmt = m_line.pos() - 1;\n\tparse_main(START_STATE_DEFC);\n}\n"
'Keyword::DEFC Keyword::START_STATE_DEFC TType::Ident TType::Eq expr TType::End': "string name = m_line.peek(start_stmt_index() + 1).svalue();\ndo_equ(name, m_exprs.back());\n// repeat if comma\nif (m_line.peek(-1).is(TType::Comma)) {\n\tm_start_stmt = m_line.pos() - 1;\n\tparse_main(START_STATE_DEFC);\n}\n"
Keyword::DEFDB: "parse_int16be_data();\n"
Keyword::DEFM: "parse_int8_data();\n"
Keyword::DEFP: "parse_int24_data();\n"
Keyword::DEFQ: "parse_int32_data();\n"
'Keyword::DEFS const_expr TType::Comma TType::String TType::End': "do_defs_n_str(m_line.peek(-2).svalue());\n"
'Keyword::DEFS const_expr TType::Comma const_expr TType::End': "do_defs_n_n();\n"
'Keyword::DEFS const_expr TType::End': "do_defs_n();\n"
Keyword::DEFW: "parse_int16_data();\n"
Keyword::DM: "parse_int8_data();\n"
Keyword::DP: "parse_int24_data();\n"
Keyword::DQ: "parse_int32_data();\n"
'Keyword::DS const_expr TType::Comma TType::String TType::End': "do_defs_n_str(m_line.peek(-2).svalue());\n"
'Keyword::DS const_expr TType::Comma const_expr TType::End': "do_defs_n_n();\n"
'Keyword::DS const_expr TType::End': "do_defs_n();\n"
Keyword::DW: "parse_int16_data();\n"
Keyword::DWORD: "parse_int32_data();\n"
'Keyword::EXTERN Keyword::START_STATE_EXTERN TType::Ident TType::Comma': "string name = m_line.peek(start_stmt_index() + 1).svalue();\ng_symbols.declare_extern(name);\n// repeat if comma\nif (m_line.peek(-1).is(TType::Comma)) {\n\tm_start_stmt = m_line.pos() - 1;\n\tparse_main(START_STATE_EXTERN);\n}\n"
'Keyword::EXTERN Keyword::START_STATE_EXTERN TType::Ident TType::End': "string name = m_line.peek(start_stmt_index() + 1).svalue();\ng_symbols.declare_extern(name);\n// repeat if comma\nif (m_line.peek(-1).is(TType::Comma)) {\n\tm_start_stmt = m_line.pos() - 1;\n\tparse_main(START_STATE_EXTERN);\n}\n"
'Keyword::GLOBAL Keyword::START_STATE_GLOBAL TType::Ident TType::Comma': "string name = m_line.peek(start_stmt_index() + 1).svalue();\ng_symbols.declare_global(name);\n// repeat if comma\nif (m_line.peek(-1).is(TType::Comma)) {\n\tm_start_stmt = m_line.pos() - 1;\n\tparse_main(START_STATE_GLOBAL);\n}\n"
'Keyword::GLOBAL Keyword::START_STATE_GLOBAL TType::Ident TType::End': "string name = m_line.peek(start_stmt_index() + 1).svalue();\ng_symbols.declare_global(name);\n// repeat if comma\nif (m_line.peek(-1).is(TType::Comma)) {\n\tm_start_stmt = m_line.pos() - 1;\n\tparse_main(START_STATE_GLOBAL);\n}\n"
'Keyword::LIB Keyword::START_STATE_EXTERN TType::Ident TType::Comma': "string name = m_line.peek(start_stmt_index() + 1).svalue();\ng_symbols.declare_extern(name);\n// repeat if comma\nif (m_line.peek(-1).is(TType::Comma)) {\n\tm_start_stmt = m_line.pos() - 1;\n\tparse_main(START_STATE_EXTERN);\n}\n"
'Keyword::LIB Keyword::START_STATE_EXTERN TType::Ident TType::End': "string name = m_line.peek(start_stmt_index() + 1).svalue();\ng_symbols.declare_extern(name);\n// repeat if comma\nif (m_line.peek(-1).is(TType::Comma)) {\n\tm_start_stmt = m_line.pos() - 1;\n\tparse_main(START_STATE_EXTERN);\n}\n"
'Keyword::ORG const_expr TType::End': "/*set_origin(expr);*/\nwhile (!m_line.at_end()) m_line.next();\n"
Keyword::PTR: "parse_int24_data();\n"
'Keyword::PUBLIC Keyword::START_STATE_PUBLIC TType::Ident TType::Comma': "string name = m_line.peek(start_stmt_index() + 1).svalue();\ng_symbols.declare_public(name);\n// repeat if comma\nif (m_line.peek(-1).is(TType::Comma)) {\n\tm_start_stmt = m_line.pos() - 1;\n\tparse_main(START_STATE_PUBLIC);\n}\n"
'Keyword::PUBLIC Keyword::START_STATE_PUBLIC TType::Ident TType::End': "string name = m_line.peek(start_stmt_index() + 1).svalue();\ng_symbols.declare_public(name);\n// repeat if comma\nif (m_line.peek(-1).is(TType::Comma)) {\n\tm_start_stmt = m_line.pos() - 1;\n\tparse_main(START_STATE_PUBLIC);\n}\n"
Keyword::SECTION: "while (!m_line.at_end()) m_line.next();\n"
'Keyword::START_STATE_EQU TType::Ident Keyword::EQU expr TType::Comma': "string name = m_line.peek(start_stmt_index() + 0).svalue();\ndo_equ(name, m_exprs.back());\n// repeat if comma\nif (m_line.peek(-1).is(TType::Comma)) {\n\tm_start_stmt = m_line.pos();\n\tparse_main(START_STATE_EQU);\n}\n"
'Keyword::START_STATE_EQU TType::Ident Keyword::EQU expr TType::End': "string name = m_line.peek(start_stmt_index() + 0).svalue();\ndo_equ(name, m_exprs.back());\n// repeat if comma\nif (m_line.peek(-1).is(TType::Comma)) {\n\tm_start_stmt = m_line.pos();\n\tparse_main(START_STATE_EQU);\n}\n"
'Keyword::START_STATE_EQU TType::Ident TType::Eq expr TType::Comma': "string name = m_line.peek(start_stmt_index() + 0).svalue();\ndo_equ(name, m_exprs.back());\n// repeat if comma\nif (m_line.peek(-1).is(TType::Comma)) {\n\tm_start_stmt = m_line.pos();\n\tparse_main(START_STATE_EQU);\n}\n"
'Keyword::START_STATE_EQU TType::Ident TType::Eq expr TType::End': "string name = m_line.peek(start_stmt_index() + 0).svalue();\ndo_equ(name, m_exprs.back());\n// repeat if comma\nif (m_line.peek(-1).is(TType::Comma)) {\n\tm_start_stmt = m_line.pos();\n\tparse_main(START_STATE_EQU);\n}\n"
Keyword::WORD: "parse_int16_data();\n"
Keyword::WORDBE: "parse_int16be_data();\n"
'Keyword::XDEF Keyword::START_STATE_PUBLIC TType::Ident TType::Comma': "string name = m_line.peek(start_stmt_index() + 1).svalue();\ng_symbols.declare_public(name);\n// repeat if comma\nif (m_line.peek(-1).is(TType::Comma)) {\n\tm_start_stmt = m_line.pos() - 1;\n\tparse_main(START_STATE_PUBLIC);\n}\n"
'Keyword::XDEF Keyword::START_STATE_PUBLIC TType::Ident TType::End': "string name = m_line.peek(start_stmt_index() + 1).svalue();\ng_symbols.declare_public(name);\n// repeat if comma\nif (m_line.peek(-1).is(TType::Comma)) {\n\tm_start_stmt = m_line.pos() - 1;\n\tparse_main(START_STATE_PUBLIC);\n}\n"
'Keyword::XLIB Keyword::START_STATE_PUBLIC TType::Ident TType::Comma': "string name = m_line.peek(start_stmt_index() + 1).svalue();\ng_symbols.declare_public(name);\n// repeat if comma\nif (m_line.peek(-1).is(TType::Comma)) {\n\tm_start_stmt = m_line.pos() - 1;\n\tparse_main(START_STATE_PUBLIC);\n}\n"
'Keyword::XLIB Keyword::START_STATE_PUBLIC TType::Ident TType::End': "string name = m_line.peek(start_stmt_index() + 1).svalue();\ng_symbols.declare_public(name);\n// repeat if comma\nif (m_line.peek(-1).is(TType::Comma)) {\n\tm_start_stmt = m_line.pos() - 1;\n\tparse_main(START_STATE_PUBLIC);\n}\n"
'Keyword::XREF Keyword::START_STATE_EXTERN TType::Ident TType::Comma': "string name = m_line.peek(start_stmt_index() + 1).svalue();\ng_symbols.declare_extern(name);\n// repeat if comma\nif (m_line.peek(-1).is(TType::Comma)) {\n\tm_start_stmt = m_line.pos() - 1;\n\tparse_main(START_STATE_EXTERN);\n}\n"
'Keyword::XREF Keyword::START_STATE_EXTERN TType::Ident TType::End': "string name = m_line.peek(start_stmt_index() + 1).svalue();\ng_symbols.declare_extern(name);\n// repeat if comma\nif (m_line.peek(-1).is(TType::Comma)) {\n\tm_start_stmt = m_line.pos() - 1;\n\tparse_main(START_STATE_EXTERN);\n}\n"
'TType::Dot TType::Ident Keyword::EQU expr TType::End': "string name = m_line.peek(start_stmt_index() + 1).svalue();\ndo_equ(name, m_exprs.back());\n"
'TType::Dot TType::Ident TType::Eq expr TType::End': "string name = m_line.peek(start_stmt_index() + 1).svalue();\ndo_equ(name, m_exprs.back());\n"
'TType::Ident TType::Colon Keyword::EQU expr TType::End': "string name = m_line.peek(start_stmt_index() + 0).svalue();\ndo_equ(name, m_exprs.back());\n"
'TType::Ident TType::Colon TType::Eq expr TType::End': "string name = m_line.peek(start_stmt_index() + 0).svalue();\ndo_equ(name, m_exprs.back());\n"
